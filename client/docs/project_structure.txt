--- Folder Structure ---
.eslintrc.js
.prettierrc
[.qodo]
README.md
cau_truc_du_an.md
[docs]
    ├── .project_structure_filter
    ├── .project_structure_ignore
    └── project_structure.txt
jsconfig.json
package.json
[public]
    └── index.html
[src]
    ├── App.js
    ├── [api]
        ├── [controllers]
            └── productController.js
    ├── [assets]
        ├── [css]
            └── index.css
        └── [images]
    ├── [components]
        ├── [common]
            ├── [Button]
                ├── Button.test.js
                └── index.js
            ├── [Card]
                └── index.js
            ├── [ErrorAlert]
                └── index.js
            ├── [Input]
                └── index.js
            ├── [LoadingSpiner]
                └── index.js
            ├── [Modal]
                └── index.js
            ├── [Pagination]
                └── index.js
            ├── [RefreshButton]
                └── index.js
            ├── [Toast]
                └── index.js
            ├── [Watermark]
                └── index.js
            └── index.js
        ├── [feature]
            ├── [Admin]
                ├── [Dashboard]
                    ├── DashboardStats.js
                    ├── RecentOrders.js
                    ├── SalesChart.js
                    ├── TimeFilter.js
                    └── index.js
                ├── [OrderManager]
                    ├── OrderDetail.js
                    └── OrderTable.js
                ├── [ProductManager]
                    ├── ProductForm.js
                    └── ProductTable.js
                └── [UserManager]
                    └── UserTable.js
            ├── [Auth]
                └── RegisterForm.js
            ├── [Cart]
                ├── AddToCart.js
                ├── CartItem.js
                ├── CartList.js
                └── CartSummary.js
            ├── [Category]
                └── CategoryBreadcrumb.js
            ├── [Product]
                ├── ProductCard.js
                ├── ProductFilter.js
                ├── ProductList.js
                └── ProductList.test.js
            ├── [Review]
                ├── ReviewForm.js
                ├── ReviewItem.js
                ├── ReviewList.js
                └── ReviewStats.js
            ├── [Search]
                ├── RecentSearches.js
                └── SearchBar.js
            └── [User]
                ├── OrderDetail.js
                ├── ProfileSidebar.js
                ├── UserOrders.js
                └── UserProfile.js
    ├── [hooks]
        ├── useDebounce.js
        ├── useForm.js
        ├── useLocalStorage.js
        └── useOutsideClick.js
    ├── index.js
    ├── [pages]
        ├── [Admin]
            └── [Dashboard]
                └── index.js
        ├── [Auth]
            ├── [Login]
                └── index.js
            └── [Register]
                └── index.js
        ├── [Cart]
            └── index.js
        ├── [Home]
            ├── [NotFound]
            └── index.js
        ├── [Info]
            ├── Contact.js
            ├── FAQ.js
            ├── Privacy.js
            ├── Return.js
            ├── Shipping.js
            └── Terms.js
        ├── [NotFound]
            └── index.js
        ├── [ProductDetail]
            └── index.js
        ├── [Products]
            └── index.js
        ├── [Profile]
            ├── OrderDetail.js
            ├── Orders.js
            └── index.js
        └── [Search]
            └── index.js
    ├── [services]
        ├── adminService.js
        ├── api.js
        ├── authService.js
        ├── cartService.js
        ├── notificationService.js
        ├── orderService.js
        ├── paymentService.js
        ├── productService.js
        ├── reviewService.js
        ├── userService.js
        └── wishlistService.js
    ├── [store]
        ├── hooks.js
        ├── index.js
        └── [slices]
            ├── adminSlice.js
            ├── authSlice.js
            ├── cartSlice.js
            ├── notificationSlice.js
            ├── orderSlice.js
            ├── productSlice.js
            ├── reviewSlice.js
            ├── searchSlice.js
            ├── uiSlice.js
            ├── userSlice.js
            └── wishlistSlice.js
    └── [utils]
        ├── authToken.js
        └── formatters.js
tailwind.config.js
webpack.config.js

--- File Contents ---

--- File: .eslintrc.js ---
module.exports = {
    env: {
      browser: true,
      es2021: true,
      node: true,
      jest: true,
    },
    extends: [
      'eslint:recommended',
      'plugin:react/recommended',
      'plugin:react-hooks/recommended',
      'plugin:prettier/recommended',
    ],
    parserOptions: {
      ecmaFeatures: {
        jsx: true,
      },
      ecmaVersion: 12,
      sourceType: 'module',
    },
    plugins: ['react', 'react-hooks', 'prettier'],
    rules: {
      'react/react-in-jsx-scope': 'off',
      'react/prop-types': 'off',
      'prettier/prettier': 'error',
      'no-unused-vars': 'warn',
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'warn',
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  };

--- File: .prettierrc ---
{
    "semi": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "es5",
    "printWidth": 100,
    "bracketSpacing": true,
    "endOfLine": "auto"
  }

--- File: README.md ---
1. Tổng quan cấu trúc
client/
├── public/                # Static files
│   ├── index.html         # HTML template
│   ├── favicon.ico        # Website icon
│   ├── manifest.json      # PWA manifest
│   └── assets/            # Static assets
├── src/                   # Source code
│   ├── index.js           # Entry point
│   ├── App.js             # Main component
│   ├── assets/            # Assets (images, fonts, etc.)
│   ├── components/        # Reusable components
│   ├── hooks/             # Custom React hooks
│   ├── pages/             # Page components
│   ├── routes/            # Route definitions
│   ├── services/          # API services
│   ├── store/             # Redux state management
│   └── utils/             # Utility functions
├── .env                   # Environment variables
├── .eslintrc.js           # ESLint configuration
├── .prettierrc            # Prettier configuration
├── jsconfig.json          # JavaScript configuration
├── package.json           # Dependencies & scripts
├── tailwind.config.js     # Tailwind CSS configuration
└── README.md              # Project documentation
2. Cấu trúc chi tiết từng thành phần
2.1. /src/components/
Components được chia thành 3 loại chính:
components/
├── common/                # Các components dùng chung
│   ├── Button/
│   │   ├── Button.js      # Component chính
│   │   └── Button.test.js # Unit tests
│   ├── Card/
│   ├── Input/
│   ├── Modal/
│   ├── Dropdown/
│   ├── Pagination/
│   ├── Alert/
│   ├── Badge/
│   ├── Breadcrumb/
│   ├── LoadingSpinner/
│   ├── Empty/
│   ├── ErrorMessage/
│   ├── Tag/
│   ├── Tooltip/
│   ├── Tabs/
│   ├── Avatar/
│   ├── Rating/
│   ├── Toast/
│   └── Watermark/
│
├── layout/                # Components liên quan đến layout
│   ├── Header/
│   │   ├── index.js
│   │   ├── Logo.js
│   │   ├── Navigation.js
│   │   └── UserMenu.js
│   ├── Footer/
│   │   ├── index.js
│   │   ├── FooterLinks.js
│   │   └── Copyright.js
│   ├── Sidebar/
│   │   ├── index.js
│   │   └── SidebarItem.js
│   ├── MainLayout/
│   │   └── index.js
│   └── AuthLayout/
│       └── index.js
│
└── feature/               # Components cho các tính năng cụ thể
    ├── Auth/
    │   ├── LoginForm.js
    │   ├── RegisterForm.js
    │   ├── ForgotPasswordForm.js
    │   └── ResetPasswordForm.js
    │
    ├── User/
    │   ├── UserProfile.js
    │   ├── UserAvatar.js
    │   ├── UserSettings.js
    │   └── UserOrders.js
    │
    ├── Product/
    │   ├── ProductCard.js
    │   ├── ProductList.js
    │   ├── ProductDetail.js
    │   ├── ProductImages.js
    │   ├── ProductInfo.js
    │   ├── ProductFilter.js
    │   ├── ProductSort.js
    │   ├── ProductPagination.js
    │   └── RelatedProducts.js
    │
    ├── Category/
    │   ├── CategoryList.js
    │   ├── CategoryItem.js
    │   └── CategoryBreadcrumb.js
    │
    ├── Cart/
    │   ├── CartItem.js
    │   ├── CartList.js
    │   ├── CartSummary.js
    │   ├── AddToCart.js
    │   └── MiniCart.js
    │
    ├── Checkout/
    │   ├── CheckoutForm.js
    │   ├── ShippingForm.js
    │   ├── PaymentForm.js
    │   ├── OrderSummary.js
    │   └── OrderConfirmation.js
    │
    ├── Review/
    │   ├── ReviewForm.js
    │   ├── ReviewList.js
    │   ├── ReviewItem.js
    │   └── ReviewStats.js
    │
    ├── Search/
    │   ├── SearchBar.js
    │   ├── SearchResults.js
    │   ├── SearchFilters.js
    │   └── RecentSearches.js
    │
    └── Admin/
        ├── Dashboard/
        │   ├── DashboardStats.js
        │   ├── RecentOrders.js
        │   └── SalesChart.js
        ├── ProductManager/
        │   ├── ProductTable.js
        │   ├── ProductForm.js
        │   └── ProductBulkActions.js
        ├── OrderManager/
        │   ├── OrderTable.js
        │   ├── OrderDetail.js
        │   └── OrderStatusUpdate.js
        └── UserManager/
            ├── UserTable.js
            └── UserForm.js
2.2. /src/pages/
pages/
├── Home/
│   └── index.js
│
├── Auth/
│   ├── Login/
│   │   └── index.js
│   ├── Register/
│   │   └── index.js
│   ├── ForgotPassword/
│   │   └── index.js
│   └── ResetPassword/
│       └── index.js
│
├── Products/
│   └── index.js
│
├── ProductDetail/
│   └── index.js
│
├── Cart/
│   └── index.js
│
├── Checkout/
│   ├── index.js
│   └── Success.js
│
├── Search/
│   └── index.js
│
├── Profile/
│   ├── index.js
│   ├── Settings.js
│   ├── Orders.js
│   └── Reviews.js
│
├── Admin/
│   ├── Dashboard/
│   │   └── index.js
│   ├── Products/
│   │   ├── index.js
│   │   └── Edit.js
│   ├── Orders/
│   │   ├── index.js
│   │   └── Detail.js
│   └── Users/
│       ├── index.js
│       └── Edit.js
│
└── NotFound/
    └── index.js
2.3. /src/routes/
routes/
├── index.js           # Cấu hình tất cả routes
├── paths.js           # Constants cho path URLs
├── PrivateRoute.js    # Higher-order component bảo vệ routes
└── PublicRoute.js     # Higher-order component cho public routes
2.4. /src/hooks/
hooks/
├── useAuth.js         # Hook xử lý authentication
├── useCart.js         # Hook quản lý giỏ hàng
├── useDebounce.js     # Hook debounce giá trị
├── useForm.js         # Hook quản lý form
├── useLocalStorage.js # Hook tương tác với localStorage
├── useOutsideClick.js # Hook phát hiện click bên ngoài element
├── usePayment.js      # Hook xử lý thanh toán
├── useProduct.js      # Hook lấy thông tin sản phẩm
├── useSearch.js       # Hook xử lý tìm kiếm
└── useWindowSize.js   # Hook lấy kích thước cửa sổ
2.5. /src/services/
services/
├── api.js             # Cấu hình Axios/Fetch
├── authService.js     # API cho authentication
├── cartService.js     # API cho cart operations
├── categoryService.js # API cho category operations
├── orderService.js    # API cho order operations
├── paymentService.js  # API cho payment integration
├── productService.js  # API cho product operations
├── reviewService.js   # API cho review operations
├── searchService.js   # API cho search functionality
└── userService.js     # API cho user operations
2.6. /src/store/
store/
├── index.js           # Cấu hình Redux store
├── hooks.js           # Custom Redux hooks (useAppDispatch, useAppSelector)
│
└── slices/
    ├── authSlice.js   # State management cho authentication
    ├── cartSlice.js   # State management cho shopping cart
    ├── productSlice.js # State management cho products
    ├── categorySlice.js # State management cho categories
    ├── orderSlice.js  # State management cho orders
    ├── reviewSlice.js # State management cho reviews
    ├── searchSlice.js # State management cho search
    ├── uiSlice.js     # State management cho UI (modals, sidebars, etc.)
    └── userSlice.js   # State management cho user profile
2.7. /src/utils/
utils/
├── authToken.js       # Utilities xử lý JWT tokens
├── formatters.js      # Formatting functions (dates, currency, etc.)
├── validators.js      # Validation functions
├── storage.js         # Local/session storage helpers
├── errorHandler.js    # Error handling utilities
├── analytics.js       # Analytics helpers
├── constants.js       # Application constants
└── helpers.js         # Các helper functions khác
2.8. /src/assets/
assets/
├── css/
│   └── index.css      # Global CSS
│
├── images/
│   ├── logo.png
│   ├── banners/
│   ├── icons/
│   └── products/
│
└── fonts/
    └── ...


--- File: cau_truc_du_an.md ---

1. Tổng quan cấu trúc client/
├── public/ # Static files
│ ├── index.html # HTML template
│ ├── favicon.ico # Website icon
│ ├── manifest.json # PWA manifest
│ └── assets/ # Static assets
├── src/ # Source code
│ ├── index.js # Entry point
│ ├── App.js # Main component
│ ├── assets/ # Assets (images, fonts, etc.)
│ ├── components/ # Reusable components
│ ├── hooks/ # Custom React hooks
│ ├── pages/ # Page components
│ ├── routes/ # Route definitions
│ ├── services/ # API services
│ ├── store/ # Redux state management
│ └── utils/ # Utility functions
├── .env # Environment variables
├── .eslintrc.js # ESLint configuration
├── .prettierrc # Prettier configuration
├── jsconfig.json # JavaScript configuration
├── package.json # Dependencies & scripts
├── tailwind.config.js # Tailwind CSS configuration
└── README.md # Project documentation

2. /src/components/

components/
├── common/ # Các components dùng chung
│ ├── Button/
│ │ ├── Button.js # Component chính
│ │ └── Button.test.js # Unit tests
│ ├── Card/
│ ├── Input/
│ ├── Modal/
│ ├── Dropdown/
│ ├── Pagination/
│ ├── Alert/
│ ├── Badge/
│ ├── Breadcrumb/
│ ├── LoadingSpinner/
│ ├── Empty/
│ ├── ErrorMessage/
│ ├── Tag/
│ ├── Tooltip/
│ ├── Tabs/
│ ├── Avatar/
│ ├── Rating/
│ ├── Toast/
│ └── Watermark/
│
├── layout/ # Components liên quan đến layout
│ ├── Header/
│ │ ├── index.js
│ │ ├── Logo.js
│ │ ├── Navigation.js
│ │ └── UserMenu.js
│ ├── Footer/
│ │ ├── index.js
│ │ ├── FooterLinks.js
│ │ └── Copyright.js
│ ├── Sidebar/
│ │ ├── index.js
│ │ └── SidebarItem.js
│ ├── MainLayout/
│ │ └── index.js
│ └── AuthLayout/
│ └── index.js
│
└── feature/ # Components cho các tính năng cụ thể
                ├── Auth/
                │ ├── LoginForm.js
                │ ├── RegisterForm.js
                │ ├── ForgotPasswordForm.js
                │ └── ResetPasswordForm.js
                │
                ├── User/
                │ ├── UserProfile.js
                │ ├── UserAvatar.js
                │ ├── UserSettings.js
                │ └── UserOrders.js
                │
                ├── Product/
                │ ├── ProductCard.js
                │ ├── ProductList.js
                │ ├── ProductDetail.js
                │ ├── ProductImages.js
                │ ├── ProductInfo.js
                │ ├── ProductFilter.js
                │ ├── ProductSort.js
                │ ├── ProductPagination.js
                │ └── RelatedProducts.js
                │
                ├── Category/
                │ ├── CategoryList.js
                │ ├── CategoryItem.js
                │ └── CategoryBreadcrumb.js
                │
                ├── Cart/
                │ ├── CartItem.js
                │ ├── CartList.js
                │ ├── CartSummary.js
                │ ├── AddToCart.js
                │ └── MiniCart.js
                │
                ├── Checkout/
                │ ├── CheckoutForm.js
                │ ├── ShippingForm.js
                │ ├── PaymentForm.js
                │ ├── OrderSummary.js
                │ └── OrderConfirmation.js
                │
                ├── Review/
                │ ├── ReviewForm.js
                │ ├── ReviewList.js
                │ ├── ReviewItem.js
                │ └── ReviewStats.js
                │
                ├── Search/
                │ ├── SearchBar.js
                │ ├── SearchResults.js
                │ ├── SearchFilters.js
                │ └── RecentSearches.js
                │
                └── Admin/
                                ├── Dashboard/
                                │ ├── DashboardStats.js
                                │ ├── RecentOrders.js
                                │ └── SalesChart.js
                                ├── ProductManager/
                                │ ├── ProductTable.js
                                │ ├── ProductForm.js
                                │ └── ProductBulkActions.js
                                ├── OrderManager/
                                │ ├── OrderTable.js
                                │ ├── OrderDetail.js
                                │ └── OrderStatusUpdate.js
                                └── UserManager/
                                                ├── UserTable.js
                                                └── UserForm.js

2.2. /src/pages/

pages/
├── Home/
│   └── index.js
│
├── Auth/
│   ├── Login/
│   │   └── index.js
│   ├── Register/
│   │   └── index.js
│   ├── ForgotPassword/
│   │   └── index.js
│   └── ResetPassword/
│       └── index.js
│
├── Products/
│   └── index.js
│
├── ProductDetail/
│   └── index.js
│
├── Cart/
│   └── index.js
│
├── Checkout/
│   ├── index.js
│   └── Success.js
│
├── Search/
│   └── index.js
│
├── Profile/
│   ├── index.js
│   ├── Settings.js
│   ├── Orders.js
│   └── Reviews.js
│
├── Admin/
│   ├── Dashboard/
│   │   └── index.js
│   ├── Products/
│   │   ├── index.js
│   │   └── Edit.js
│   ├── Orders/
│   │   ├── index.js
│   │   └── Detail.js
│   └── Users/
│       ├── index.js
│       └── Edit.js
│
└── NotFound/
    └── index.js
2.3. /src/routes/
routes/
├── index.js           # Cấu hình tất cả routes
├── paths.js           # Constants cho path URLs
├── PrivateRoute.js    # Higher-order component bảo vệ routes
└── PublicRoute.js     # Higher-order component cho public routes
2.4. /src/hooks/
hooks/
├── useAuth.js         # Hook xử lý authentication
├── useCart.js         # Hook quản lý giỏ hàng
├── useDebounce.js     # Hook debounce giá trị
├── useForm.js         # Hook quản lý form
├── useLocalStorage.js # Hook tương tác với localStorage
├── useOutsideClick.js # Hook phát hiện click bên ngoài element
├── usePayment.js      # Hook xử lý thanh toán
├── useProduct.js      # Hook lấy thông tin sản phẩm
├── useSearch.js       # Hook xử lý tìm kiếm
└── useWindowSize.js   # Hook lấy kích thước cửa sổ
2.5. /src/services/
services/
├── api.js             # Cấu hình Axios/Fetch
├── authService.js     # API cho authentication
├── cartService.js     # API cho cart operations
├── categoryService.js # API cho category operations
├── orderService.js    # API cho order operations
├── paymentService.js  # API cho payment integration
├── productService.js  # API cho product operations
├── reviewService.js   # API cho review operations
├── searchService.js   # API cho search functionality
└── userService.js     # API cho user operations
2.6. /src/store/
store/
├── index.js           # Cấu hình Redux store
├── hooks.js           # Custom Redux hooks (useAppDispatch, useAppSelector)
│
└── slices/
    ├── authSlice.js   # State management cho authentication
    ├── cartSlice.js   # State management cho shopping cart
    ├── productSlice.js # State management cho products
    ├── categorySlice.js # State management cho categories
    ├── orderSlice.js  # State management cho orders
    ├── reviewSlice.js # State management cho reviews
    ├── searchSlice.js # State management cho search
    ├── uiSlice.js     # State management cho UI (modals, sidebars, etc.)
    └── userSlice.js   # State management cho user profile
2.7. /src/utils/
utils/
├── authToken.js       # Utilities xử lý JWT tokens
├── formatters.js      # Formatting functions (dates, currency, etc.)
├── validators.js      # Validation functions
├── storage.js         # Local/session storage helpers
├── errorHandler.js    # Error handling utilities
├── analytics.js       # Analytics helpers
├── constants.js       # Application constants
└── helpers.js         # Các helper functions khác
2.8. /src/assets/
assets/
├── css/
│   └── index.css      # Global CSS
│
├── images/
│   ├── logo.png
│   ├── banners/
│   ├── icons/
│   └── products/
│
└── fonts/


--- File: docs/.project_structure_filter ---


--- File: docs/.project_structure_ignore ---

# Bộ lọc cấu trúc dự án
# File này nằm trong thư mục docs/ và được sử dụng để loại bỏ các thư mục/file 
# không cần thiết khi hiển thị cấu trúc dự án

# Thư mục node_modules (chứa các dependencies)
node_modules

# Thư mục build/dist (chứa code đã được biên dịch)
dist
build
out

# Các file log
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Các file môi trường và biến môi trường
.env
.env.local
.env.development
.env.test
.env.production

# Các thư mục và file cache
.cache
.npm
.eslintcache
.stylelintcache

# Các file cấu hình IDE
.idea
.vscode
*.sublime-project
*.sublime-workspace
package-lock.json
# Các file hệ thống
.DS_Store
Thumbs.db

# Các thư mục test và coverage
coverage
.nyc_output

# Các file tạm thời
tmp
temp

# cac file anh 
*.png
jsconfig.json 

--- File: docs/project_structure.txt ---


--- File: jsconfig.json ---
{
    "compilerOptions": {
      "baseUrl": "src",
      "paths": {
        "components/*": ["components/*"],
        "hooks/*": ["hooks/*"],
        "pages/*": ["pages/*"],
        "services/*": ["services/*"],
        "store/*": ["store/*"],
        "utils/*": ["utils/*"],
        "routes/*": ["routes/*"],
        "assets/*": ["assets/*"]
      },
      "checkJs": true,
      "jsx": "react-jsx"
    },
    "include": ["src"]
  }

--- File: package.json ---
{
    "name": "runout-biliard-client",
    "version": "0.1.0",
    "private": true,
    "dependencies": {
        "@heroicons/react": "^2.2.0",
        "@reduxjs/toolkit": "^2.0.1",
        "@tailwindcss/forms": "^0.5.10",
        "axios": "^1.6.2",
        "classnames": "^2.5.1",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-hook-form": "^7.49.0",
        "react-icons": "^5.5.0",
        "react-query": "^3.39.3",
        "react-redux": "^9.0.2",
        "react-router-dom": "^6.20.1",
        "react-transition-group": "^4.4.5",
        "tailwindcss": "^3.4.17",
        "yup": "^1.3.2"
    },
    "devDependencies": {
        "@testing-library/jest-dom": "^6.1.5",
        "@testing-library/react": "^14.1.2",
        "@testing-library/user-event": "^14.5.1",
        "@types/jest": "^29.5.14",
        "autoprefixer": "^10.4.16",
        "eslint": "^8.55.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-plugin-prettier": "^5.0.1",
        "eslint-plugin-react": "^7.33.2",
        "eslint-plugin-react-hooks": "^4.6.0",
        "postcss": "^8.4.32",
        "prettier": "^3.1.0",
        "react-scripts": "5.0.1"
    },
    "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject",
        "lint": "eslint src",
        "lint:fix": "eslint src --fix",
        "format": "prettier --write \"src/**/*.{js,jsx}\""
    },
    "eslintConfig": {
        "extends": [
            "react-app",
            "react-app/jest"
        ]
    },
    "browserslist": {
        "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
        ],
        "development": [
            "last 1 chrome version",
            "last 1 firefox version",
            "last 1 safari version"
        ]
    },
    "proxy": "http://localhost:5000"
}


--- File: public/index.html ---
<!DOCTYPE html>
<html lang="vi">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="RunOut-Biliard - Cửa hàng Bi-a chuyên nghiệp"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>RunOut-Biliard</title>
    <meta name="copyright" content="© 2025 RunOut-Biliard. Tất cả các quyền thuộc về Steve." />
  </head>
  <body>
    <noscript>Bạn cần bật JavaScript để chạy ứng dụng này.</noscript>
    <div id="root"></div>
  </body>
</html>

--- File: src/App.js ---
// File: client/src/App.js
import React, { Suspense } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import MainLayout from './components/layout/MainLayout';
import AuthLayout from './components/layout/AuthLayout';
import LoadingSpinner from './components/common/LoadingSpiner/index.js';
import { selectIsAuthenticated } from './store/slices/authSlice';
import { ROUTES } from './routes/paths';
// Lazy-loaded pages
const HomePage = React.lazy(() => import('./pages/Home'));
const LoginPage = React.lazy(() => import('./pages/Auth/Login'));
const RegisterPage = React.lazy(() => import('./pages/Auth/Register'));
const NotFoundPage = React.lazy(() => import('./pages/NotFound'));

// Watermark
const Watermark = ({ children }) => {
  return (
    <div className="relative">
      {children}
      <div className="absolute bottom-4 right-4 opacity-30 text-gray-500 font-bold rotate-330 select-none pointer-events-none">
        &copy; Steve
      </div>
    </div>
  );
};

function App() {
  const isAuthenticated = useSelector(selectIsAuthenticated);

  return (
    <Watermark>
      <Suspense fallback={<LoadingSpinner fullScreen />}>
        <Routes>
          {/* Public routes */}
          <Route element={<MainLayout />}>
            <Route path={ROUTES.HOME} element={<HomePage />} />
          </Route>

          {/* Auth routes */}
          <Route element={<AuthLayout />}>
            <Route
              path={ROUTES.LOGIN}
              element={isAuthenticated ? <Navigate to="/" replace /> : <LoginPage />}
            />
            <Route
              path={ROUTES.REGISTER}
              element={isAuthenticated ? <Navigate to="/" replace /> : <RegisterPage />}
            />
          </Route>

          {/* 404 route */}
          <Route path={ROUTES.NOT_FOUND} element={<NotFoundPage />} />
          <Route path="*" element={<Navigate to={ROUTES.NOT_FOUND} replace />} />
        </Routes>
      </Suspense>
    </Watermark>
  );
}

export default App;


--- File: src/api/controllers/productController.js ---
// server/src/api/controllers/productController.js

const { Product } = require('../../data/models/product.model');
const productRepository = require('../../data/repositories/productRepository');
const ApiError = require('../../middleware/apiError');
const catchAsync = require('../../utils/catchAsync');
const responseHandler = require('../../utils/responseHandler');

/**
 * Lấy danh sách sản phẩm với pagination và filter
 */
exports.getProducts = catchAsync(async (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 12;
  const sort = req.query.sort || '-createdAt';
  
  // Xây dựng filter từ query params
  const filter = {};
  
  // Lọc theo danh mục
  if (req.query.category) {
    filter.category = req.query.category;
  }
  
  // Lọc theo giá
  if (req.query.minPrice || req.query.maxPrice) {
    filter.price = {};
    if (req.query.minPrice) filter.price.$gte = parseFloat(req.query.minPrice);
    if (req.query.maxPrice) filter.price.$lte = parseFloat(req.query.maxPrice);
  }
  
  // Lọc theo thương hiệu
  if (req.query.brand) {
    filter.brand = req.query.brand;
  }
  
  // Lọc theo tình trạng tồn kho
  if (req.query.inStock === 'true') {
    filter.stock = { $gt: 0 };
  }
  
  // Mặc định chỉ hiển thị sản phẩm active
  filter.isActive = true;
  
  const result = await productRepository.findAll(filter, {
    page,
    limit,
    sort,
    populate: 'category'
  });
  
  responseHandler.success(res, {
    data: result.data,
    totalPages: result.totalPages,
    currentPage: result.currentPage,
    totalItems: result.totalItems
  });
});

/**
 * Lấy chi tiết sản phẩm theo ID
 */
exports.getProductById = catchAsync(async (req, res, next) => {
  const { id } = req.params;
  
  const product = await productRepository.findById(id, {
    populate: 'category'
  });
  
  if (!product) {
    return next(new ApiError(404, 'Không tìm thấy sản phẩm'));
  }
  
  responseHandler.success(res, product);
});

/**
 * Lấy sản phẩm theo danh mục
 */
exports.getProductsByCategory = catchAsync(async (req, res) => {
  const { categoryId } = req.params;
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 12;
  const sort = req.query.sort || '-createdAt';
  
  const filter = {
    category: categoryId,
    isActive: true
  };
  
  // Áp dụng các filter khác nếu có
  if (req.query.minPrice || req.query.maxPrice) {
    filter.price = {};
    if (req.query.minPrice) filter.price.$gte = parseFloat(req.query.minPrice);
    if (req.query.maxPrice) filter.price.$lte = parseFloat(req.query.maxPrice);
  }
  
  const result = await productRepository.findAll(filter, {
    page,
    limit,
    sort
  });
  
  responseHandler.success(res, {
    data: result.data,
    totalPages: result.totalPages,
    currentPage: result.currentPage,
    totalItems: result.totalItems
  });
});

/**
 * Tìm kiếm sản phẩm
 */
exports.searchProducts = catchAsync(async (req, res) => {
  const { q } = req.query;
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 12;
  
  if (!q) {
    return responseHandler.success(res, {
      data: [],
      totalPages: 0,
      currentPage: page,
      totalItems: 0
    });
  }
  
  const result = await productRepository.search(q, {
    page,
    limit
  });
  
  responseHandler.success(res, {
    data: result.data,
    totalPages: result.totalPages,
    currentPage: result.currentPage,
    totalItems: result.totalItems
  });
});

--- File: src/assets/css/index.css ---
@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.content-wrapper {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

--- File: src/components/common/Button/Button.test.js ---
// src/components/common/Button/Button.test.js
// File test cho component Button trong thư mục src/components/common/Button

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import Button from '.';

describe('Button component', () => {
  test('renders button with correct text', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });

  describe('variant tests', () => {
    test('applies the correct primary variant class', () => {
      const { container } = render(<Button variant="primary">Primary Button</Button>);
      expect(container.firstChild).toHaveClass('bg-blue-600');
    });

    test('applies the correct secondary variant class', () => {
      const { container } = render(<Button variant="secondary">Secondary Button</Button>);
      expect(container.firstChild).toHaveClass('bg-gray-600');
    });

    test('applies the correct outline variant class', () => {
      const { container } = render(<Button variant="outline">Outline Button</Button>);
      expect(container.firstChild).toHaveClass('bg-transparent');
      expect(container.firstChild).toHaveClass('border-blue-600');
    });

    test('applies the correct danger variant class', () => {
      const { container } = render(<Button variant="danger">Danger Button</Button>);
      expect(container.firstChild).toHaveClass('bg-red-600');
    });
  });

  describe('size tests', () => {
    test('applies the correct small size class', () => {
      const { container } = render(<Button size="sm">Small Button</Button>);
      expect(container.firstChild).toHaveClass('py-1 px-3 text-sm');
    });

    test('applies the correct medium size class', () => {
      const { container } = render(<Button size="md">Medium Button</Button>);
      expect(container.firstChild).toHaveClass('py-2 px-4 text-base');
    });

    test('applies the correct large size class', () => {
      const { container } = render(<Button size="lg">Large Button</Button>);
      expect(container.firstChild).toHaveClass('py-3 px-5 text-lg');
    });
  });

  test('calls onClick when clicked', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    fireEvent.click(screen.getByText('Click me'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  test('is disabled when isLoading is true', () => {
    render(<Button isLoading>Loading</Button>);
    expect(screen.getByRole('button')).toBeDisabled();
  });

  test('shows loading spinner when isLoading is true', () => {
    render(<Button isLoading>Loading</Button>);
    // Tìm SVG loading spinner thay vì sử dụng data-testid
    const loadingSpinner = document.querySelector('svg.animate-spin');
    expect(loadingSpinner).toBeInTheDocument();
  });

  test('renders with left icon when provided', () => {
    const leftIcon = <span>🔍</span>;
    render(<Button leftIcon={leftIcon}>Search</Button>);
    expect(screen.getByText('🔍')).toBeInTheDocument();
  });

  test('renders with right icon when provided', () => {
    const rightIcon = <span>→</span>;
    render(<Button rightIcon={rightIcon}>Next</Button>);
    expect(screen.getByText('→')).toBeInTheDocument();
  });

  test('applies custom className when provided', () => {
    const { container } = render(<Button className="custom-class">Custom Button</Button>);
    expect(container.firstChild).toHaveClass('custom-class');
  });

  test('is disabled when disabled prop is true', () => {
    render(<Button disabled>Disabled Button</Button>);
    expect(screen.getByRole('button')).toBeDisabled();
  });
});


--- File: src/components/common/Button/index.js ---
import React from 'react';

/**
 * @param {Object} props
 * @param {'primary'|'secondary'|'outline'|'danger'} [props.variant='primary']
 * @param {'sm'|'md'|'lg'} [props.size='md']
 * @param {boolean} [props.isLoading=false]
 * @param {React.ReactNode} [props.leftIcon]
 * @param {React.ReactNode} [props.rightIcon]
 */
const Button = ({
  children,
  variant = 'primary',
  size = 'md',
  isLoading = false,
  leftIcon,
  rightIcon,
  className = '',
  disabled = false,
  ...rest
}) => {
  const baseClasses = 'font-medium rounded focus:outline-none transition-colors';

  const variantClasses = {
    primary: 'bg-blue-600 hover:bg-blue-700 text-white',
    secondary: 'bg-gray-600 hover:bg-gray-700 text-white',
    outline: 'bg-transparent border border-blue-600 text-blue-600 hover:bg-blue-50',
    danger: 'bg-red-600 hover:bg-red-700 text-white',
  };

  const sizeClasses = {
    sm: 'py-1 px-3 text-sm',
    md: 'py-2 px-4 text-base',
    lg: 'py-3 px-5 text-lg',
  };

  const buttonClasses = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`;

  return (
    <button className={buttonClasses} disabled={isLoading || disabled} {...rest}>
      {isLoading ? (
        <span className="flex items-center justify-center">
          <svg
            className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            ></circle>
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
          Đang xử lý...
        </span>
      ) : (
        <span className="flex items-center justify-center">
          {leftIcon && <span className="mr-2">{leftIcon}</span>}
          {children}
          {rightIcon && <span className="ml-2">{rightIcon}</span>}
        </span>
      )}
    </button>
  );
};

export default Button;


--- File: src/components/common/Card/index.js ---
import React from 'react';

/**
 * @param {Object} props
 * @param {React.ReactNode} props.children
 * @param {React.ReactNode} [props.header]
 * @param {React.ReactNode} [props.footer]
 * @param {string} [props.className]
 */
const Card = ({ children, header, footer, className = '', ...rest }) => {
  return (
    <div className={`bg-white rounded-lg shadow-md overflow-hidden ${className}`} {...rest}>
      {header && <div className="px-6 py-4 border-b border-gray-200">{header}</div>}
      <div className="p-6">{children}</div>
      {footer && <div className="px-6 py-4 border-t border-gray-200">{footer}</div>}
    </div>
  );
};

export default Card;


--- File: src/components/common/ErrorAlert/index.js ---
// client/src/components/common/ErrorAlert/index.js
// Vị trí: Component hiển thị thông báo lỗi trong hệ thống, được sử dụng xuyên suốt ứng dụng
// Chức năng: Hiển thị thông báo lỗi với nút đóng (dismiss)

import React from 'react';
import { XMarkIcon } from '@heroicons/react/24/outline';

/**
 * Component hiển thị thông báo lỗi
 * @param {Object} props - Props của component
 * @param {string} props.message - Nội dung thông báo lỗi
 * @param {Function} props.onDismiss - Hàm xử lý khi người dùng đóng thông báo
 * @param {string} props.className - Class CSS bổ sung (nếu có)
 */
const ErrorAlert = ({ message, onDismiss, className = '' }) => {
  if (!message) return null;

  return (
    <div className={`bg-red-50 border-l-4 border-red-500 p-4 rounded-md ${className}`}>
      <div className="flex items-start">
        <div className="flex-grow">
          <p className="text-sm text-red-700">{message}</p>
        </div>
        {onDismiss && (
          <button
            type="button"
            className="ml-auto -mx-1.5 -my-1.5 bg-red-50 text-red-500 rounded-lg focus:ring-2 focus:ring-red-400 p-1.5 hover:bg-red-100 inline-flex items-center justify-center"
            onClick={onDismiss}
            aria-label="Đóng"
          >
            <span className="sr-only">Đóng</span>
            <XMarkIcon className="h-4 w-4" />
          </button>
        )}
      </div>
    </div>
  );
};

export default ErrorAlert;


--- File: src/components/common/Input/index.js ---
// Vị trí file: client/src/components/common/Input/index.js
// Component Input cải tiến cho phép tương tác với rightIcon
import React, { forwardRef } from 'react';

/**
 * Component Input cải tiến với khả năng tương tác với rightIcon
 * @param {Object} props
 * @param {string} [props.id] - ID của input
 * @param {string} [props.label] - Nhãn hiển thị trên input
 * @param {string} [props.error] - Thông báo lỗi
 * @param {string} [props.helperText] - Văn bản trợ giúp
 * @param {React.ReactNode} [props.leftIcon] - Biểu tượng bên trái
 * @param {React.ReactNode} [props.rightIcon] - Biểu tượng bên phải
 * @param {boolean} [props.rightIconInteractive=true] - Cho phép tương tác với rightIcon
 * @param {boolean} [props.leftIconInteractive=false] - Cho phép tương tác với leftIcon
 * @param {string} [props.className] - Class CSS bổ sung
 */
const Input = forwardRef(
  (
    {
      id,
      label,
      error,
      helperText,
      leftIcon,
      rightIcon,
      rightIconInteractive = true,
      leftIconInteractive = false,
      className = '',
      ...rest
    },
    ref
  ) => {
    const inputId = id || `input-${Math.random().toString(36).substring(2, 9)}`;

    return (
      <div className="mb-4">
        {label && (
          <label htmlFor={inputId} className="block text-sm font-medium text-gray-700 mb-1">
            {label}
          </label>
        )}

        <div className="relative">
          {leftIcon && (
            <div
              className={`absolute inset-y-0 left-0 pl-3 flex items-center ${!leftIconInteractive ? 'pointer-events-none' : ''}`}
            >
              {leftIcon}
            </div>
          )}

          <input
            id={inputId}
            ref={ref}
            className={`
            block w-full rounded-md shadow-sm 
            ${leftIcon ? 'pl-10' : 'pl-3'} 
            ${rightIcon ? 'pr-10' : 'pr-3'} 
            py-2 border 
            ${error ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'} 
            ${className}
          `}
            {...rest}
          />

          {rightIcon && (
            <div
              className={`absolute inset-y-0 right-0 pr-3 flex items-center ${!rightIconInteractive ? 'pointer-events-none' : ''}`}
            >
              {rightIcon}
            </div>
          )}
        </div>

        {error && <p className="mt-1 text-sm text-red-600">{error}</p>}

        {helperText && !error && <p className="mt-1 text-sm text-gray-500">{helperText}</p>}
      </div>
    );
  }
);

Input.displayName = 'Input';

export default Input;


--- File: src/components/common/LoadingSpiner/index.js ---
import React from 'react';

/**
 * @param {Object} props
 * @param {boolean} [props.fullScreen=false]
 * @param {string} [props.size='md']
 * @param {string} [props.className]
 */
const LoadingSpinner = ({ fullScreen = false, size = 'md', className = '' }) => {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-8 w-8',
    lg: 'h-12 w-12',
    xl: 'h-16 w-16',
  };

  const spinnerSize = sizeClasses[size] || sizeClasses.md;

  const spinner = (
    <svg
      className={`animate-spin text-blue-600 ${spinnerSize} ${className}`}
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      ></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  );

  if (fullScreen) {
    return (
      <div className="fixed inset-0 flex items-center justify-center bg-white bg-opacity-75 z-50">
        {spinner}
      </div>
    );
  }

  return spinner;
};

export default LoadingSpinner;


--- File: src/components/common/Modal/index.js ---
import React, { useEffect, useRef } from 'react';
import { createPortal } from 'react-dom';
import { CSSTransition } from 'react-transition-group';
import { useOutsideClick } from '../../../hooks/useOutsideClick';

const Modal = ({
  isOpen,
  onClose,
  title,
  children,
  size = 'md',
  closeOnOverlayClick = true,
  showCloseButton = true,
  footer = null,
}) => {
  const modalRef = useRef(null);
  const nodeRef = useRef(null);

  // Handle outside click
  useOutsideClick(modalRef, () => {
    if (closeOnOverlayClick) {
      onClose();
    }
  });

  // Handle escape key press
  useEffect(() => {
    const handleEsc = (e) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEsc);
      document.body.style.overflow = 'hidden'; // Prevent scrolling when modal is open
    }

    return () => {
      document.removeEventListener('keydown', handleEsc);
      document.body.style.overflow = ''; // Re-enable scrolling when modal is closed
    };
  }, [isOpen, onClose]);

  // Determine modal width based on size
  const getModalWidth = () => {
    switch (size) {
      case 'sm':
        return 'max-w-md';
      case 'lg':
        return 'max-w-3xl';
      case 'xl':
        return 'max-w-5xl';
      case 'full':
        return 'max-w-full mx-4';
      default:
        return 'max-w-xl';
    }
  };

  return createPortal(
    <CSSTransition
      in={isOpen}
      timeout={300}
      classNames={{
        enter: 'opacity-0',
        enterActive: 'opacity-100 transition-opacity duration-300',
        exit: 'opacity-100',
        exitActive: 'opacity-0 transition-opacity duration-300',
      }}
      unmountOnExit
      nodeRef={nodeRef}
    >
      <div
        ref={nodeRef}
        className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50"
      >
        <div
          ref={modalRef}
          className={`bg-white rounded-lg shadow-xl w-full ${getModalWidth()} max-h-[90vh] flex flex-col`}
        >
          {/* Modal header */}
          <div className="px-6 py-4 border-b flex justify-between items-center">
            <h3 className="text-lg font-medium text-gray-900">{title}</h3>
            {showCloseButton && (
              <button type="button" className="text-gray-400 hover:text-gray-500" onClick={onClose}>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            )}
          </div>

          {/* Modal body */}
          <div className="px-6 py-4 overflow-y-auto flex-1">{children}</div>

          {/* Modal footer */}
          {footer && <div className="px-6 py-4 border-t">{footer}</div>}
        </div>
      </div>
    </CSSTransition>,
    document.body
  );
};

export default Modal;


--- File: src/components/common/Pagination/index.js ---
import React from 'react';
import classNames from 'classnames';

const Pagination = ({ currentPage, totalPages, onPageChange, siblingCount = 1 }) => {
  // Generate page numbers
  const getPageNumbers = () => {
    const totalPageNumbers = siblingCount + 5; // Current + first + last + 2 ellipsis + siblings

    // If total pages is less than total page numbers, show all pages
    if (totalPages <= totalPageNumbers) {
      return Array.from({ length: totalPages }, (_, i) => i + 1);
    }

    // Calculate left and right bounds
    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);
    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPages);

    // Show ellipsis
    const shouldShowLeftDots = leftSiblingIndex > 2;
    const shouldShowRightDots = rightSiblingIndex < totalPages - 1;

    // Always show first and last pages
    const firstPageIndex = 1;
    const lastPageIndex = totalPages;

    // Handle edge cases
    if (!shouldShowLeftDots && shouldShowRightDots) {
      // Show more pages on the left
      const leftItemCount = 3 + 2 * siblingCount;
      const leftRange = Array.from({ length: leftItemCount }, (_, i) => i + 1);

      return [...leftRange, '...', lastPageIndex];
    }

    if (shouldShowLeftDots && !shouldShowRightDots) {
      // Show more pages on the right
      const rightItemCount = 3 + 2 * siblingCount;
      const rightRange = Array.from(
        { length: rightItemCount },
        (_, i) => totalPages - rightItemCount + i + 1
      );

      return [firstPageIndex, '...', ...rightRange];
    }

    if (shouldShowLeftDots && shouldShowRightDots) {
      // Show pages around current page with dots on both sides
      const middleRange = Array.from(
        { length: rightSiblingIndex - leftSiblingIndex + 1 },
        (_, i) => leftSiblingIndex + i
      );

      return [firstPageIndex, '...', ...middleRange, '...', lastPageIndex];
    }
  };

  const pageNumbers = getPageNumbers();

  return (
    <div className="flex justify-center mt-8">
      <nav className="inline-flex">
        {/* Previous button */}
        <button
          className={classNames('px-3 py-1 rounded-l-md border border-gray-300', {
            'bg-gray-100 text-gray-500 cursor-not-allowed': currentPage === 1,
            'bg-white hover:bg-gray-50 text-gray-700': currentPage !== 1,
          })}
          onClick={() => currentPage > 1 && onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
        >
          Trước
        </button>

        {/* Page numbers */}
        {pageNumbers.map((pageNumber, index) => (
          <button
            key={index}
            className={classNames('px-3 py-1 border-t border-b border-gray-300', {
              'bg-blue-500 text-white': pageNumber === currentPage,
              'bg-white hover:bg-gray-50 text-gray-700':
                pageNumber !== currentPage && pageNumber !== '...',
              'bg-white text-gray-500': pageNumber === '...',
            })}
            onClick={() => pageNumber !== '...' && onPageChange(pageNumber)}
            disabled={pageNumber === '...'}
          >
            {pageNumber}
          </button>
        ))}

        {/* Next button */}
        <button
          className={classNames('px-3 py-1 rounded-r-md border border-gray-300', {
            'bg-gray-100 text-gray-500 cursor-not-allowed': currentPage === totalPages,
            'bg-white hover:bg-gray-50 text-gray-700': currentPage !== totalPages,
          })}
          onClick={() => currentPage < totalPages && onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
        >
          Sau
        </button>
      </nav>
    </div>
  );
};

export default Pagination;


--- File: src/components/common/RefreshButton/index.js ---
// client/src/components/common/RefreshButton/index.js
// Vị trí: Component nút làm mới dữ liệu, được sử dụng trong các trang cần tải lại dữ liệu
// Chức năng: Hiển thị nút làm mới với trạng thái loading khi đang tải dữ liệu

import React from 'react';
import { ArrowPathIcon } from '@heroicons/react/24/outline';

/**
 * Component nút làm mới dữ liệu
 * @param {Object} props - Props của component
 * @param {Function} props.onClick - Hàm xử lý khi người dùng nhấn nút làm mới
 * @param {boolean} props.isLoading - Trạng thái đang tải dữ liệu
 * @param {string} props.className - Class CSS bổ sung (nếu có)
 * @param {string} props.size - Kích thước nút (sm, md, lg)
 */
const RefreshButton = ({ onClick, isLoading = false, className = '', size = 'md' }) => {
  const sizeClasses = {
    sm: 'p-1.5 text-sm',
    md: 'p-2',
    lg: 'p-2.5 text-lg',
  };

  const buttonSize = sizeClasses[size] || sizeClasses.md;

  return (
    <button
      type="button"
      className={`inline-flex items-center justify-center ${buttonSize} bg-white border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 ${className}`}
      onClick={onClick}
      disabled={isLoading}
      aria-label="Làm mới dữ liệu"
    >
      <ArrowPathIcon
        className={`h-5 w-5 ${isLoading ? 'animate-spin text-blue-600' : 'text-gray-500'}`}
      />
      <span className="sr-only">Làm mới</span>
    </button>
  );
};

export default RefreshButton;


--- File: src/components/common/Toast/index.js ---
import React, { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import classNames from 'classnames';

// Toast component
const Toast = ({ message, type = 'info', duration = 3000, onClose }) => {
  const [isVisible, setIsVisible] = useState(true);

  useEffect(() => {
    if (!duration) return;

    const timer = setTimeout(() => {
      setIsVisible(false);
      setTimeout(onClose, 300); // Wait for animation to complete
    }, duration);

    return () => clearTimeout(timer);
  }, [duration, onClose]);

  // Icon based on type
  const getIcon = () => {
    switch (type) {
      case 'success':
        return (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-6 w-6 text-green-500"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
          </svg>
        );
      case 'error':
        return (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-6 w-6 text-red-500"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        );
      case 'warning':
        return (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-6 w-6 text-yellow-500"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
            />
          </svg>
        );
      default:
        return (
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-6 w-6 text-blue-500"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
            />
          </svg>
        );
    }
  };

  return (
    <div
      className={classNames(
        'fixed top-4 right-4 z-50 flex items-center bg-white rounded-lg shadow-lg border-l-4 p-4 transition-all duration-300',
        {
          'translate-x-0 opacity-100': isVisible,
          'translate-x-full opacity-0': !isVisible,
          'border-green-500': type === 'success',
          'border-red-500': type === 'error',
          'border-yellow-500': type === 'warning',
          'border-blue-500': type === 'info',
        }
      )}
    >
      <div className="mr-3">{getIcon()}</div>
      <div className="flex-1">
        <p className="text-sm text-gray-700">{message}</p>
      </div>
      <button
        className="ml-4 text-gray-400 hover:text-gray-500"
        onClick={() => {
          setIsVisible(false);
          setTimeout(onClose, 300);
        }}
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="h-5 w-5"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M6 18L18 6M6 6l12 12"
          />
        </svg>
      </button>
    </div>
  );
};

// ToastContainer component
const ToastContainer = () => {
  const [toasts, setToasts] = useState([]);

  // Add toast
  const addToast = (toast) => {
    const id = Date.now();
    setToasts((prevToasts) => [...prevToasts, { ...toast, id }]);
    return id;
  };

  // Remove toast
  const removeToast = (id) => {
    setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));
  };

  // Expose methods globally
  useEffect(() => {
    window.toast = {
      success: (message, duration) => addToast({ message, type: 'success', duration }),
      error: (message, duration) => addToast({ message, type: 'error', duration }),
      warning: (message, duration) => addToast({ message, type: 'warning', duration }),
      info: (message, duration) => addToast({ message, type: 'info', duration }),
    };
  }, []);

  return createPortal(
    <div>
      {toasts.map((toast) => (
        <Toast
          key={toast.id}
          message={toast.message}
          type={toast.type}
          duration={toast.duration}
          onClose={() => removeToast(toast.id)}
        />
      ))}
    </div>,
    document.body
  );
};

export default ToastContainer;


--- File: src/components/common/Watermark/index.js ---
// client/src/components/common/Watermark/index.js

import React from 'react';

const Watermark = ({ children }) => {
  return (
    <div className="relative">
      {children}
      <div className="absolute bottom-4 right-4 opacity-30 text-gray-500 font-bold rotate-330 select-none pointer-events-none">
        © Steve
      </div>
    </div>
  );
};

export default Watermark;


--- File: src/components/common/index.js ---
/**
 * File: client/src/components/common/index.js
 *
 * File này export tất cả các component common để có thể import dễ dàng từ một điểm duy nhất.
 * Thay vì phải import từng component riêng lẻ như:
 * import Button from './components/common/Button/Button';
 * import Card from './components/common/Card/Card';
 *
 * Bạn có thể import như sau:
 * import { Button, Card, Input, Pagination } from './components/common';
 */

// Export Button component
export { default as Button } from './Button';
// Export Card component
export { default as Card } from './Card';
// Export Input component
export { default as Input } from './Input';
// Export Pagination component
export { default as Pagination } from './Pagination';
// Export LoadingSpinner component
export { default as LoadingSpinner } from './LoadingSpiner';
// Export Modal component
export { default as Modal } from './Modal';
// Export Toast component
export { default as Toast } from './Toast';
// Export Watermark component
export { default as Watermark } from './Watermark';
// Export RefreshButton component
export { default as RefreshButton } from './RefreshButton';
// Export ErrorAlert component
export { default as ErrorAlert } from './ErrorAlert';


--- File: src/components/feature/Admin/Dashboard/DashboardStats.js ---
// src/components/feature/Admin/Dashboard/DashboardStats.js
// Vị trí: Component hiển thị các thống kê tổng quan trên Dashboard Admin

import React from 'react';
import { Link } from 'react-router-dom';
import {
  ShoppingBagIcon,
  CurrencyDollarIcon,
  UserGroupIcon,
  ShoppingCartIcon,
  ArrowUpIcon,
  ArrowDownIcon,
} from '@heroicons/react/24/outline';

/**
 * Component hiển thị một thẻ thống kê đơn lẻ
 */
const StatCard = ({ title, value, icon: Icon, color, bgColor, change, linkTo }) => {
  const isPositive = change >= 0;

  return (
    <Link
      to={linkTo}
      className="bg-white rounded-lg shadow-md p-6 transition-all duration-300 hover:shadow-lg"
    >
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm text-gray-500 font-medium">{title}</p>
          <p className="text-2xl font-bold mt-1">{value}</p>

          {change !== undefined && (
            <div
              className={`flex items-center mt-2 text-sm ${isPositive ? 'text-green-600' : 'text-red-600'}`}
            >
              {isPositive ? (
                <ArrowUpIcon className="h-4 w-4 mr-1" />
              ) : (
                <ArrowDownIcon className="h-4 w-4 mr-1" />
              )}
              <span>{Math.abs(change)}% so với tháng trước</span>
            </div>
          )}
        </div>

        <div className={`p-3 rounded-full ${bgColor}`}>
          <Icon className={`h-6 w-6 ${color}`} />
        </div>
      </div>
    </Link>
  );
};

/**
 * Component hiển thị tất cả các thống kê tổng quan trên Dashboard
 */
const DashboardStats = ({ stats = {} }) => {
  // Định nghĩa các thẻ thống kê
  const statsItems = [
    {
      title: 'Tổng doanh thu',
      value: new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(
        stats?.totalRevenue || 0
      ),
      icon: CurrencyDollarIcon,
      color: 'text-green-700',
      bgColor: 'bg-green-100',
      change: stats?.revenueChange,
      linkTo: '/admin/orders',
    },
    {
      title: 'Đơn hàng',
      value: stats?.totalOrders || 0,
      icon: ShoppingCartIcon,
      color: 'text-blue-700',
      bgColor: 'bg-blue-100',
      change: stats?.ordersChange,
      linkTo: '/admin/orders',
    },
    {
      title: 'Sản phẩm',
      value: stats?.totalProducts || 0,
      icon: ShoppingBagIcon,
      color: 'text-purple-700',
      bgColor: 'bg-purple-100',
      change: stats?.productsChange,
      linkTo: '/admin/products',
    },
    {
      title: 'Khách hàng',
      value: stats?.totalCustomers || 0,
      icon: UserGroupIcon,
      color: 'text-orange-700',
      bgColor: 'bg-orange-100',
      change: stats?.customersChange,
      linkTo: '/admin/users',
    },
  ];

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-medium text-gray-900">Tổng quan</h3>

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
        {statsItems.map((item, index) => (
          <StatCard
            key={index}
            title={item.title}
            value={item.value}
            icon={item.icon}
            color={item.color}
            bgColor={item.bgColor}
            change={item.change}
            linkTo={item.linkTo}
          />
        ))}
      </div>
    </div>
  );
};

export default DashboardStats;


--- File: src/components/feature/Admin/Dashboard/RecentOrders.js ---
// src/components/feature/Admin/Dashboard/RecentOrders.js
// Vị trí: Component hiển thị danh sách đơn hàng gần đây trên Dashboard Admin

import React from 'react';
import { Link } from 'react-router-dom';
import { formatDate, formatPrice } from '../../../../utils/formatters';
import { Button, LoadingSpinner } from '../../../common';

/**
 * Component hiển thị trạng thái đơn hàng dưới dạng badge
 */
const OrderStatusBadge = ({ status }) => {
  const statusConfig = {
    pending: { text: 'Chờ xác nhận', color: 'bg-yellow-100 text-yellow-800' },
    processing: { text: 'Đang xử lý', color: 'bg-blue-100 text-blue-800' },
    shipped: { text: 'Đang giao hàng', color: 'bg-purple-100 text-purple-800' },
    delivered: { text: 'Đã giao hàng', color: 'bg-green-100 text-green-800' },
    cancelled: { text: 'Đã hủy', color: 'bg-red-100 text-red-800' },
  };

  const config = statusConfig[status] || { text: status, color: 'bg-gray-100 text-gray-800' };

  return (
    <span
      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.color}`}
    >
      {config.text}
    </span>
  );
};

/**
 * Component hiển thị danh sách đơn hàng gần đây
 */
const RecentOrders = ({ orders = [], isLoading = false, onViewAllClick }) => {
  // Xử lý sự kiện khi nhấp vào nút "Xem tất cả"
  const handleViewAllClick = (e) => {
    if (onViewAllClick) {
      e.preventDefault();
      onViewAllClick();
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden h-full flex flex-col">
      <div className="p-4 border-b flex justify-between items-center">
        <h2 className="text-lg font-semibold text-gray-900">Đơn hàng gần đây</h2>
      </div>

      {isLoading ? (
        <div className="flex-grow flex items-center justify-center p-8">
          <LoadingSpinner size="medium" />
        </div>
      ) : (
        <div className="overflow-x-auto flex-grow">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Mã đơn hàng
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Khách hàng
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Ngày đặt
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Tổng tiền
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Trạng thái
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {orders.length > 0 ? (
                orders.map((order) => (
                  <tr key={order._id || order.id} className="hover:bg-gray-50">
                    <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-blue-600">
                      <Link to={`/admin/orders/${order._id || order.id}`}>{order.orderNumber}</Link>
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">
                      {order.customerInfo.name}
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                      {formatDate(order.createdAt)}
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-900">
                      {formatPrice(order.totalAmount)}
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap">
                      <OrderStatusBadge status={order.status} />
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="5" className="px-4 py-8 text-center text-sm text-gray-500">
                    Không có đơn hàng nào gần đây
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}

      <div className="p-4 border-t bg-gray-50">
        <Link to="/admin/orders" onClick={handleViewAllClick}>
          <Button variant="secondary" size="sm" fullWidth>
            Xem tất cả đơn hàng
          </Button>
        </Link>
      </div>
    </div>
  );
};

export default RecentOrders;


--- File: src/components/feature/Admin/Dashboard/SalesChart.js ---
// src/components/feature/Admin/Dashboard/SalesChart.js
// Vị trí: Component biểu đồ doanh số bán hàng trên Dashboard Admin, hiển thị doanh thu theo các khoảng thời gian khác nhau

import React, { useState, useEffect } from 'react';
import {
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
} from 'recharts';
import { LoadingSpinner, ErrorAlert } from '../../../common';

/**
 * Component hiển thị biểu đồ doanh số bán hàng
 * @param {Object} props - Props của component
 * @param {Array} props.data - Dữ liệu doanh số
 * @param {string} props.period - Khoảng thời gian hiện tại (today, week, month, year)
 * @param {boolean} props.isLoading - Trạng thái đang tải dữ liệu
 * @param {string} props.error - Thông báo lỗi (nếu có)
 * @param {Function} props.onPeriodChange - Hàm xử lý khi thay đổi khoảng thời gian
 */
const SalesChart = ({
  data = [],
  period = 'month',
  isLoading = false,
  error = null,
  onPeriodChange = () => {},
}) => {
  // Định dạng số tiền cho trục Y
  const formatYAxis = (value) => {
    if (value >= 1000000000) {
      return `${(value / 1000000000).toFixed(1)}B`;
    }
    if (value >= 1000000) {
      return `${(value / 1000000).toFixed(1)}M`;
    }
    if (value >= 1000) {
      return `${(value / 1000).toFixed(0)}K`;
    }
    return value;
  };

  // Định dạng số tiền cho tooltip
  const formatTooltipValue = (value) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND',
      maximumFractionDigits: 0,
    }).format(value);
  };

  // Lấy tổng doanh thu từ dữ liệu
  const totalRevenue = data.reduce((sum, item) => sum + (item.revenue || 0), 0);

  // Định dạng tổng doanh thu
  const formattedTotalRevenue = new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND',
    maximumFractionDigits: 0,
  }).format(totalRevenue);

  // Các tùy chọn khoảng thời gian
  const periodOptions = [
    { value: 'today', label: 'Hôm nay' },
    { value: 'week', label: 'Tuần' },
    { value: 'month', label: 'Tháng' },
    { value: 'year', label: 'Năm' },
  ];

  // Xử lý thay đổi khoảng thời gian
  const handlePeriodChange = (newPeriod) => {
    if (period !== newPeriod) {
      onPeriodChange(newPeriod);
    }
  };

  // Hiển thị trạng thái loading
  if (isLoading) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6 h-80 flex items-center justify-center">
        <LoadingSpinner size="large" />
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden h-full flex flex-col">
      <div className="p-4 border-b flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h2 className="text-lg font-semibold text-gray-900">Doanh thu</h2>
          <p className="text-sm text-gray-500 mt-1">
            Tổng doanh thu: <span className="font-medium">{formattedTotalRevenue}</span>
          </p>
        </div>

        <div className="flex flex-wrap gap-2">
          {periodOptions.map((option) => (
            <button
              key={option.value}
              className={`px-3 py-1 text-sm rounded-md transition-colors ${
                period === option.value
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
              }`}
              onClick={() => handlePeriodChange(option.value)}
            >
              {option.label}
            </button>
          ))}
        </div>
      </div>

      {error ? (
        <div className="p-4 flex-grow">
          <ErrorAlert message={error} />
        </div>
      ) : data.length === 0 ? (
        <div className="p-4 flex-grow flex items-center justify-center">
          <p className="text-gray-500">Không có dữ liệu doanh thu cho khoảng thời gian này</p>
        </div>
      ) : (
        <div className="p-4 h-80 flex-grow">
          <ResponsiveContainer width="100%" height="100%">
            <AreaChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
              <defs>
                <linearGradient id="colorRevenue" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.8} />
                  <stop offset="95%" stopColor="#3B82F6" stopOpacity={0} />
                </linearGradient>
                <linearGradient id="colorProfit" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#10B981" stopOpacity={0.8} />
                  <stop offset="95%" stopColor="#10B981" stopOpacity={0} />
                </linearGradient>
              </defs>

              <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="#f0f0f0" />

              <XAxis
                dataKey="name"
                tickMargin={10}
                axisLine={false}
                tickLine={false}
                tick={{ fill: '#6B7280', fontSize: 12 }}
              />

              <YAxis
                tickFormatter={formatYAxis}
                axisLine={false}
                tickLine={false}
                tickMargin={10}
                tick={{ fill: '#6B7280', fontSize: 12 }}
              />

              <Tooltip
                formatter={(value, name) => {
                  const labels = {
                    revenue: 'Doanh thu',
                    profit: 'Lợi nhuận',
                  };
                  return [formatTooltipValue(value), labels[name] || name];
                }}
                labelFormatter={(label) => `Thời gian: ${label}`}
                contentStyle={{
                  backgroundColor: 'rgba(255, 255, 255, 0.9)',
                  border: '1px solid #e2e8f0',
                  borderRadius: '0.375rem',
                  boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
                }}
              />

              <Legend
                verticalAlign="top"
                height={36}
                formatter={(value) => {
                  const labels = {
                    revenue: 'Doanh thu',
                    profit: 'Lợi nhuận',
                  };
                  return labels[value] || value;
                }}
              />

              <Area
                type="monotone"
                dataKey="revenue"
                stroke="#3B82F6"
                strokeWidth={2}
                fillOpacity={1}
                fill="url(#colorRevenue)"
                activeDot={{ r: 6 }}
              />

              {data.some((item) => 'profit' in item) && (
                <Area
                  type="monotone"
                  dataKey="profit"
                  stroke="#10B981"
                  strokeWidth={2}
                  fillOpacity={1}
                  fill="url(#colorProfit)"
                  activeDot={{ r: 6 }}
                />
              )}
            </AreaChart>
          </ResponsiveContainer>
        </div>
      )}
    </div>
  );
};

export default SalesChart;


--- File: src/components/feature/Admin/Dashboard/TimeFilter.js ---
// src/components/feature/Admin/Dashboard/TimeFilter.js
// Vị trí: Component lọc thời gian cho Dashboard Admin, cho phép người dùng chọn khoảng thời gian
// để hiển thị dữ liệu (hôm nay, tuần, tháng, năm)

import React from 'react';
import PropTypes from 'prop-types';

/**
 * Component cho phép lọc dữ liệu theo khoảng thời gian
 * @param {Object} props - Props của component
 * @param {string} props.currentPeriod - Khoảng thời gian hiện tại đang được chọn
 * @param {Function} props.onChange - Hàm xử lý khi thay đổi khoảng thời gian
 * @param {Object} props.options - Các tùy chọn khoảng thời gian có sẵn
 */
const TimeFilter = ({ currentPeriod, onChange, options }) => {
  // Danh sách các tùy chọn hiển thị
  const displayOptions = [
    { value: options.TODAY, label: 'Hôm nay' },
    { value: options.WEEK, label: 'Tuần này' },
    { value: options.MONTH, label: 'Tháng này' },
    { value: options.YEAR, label: 'Năm nay' },
  ];

  return (
    <div className="flex items-center space-x-2">
      <span className="text-sm text-gray-500">Khoảng thời gian:</span>
      <div className="flex space-x-1">
        {displayOptions.map((option) => (
          <button
            key={option.value}
            onClick={() => onChange(option.value)}
            className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors ${
              currentPeriod === option.value
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
            aria-current={currentPeriod === option.value ? 'page' : undefined}
          >
            {option.label}
          </button>
        ))}
      </div>
    </div>
  );
};

TimeFilter.propTypes = {
  currentPeriod: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired,
  options: PropTypes.object.isRequired,
};

export default TimeFilter;


--- File: src/components/feature/Admin/Dashboard/index.js ---
// src/components/feature/Admin/Dashboard/index.js
// Vị trí: File xuất các component từ thư mục Dashboard để dễ dàng import từ các nơi khác trong dự án
// Các component này được sử dụng trong trang Dashboard của Admin

import DashboardStats from './DashboardStats';
import RecentOrders from './RecentOrders';
import SalesChart from './SalesChart';
import TimeFilter from './TimeFilter';

// Xuất tất cả các component
export { DashboardStats, RecentOrders, SalesChart, TimeFilter };

// Xuất mặc định tất cả các component dưới dạng một object
export default {
  DashboardStats,
  RecentOrders,
  SalesChart,
  TimeFilter,
};


--- File: src/components/feature/Admin/OrderManager/OrderDetail.js ---
// src/components/feature/Admin/OrderManager/OrderDetail.js
import React from 'react';
import { formatDate, formatPrice } from '../../../../utils/formatters';
import { Button } from '../../../common/Button';

const OrderStatusBadge = ({ status }) => {
  const statusConfig = {
    pending: { text: 'Chờ xác nhận', color: 'bg-yellow-100 text-yellow-800' },
    processing: { text: 'Đang xử lý', color: 'bg-blue-100 text-blue-800' },
    packed: { text: 'Đóng gói', color: 'bg-indigo-100 text-indigo-800' },
    shipped: { text: 'Đang giao hàng', color: 'bg-purple-100 text-purple-800' },
    delivered: { text: 'Đã giao hàng', color: 'bg-green-100 text-green-800' },
    cancelled: { text: 'Đã hủy', color: 'bg-red-100 text-red-800' },
    returned: { text: 'Đã trả hàng', color: 'bg-gray-100 text-gray-800' },
  };

  const config = statusConfig[status] || { text: status, color: 'bg-gray-100 text-gray-800' };

  return (
    <span
      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.color}`}
    >
      {config.text}
    </span>
  );
};

const OrderStatusFlow = ({ currentStatus, onChangeStatus }) => {
  const statuses = [
    { key: 'pending', label: 'Chờ xác nhận' },
    { key: 'processing', label: 'Đang xử lý' },
    { key: 'packed', label: 'Đã đóng gói' },
    { key: 'shipped', label: 'Đang giao hàng' },
    { key: 'delivered', label: 'Đã giao hàng' },
  ];

  // Tìm vị trí status hiện tại
  const currentIndex = statuses.findIndex((s) => s.key === currentStatus);

  return (
    <div className="my-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-medium text-gray-900">Trạng thái đơn hàng</h3>

        {/* Nút cập nhật trạng thái */}
        {currentStatus !== 'cancelled' &&
          currentStatus !== 'delivered' &&
          currentStatus !== 'returned' && (
            <div className="flex space-x-2">
              <select
                className="block w-40 pl-3 pr-10 py-1.5 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                defaultValue=""
              >
                <option value="" disabled>
                  Cập nhật trạng thái
                </option>
                {statuses.map((status, index) => {
                  // Chỉ cho phép đổi sang trạng thái tiếp theo
                  if (index === currentIndex + 1) {
                    return (
                      <option key={status.key} value={status.key}>
                        {status.label}
                      </option>
                    );
                  }
                  return null;
                })}
                <option value="cancelled">Hủy đơn hàng</option>
              </select>

              <Button size="sm">Cập nhật</Button>
            </div>
          )}
      </div>

      <div className="relative">
        {/* Progress line */}
        <div className="absolute top-4 left-4 right-4 h-0.5 bg-gray-200">
          <div
            className={`h-0.5 bg-blue-500 ${
              currentStatus === 'cancelled' || currentStatus === 'returned'
                ? 'w-0' // Không có progress nếu đơn hàng bị hủy hoặc trả lại
                : `w-${(currentIndex * 100) / (statuses.length - 1)}%`
            }`}
          ></div>
        </div>

        <div className="flex justify-between relative">
          {statuses.map((status, index) => {
            const isCompleted =
              index <= currentIndex &&
              currentStatus !== 'cancelled' &&
              currentStatus !== 'returned';
            const isCurrent = status.key === currentStatus;

            return (
              <div key={status.key} className="flex flex-col items-center z-10">
                <div
                  className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    isCompleted
                      ? 'bg-blue-500 text-white'
                      : currentStatus === 'cancelled' && index === 0
                        ? 'bg-red-500 text-white'
                        : currentStatus === 'returned' && index === statuses.length - 1
                          ? 'bg-gray-500 text-white'
                          : 'bg-gray-200'
                  } ${isCurrent ? 'ring-2 ring-blue-300' : ''}`}
                >
                  {isCompleted ? '✓' : index + 1}
                </div>
                <p className={`text-xs mt-2 ${isCompleted ? 'font-medium' : 'text-gray-500'}`}>
                  {status.label}
                </p>
              </div>
            );
          })}
        </div>
      </div>

      {/* Trạng thái đặc biệt */}
      {(currentStatus === 'cancelled' || currentStatus === 'returned') && (
        <div
          className={`mt-6 p-4 rounded-md ${
            currentStatus === 'cancelled' ? 'bg-red-50 text-red-800' : 'bg-gray-50 text-gray-800'
          }`}
        >
          <div className="flex">
            <div className="flex-shrink-0">{currentStatus === 'cancelled' ? '⚠️' : '↩️'}</div>
            <div className="ml-3">
              <h3 className="text-sm font-medium">
                {currentStatus === 'cancelled' ? 'Đơn hàng đã bị hủy' : 'Đơn hàng đã được trả lại'}
              </h3>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const OrderDetail = ({ order, onChangeStatus }) => {
  return (
    <div className="bg-white shadow-sm rounded-lg divide-y divide-gray-200">
      {/* Header */}
      <div className="px-6 py-4">
        <div className="flex justify-between items-start">
          <div>
            <h2 className="text-lg font-medium text-gray-900">Đơn hàng #{order.orderNumber}</h2>
            <p className="text-sm text-gray-500 mt-1">Ngày đặt: {formatDate(order.createdAt)}</p>
          </div>
          <OrderStatusBadge status={order.status} />
        </div>
      </div>

      {/* Order Status Flow */}
      <div className="px-6 py-4">
        <OrderStatusFlow currentStatus={order.status} onChangeStatus={onChangeStatus} />
      </div>

      {/* Customer & Shipping Info */}
      <div className="px-6 py-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-3">Thông tin khách hàng</h3>
            <p className="text-sm text-gray-700">{order.customerInfo.name}</p>
            <p className="text-sm text-gray-700">{order.customerInfo.email}</p>
            <p className="text-sm text-gray-700">{order.customerInfo.phone}</p>
          </div>

          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-3">Thông tin giao hàng</h3>
            <p className="text-sm text-gray-700">{order.shippingAddress.name}</p>
            <p className="text-sm text-gray-700">{order.shippingAddress.phone}</p>
            <p className="text-sm text-gray-700">{order.shippingAddress.street}</p>
            <p className="text-sm text-gray-700">
              {order.shippingAddress.city}, {order.shippingAddress.zipCode}
            </p>
            {order.shippingAddress.notes && (
              <p className="text-sm text-gray-700 mt-2">
                <span className="font-medium">Ghi chú:</span> {order.shippingAddress.notes}
              </p>
            )}
          </div>
        </div>
      </div>

      {/* Payment Info */}
      <div className="px-6 py-4">
        <h3 className="text-lg font-medium text-gray-900 mb-3">Thông tin thanh toán</h3>
        <div className="flex items-center">
          <span
            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
              order.paymentStatus === 'paid'
                ? 'bg-green-100 text-green-800'
                : 'bg-yellow-100 text-yellow-800'
            }`}
          >
            {order.paymentStatus === 'paid' ? 'Đã thanh toán' : 'Chưa thanh toán'}
          </span>

          <span className="ml-4 text-sm text-gray-700">
            Phương thức:{' '}
            {order.paymentMethod === 'cod'
              ? 'Thanh toán khi nhận hàng (COD)'
              : 'Thanh toán qua VNPay'}
          </span>
        </div>

        {order.paymentDetails && order.paymentDetails.transactionId && (
          <p className="text-sm text-gray-700 mt-2">
            Mã giao dịch: {order.paymentDetails.transactionId}
          </p>
        )}
      </div>

      {/* Order Items */}
      <div className="px-6 py-4">
        <h3 className="text-lg font-medium text-gray-900 mb-3">Chi tiết đơn hàng</h3>

        <div className="mt-4 border rounded-lg overflow-hidden">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Sản phẩm
                </th>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Đơn giá
                </th>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Số lượng
                </th>
                <th
                  scope="col"
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Thành tiền
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {order.items.map((item) => (
                <tr key={item._id || item.product}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      {item.image && (
                        <div className="flex-shrink-0 h-10 w-10 mr-3">
                          <img
                            className="h-10 w-10 rounded-md object-cover"
                            src={item.image}
                            alt={item.name}
                          />
                        </div>
                      )}
                      <div>
                        <div className="text-sm font-medium text-gray-900">{item.name}</div>
                        {item.sku && <div className="text-sm text-gray-500">SKU: {item.sku}</div>}
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {formatPrice(item.price)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {item.quantity}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {formatPrice(item.price * item.quantity)}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Order Summary */}
      <div className="px-6 py-4">
        <div className="flex flex-col space-y-2 sm:w-64 sm:ml-auto">
          <div className="flex justify-between text-sm">
            <span className="text-gray-600">Tạm tính:</span>
            <span className="font-medium">{formatPrice(order.subtotal)}</span>
          </div>

          {order.discount && order.discount.amount > 0 && (
            <div className="flex justify-between text-sm text-green-600">
              <span>Giảm giá:</span>
              <span>-{formatPrice(order.discount.amount)}</span>
            </div>
          )}

          <div className="flex justify-between text-sm">
            <span className="text-gray-600">Phí vận chuyển:</span>
            <span>{formatPrice(order.shippingCost)}</span>
          </div>

          {order.tax > 0 && (
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">Thuế:</span>
              <span>{formatPrice(order.tax)}</span>
            </div>
          )}

          <div className="flex justify-between text-base font-medium pt-2 border-t mt-2">
            <span>Tổng cộng:</span>
            <span>{formatPrice(order.totalAmount)}</span>
          </div>
        </div>
      </div>

      {/* Order History */}
      {order.statusHistory && order.statusHistory.length > 0 && (
        <div className="px-6 py-4">
          <h3 className="text-lg font-medium text-gray-900 mb-3">Lịch sử đơn hàng</h3>

          <div className="flow-root">
            <ul className="-mb-8">
              {order.statusHistory.map((history, index) => (
                <li key={index}>
                  <div className="relative pb-8">
                    {index !== order.statusHistory.length - 1 ? (
                      <span
                        className="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200"
                        aria-hidden="true"
                      ></span>
                    ) : null}
                    <div className="relative flex space-x-3">
                      <div>
                        <span className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center ring-8 ring-white">
                          <svg
                            className="h-4 w-4 text-white"
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                            />
                          </svg>
                        </span>
                      </div>
                      <div className="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                        <div>
                          <p className="text-sm text-gray-900">
                            <OrderStatusBadge status={history.status} />
                            {history.note && <span className="ml-2">{history.note}</span>}
                          </p>
                        </div>
                        <div className="text-sm text-gray-500 whitespace-nowrap">
                          {formatDate(history.date)}
                        </div>
                      </div>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        </div>
      )}

      {/* Admin Notes */}
      <div className="px-6 py-4">
        <h3 className="text-lg font-medium text-gray-900 mb-3">Ghi chú quản trị</h3>

        <div className="mt-1">
          <textarea
            rows={3}
            className="shadow-sm block w-full sm:text-sm border-gray-300 rounded-md"
            placeholder="Thêm ghi chú về đơn hàng này..."
            defaultValue={order.adminNotes || ''}
          />
        </div>

        <div className="mt-2 flex justify-end">
          <Button size="sm">Lưu ghi chú</Button>
        </div>
      </div>
    </div>
  );
};

export default OrderDetail;


--- File: src/components/feature/Admin/OrderManager/OrderTable.js ---
// src/components/feature/Admin/OrderManager/OrderTable.js
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { formatDate, formatPrice } from '../../../../utils/formatters';

const OrderStatusBadge = ({ status }) => {
  const statusConfig = {
    pending: { text: 'Chờ xác nhận', color: 'bg-yellow-100 text-yellow-800' },
    processing: { text: 'Đang xử lý', color: 'bg-blue-100 text-blue-800' },
    packed: { text: 'Đóng gói', color: 'bg-indigo-100 text-indigo-800' },
    shipped: { text: 'Đang giao hàng', color: 'bg-purple-100 text-purple-800' },
    delivered: { text: 'Đã giao hàng', color: 'bg-green-100 text-green-800' },
    cancelled: { text: 'Đã hủy', color: 'bg-red-100 text-red-800' },
    returned: { text: 'Đã trả hàng', color: 'bg-gray-100 text-gray-800' },
  };

  const config = statusConfig[status] || { text: status, color: 'bg-gray-100 text-gray-800' };

  return (
    <span
      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.color}`}
    >
      {config.text}
    </span>
  );
};

const PaymentStatusBadge = ({ status }) => {
  const statusConfig = {
    pending: { text: 'Chờ thanh toán', color: 'bg-yellow-100 text-yellow-800' },
    authorized: { text: 'Đã ủy quyền', color: 'bg-blue-100 text-blue-800' },
    paid: { text: 'Đã thanh toán', color: 'bg-green-100 text-green-800' },
    failed: { text: 'Thất bại', color: 'bg-red-100 text-red-800' },
    refunded: { text: 'Đã hoàn tiền', color: 'bg-gray-100 text-gray-800' },
    partially_refunded: { text: 'Hoàn tiền một phần', color: 'bg-orange-100 text-orange-800' },
  };

  const config = statusConfig[status] || { text: status, color: 'bg-gray-100 text-gray-800' };

  return (
    <span
      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.color}`}
    >
      {config.text}
    </span>
  );
};

const OrderTable = ({ orders, onChangeStatus }) => {
  const [currentPage, setCurrentPage] = useState(1);
  const ordersPerPage = 10;

  // Phân trang
  const indexOfLastOrder = currentPage * ordersPerPage;
  const indexOfFirstOrder = indexOfLastOrder - ordersPerPage;
  const currentOrders = orders.slice(indexOfFirstOrder, indexOfLastOrder);
  const totalPages = Math.ceil(orders.length / ordersPerPage);

  return (
    <div className="mt-4">
      <div className="flex flex-col">
        <div className="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
          <div className="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
            <div className="shadow overflow-hidden border-b border-gray-200 sm:rounded-lg">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Mã đơn hàng
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Khách hàng
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Ngày đặt
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Tổng tiền
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Trạng thái đơn hàng
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Thanh toán
                    </th>
                    <th scope="col" className="relative px-6 py-3">
                      <span className="sr-only">Chi tiết</span>
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {currentOrders.map((order) => (
                    <tr key={order._id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {order.orderNumber}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <div>{order.customerInfo.name}</div>
                        <div className="text-xs">{order.customerInfo.email}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {formatDate(order.createdAt)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {formatPrice(order.totalAmount)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <OrderStatusBadge status={order.status} />
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <PaymentStatusBadge status={order.paymentStatus} />
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <Link
                          to={`/admin/orders/${order._id}`}
                          className="text-blue-600 hover:text-blue-900"
                        >
                          Chi tiết
                        </Link>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6 mt-4 rounded-lg">
          <div>
            <p className="text-sm text-gray-700">
              Hiển thị <span className="font-medium">{indexOfFirstOrder + 1}</span> đến{' '}
              <span className="font-medium">{Math.min(indexOfLastOrder, orders.length)}</span> của{' '}
              <span className="font-medium">{orders.length}</span> đơn hàng
            </p>
          </div>
          <div>
            <nav
              className="isolate inline-flex -space-x-px rounded-md shadow-sm"
              aria-label="Pagination"
            >
              <button
                onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
                disabled={currentPage === 1}
                className={`relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${
                  currentPage === 1 ? 'opacity-50 cursor-not-allowed' : ''
                }`}
              >
                &laquo;
              </button>

              {[...Array(totalPages).keys()].map((number) => (
                <button
                  key={number + 1}
                  onClick={() => setCurrentPage(number + 1)}
                  className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                    currentPage === number + 1
                      ? 'z-10 bg-blue-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600'
                      : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                  }`}
                >
                  {number + 1}
                </button>
              ))}

              <button
                onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
                disabled={currentPage === totalPages}
                className={`relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${
                  currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : ''
                }`}
              >
                &raquo;
              </button>
            </nav>
          </div>
        </div>
      )}
    </div>
  );
};

export default OrderTable;


--- File: src/components/feature/Admin/ProductManager/ProductForm.js ---
// src/components/feature/Admin/ProductManager/ProductForm.js
import React, { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { Button } from '../../../common/Button';
import { Input } from '../../../common/Input';

const schema = yup.object({
  name: yup.string().required('Tên sản phẩm không được để trống'),
  description: yup.object({
    short: yup.string().required('Mô tả ngắn không được để trống'),
    long: yup.string().required('Mô tả chi tiết không được để trống'),
  }),
  category: yup.string().required('Danh mục không được để trống'),
  brand: yup.string().required('Thương hiệu không được để trống'),
  price: yup.number().required('Giá không được để trống').min(0, 'Giá không được âm'),
  stock: yup.number().required('Số lượng không được để trống').min(0, 'Số lượng không được âm'),
  sku: yup.string(),
  features: yup.array().of(yup.string()),
  specifications: yup.object(),
});

const ProductForm = ({ product, categories, onSubmit, isSubmitting }) => {
  const [features, setFeatures] = useState(product?.features || ['']);
  const [imageUrls, setImageUrls] = useState(product?.images?.map((img) => img.url) || ['']);
  const [specificationFields, setSpecificationFields] = useState(
    product?.specifications
      ? Object.entries(product.specifications).map(([key, value]) => ({ key, value }))
      : [{ key: '', value: '' }]
  );

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm({
    resolver: yupResolver(schema),
    defaultValues: {
      name: product?.name || '',
      description: {
        short: product?.description?.short || '',
        long: product?.description?.long || '',
      },
      category: product?.category || '',
      brand: product?.brand || '',
      price: product?.price || 0,
      salePrice: product?.salePrice || 0,
      stock: product?.stock || 0,
      sku: product?.sku || '',
      isActive: product?.isActive ?? true,
      isPromoted: product?.isPromoted ?? false,
      isFeatured: product?.isFeatured ?? false,
      features: product?.features || [''],
      specifications: product?.specifications || {},
    },
  });

  // Cập nhật features và specifications vào form data
  useEffect(() => {
    setValue('features', features.filter(Boolean));

    const specsObject = {};
    specificationFields.forEach((field) => {
      if (field.key && field.value) {
        specsObject[field.key] = field.value;
      }
    });
    setValue('specifications', specsObject);
  }, [features, specificationFields, setValue]);

  // Xử lý thêm/xóa feature
  const handleAddFeature = () => {
    setFeatures([...features, '']);
  };

  const handleRemoveFeature = (index) => {
    const newFeatures = [...features];
    newFeatures.splice(index, 1);
    setFeatures(newFeatures);
  };

  const handleFeatureChange = (index, value) => {
    const newFeatures = [...features];
    newFeatures[index] = value;
    setFeatures(newFeatures);
  };

  // Xử lý thêm/xóa specification
  const handleAddSpecification = () => {
    setSpecificationFields([...specificationFields, { key: '', value: '' }]);
  };

  const handleRemoveSpecification = (index) => {
    const newFields = [...specificationFields];
    newFields.splice(index, 1);
    setSpecificationFields(newFields);
  };

  const handleSpecificationChange = (index, field, value) => {
    const newFields = [...specificationFields];
    newFields[index][field] = value;
    setSpecificationFields(newFields);
  };

  // Xử lý thêm/xóa hình ảnh
  const handleAddImage = () => {
    setImageUrls([...imageUrls, '']);
  };

  const handleRemoveImage = (index) => {
    const newUrls = [...imageUrls];
    newUrls.splice(index, 1);
    setImageUrls(newUrls);
  };

  const handleImageChange = (index, value) => {
    const newUrls = [...imageUrls];
    newUrls[index] = value;
    setImageUrls(newUrls);
  };

  // Xử lý submit form
  const onFormSubmit = (data) => {
    // Thêm hình ảnh vào data
    const images = imageUrls.filter(Boolean).map((url, index) => ({
      url,
      alt: `${data.name} - Hình ${index + 1}`,
      isPrimary: index === 0,
    }));

    // Submit with images
    onSubmit({ ...data, images });
  };

  return (
    <form onSubmit={handleSubmit(onFormSubmit)} className="space-y-8">
      {/* Thông tin cơ bản */}
      <div className="bg-white shadow rounded-lg p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Thông tin cơ bản</h3>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="md:col-span-2">
            <Input
              label="Tên sản phẩm"
              {...register('name')}
              error={errors.name?.message}
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Danh mục <span className="text-red-500">*</span>
            </label>
            <select
              {...register('category')}
              className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md ${
                errors.category ? 'border-red-300' : ''
              }`}
            >
              <option value="">Chọn danh mục</option>
              {categories.map((category) => (
                <option key={category._id} value={category._id}>
                  {category.name}
                </option>
              ))}
            </select>
            {errors.category && (
              <p className="mt-1 text-sm text-red-600">{errors.category.message}</p>
            )}
          </div>

          <div>
            <Input
              label="Thương hiệu"
              {...register('brand')}
              error={errors.brand?.message}
              required
            />
          </div>

          <div>
            <Input
              label="Giá (VND)"
              type="number"
              {...register('price')}
              error={errors.price?.message}
              required
            />
          </div>

          <div>
            <Input
              label="Giá khuyến mãi (VND)"
              type="number"
              {...register('salePrice')}
              error={errors.salePrice?.message}
            />
          </div>

          <div>
            <Input
              label="Số lượng tồn kho"
              type="number"
              {...register('stock')}
              error={errors.stock?.message}
              required
            />
          </div>

          <div>
            <Input label="SKU" {...register('sku')} error={errors.sku?.message} />
          </div>

          <div className="md:col-span-2">
            <Input
              label="Mô tả ngắn"
              {...register('description.short')}
              error={errors.description?.short?.message}
              required
              multiline
              rows={2}
            />
          </div>

          <div className="md:col-span-2">
            <Input
              label="Mô tả chi tiết"
              {...register('description.long')}
              error={errors.description?.long?.message}
              required
              multiline
              rows={6}
            />
          </div>
        </div>

        <div className="mt-6 space-y-4">
          <div className="flex items-center">
            <input
              type="checkbox"
              id="isActive"
              {...register('isActive')}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="isActive" className="ml-2 block text-sm text-gray-900">
              Sản phẩm đang bán
            </label>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              id="isPromoted"
              {...register('isPromoted')}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="isPromoted" className="ml-2 block text-sm text-gray-900">
              Sản phẩm được quảng bá
            </label>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              id="isFeatured"
              {...register('isFeatured')}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="isFeatured" className="ml-2 block text-sm text-gray-900">
              Sản phẩm nổi bật
            </label>
          </div>
        </div>
      </div>

      {/* Tính năng sản phẩm */}
      <div className="bg-white shadow rounded-lg p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Tính năng sản phẩm</h3>

        <div className="space-y-4">
          {features.map((feature, index) => (
            <div key={index} className="flex items-center space-x-2">
              <Input
                placeholder={`Tính năng ${index + 1}`}
                value={feature}
                onChange={(e) => handleFeatureChange(index, e.target.value)}
                className="flex-1"
              />

              <button
                type="button"
                onClick={() => handleRemoveFeature(index)}
                className="text-red-500 hover:text-red-700"
              >
                Xóa
              </button>
            </div>
          ))}

          <button
            type="button"
            onClick={handleAddFeature}
            className="text-blue-600 hover:text-blue-800 text-sm font-medium"
          >
            + Thêm tính năng
          </button>
        </div>
      </div>

      {/* Thông số kỹ thuật */}
      <div className="bg-white shadow rounded-lg p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Thông số kỹ thuật</h3>

        <div className="space-y-4">
          {specificationFields.map((field, index) => (
            <div key={index} className="grid grid-cols-2 gap-4">
              <Input
                placeholder="Tên thông số"
                value={field.key}
                onChange={(e) => handleSpecificationChange(index, 'key', e.target.value)}
              />

              <div className="flex items-center space-x-2">
                <Input
                  placeholder="Giá trị"
                  value={field.value}
                  onChange={(e) => handleSpecificationChange(index, 'value', e.target.value)}
                  className="flex-1"
                />

                <button
                  type="button"
                  onClick={() => handleRemoveSpecification(index)}
                  className="text-red-500 hover:text-red-700"
                >
                  Xóa
                </button>
              </div>
            </div>
          ))}

          <button
            type="button"
            onClick={handleAddSpecification}
            className="text-blue-600 hover:text-blue-800 text-sm font-medium"
          >
            + Thêm thông số
          </button>
        </div>
      </div>

      {/* Hình ảnh sản phẩm */}
      <div className="bg-white shadow rounded-lg p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Hình ảnh sản phẩm</h3>

        <div className="space-y-4">
          {imageUrls.map((url, index) => (
            <div key={index} className="flex items-center space-x-2">
              <Input
                placeholder="URL hình ảnh"
                value={url}
                onChange={(e) => handleImageChange(index, e.target.value)}
                className="flex-1"
              />

              <button
                type="button"
                onClick={() => handleRemoveImage(index)}
                className="text-red-500 hover:text-red-700"
              >
                Xóa
              </button>
            </div>
          ))}

          <button
            type="button"
            onClick={handleAddImage}
            className="text-blue-600 hover:text-blue-800 text-sm font-medium"
          >
            + Thêm hình ảnh
          </button>
        </div>
      </div>

      {/* Submit button */}
      <div className="flex justify-end space-x-3">
        <Button type="button" variant="outline" onClick={() => window.history.back()}>
          Hủy
        </Button>
        <Button type="submit" isLoading={isSubmitting}>
          {product ? 'Cập nhật sản phẩm' : 'Thêm sản phẩm'}
        </Button>
      </div>
    </form>
  );
};

export default ProductForm;


--- File: src/components/feature/Admin/ProductManager/ProductTable.js ---
// src/components/feature/Admin/ProductManager/ProductTable.js
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { formatPrice } from '../../../../utils/formatters';

const ProductTable = ({ products, onDelete }) => {
  const [currentPage, setCurrentPage] = useState(1);
  const productsPerPage = 10;

  // Phân trang
  const indexOfLastProduct = currentPage * productsPerPage;
  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;
  const currentProducts = products.slice(indexOfFirstProduct, indexOfLastProduct);
  const totalPages = Math.ceil(products.length / productsPerPage);

  // Xử lý xóa sản phẩm
  const handleDelete = (productId) => {
    if (window.confirm('Bạn có chắc chắn muốn xóa sản phẩm này?')) {
      onDelete(productId);
    }
  };

  return (
    <div className="mt-4">
      <div className="flex flex-col">
        <div className="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
          <div className="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
            <div className="shadow overflow-hidden border-b border-gray-200 sm:rounded-lg">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Sản phẩm
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Danh mục
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Giá
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Tồn kho
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Trạng thái
                    </th>
                    <th scope="col" className="relative px-6 py-3">
                      <span className="sr-only">Hành động</span>
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {currentProducts.map((product) => (
                    <tr key={product._id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10">
                            <img
                              className="h-10 w-10 rounded-md object-cover"
                              src={product.images[0] || '/placeholder.jpg'}
                              alt={product.name}
                            />
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">{product.name}</div>
                            <div className="text-sm text-gray-500">SKU: {product.sku || 'N/A'}</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{product.category.name}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{formatPrice(product.price)}</div>
                        {product.salePrice && (
                          <div className="text-xs text-gray-500 line-through">
                            {formatPrice(product.salePrice)}
                          </div>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{product.stock}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span
                          className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            product.isActive
                              ? 'bg-green-100 text-green-800'
                              : 'bg-red-100 text-red-800'
                          }`}
                        >
                          {product.isActive ? 'Đang bán' : 'Ngừng bán'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <Link
                          to={`/admin/products/edit/${product._id}`}
                          className="text-blue-600 hover:text-blue-900 mr-4"
                        >
                          Sửa
                        </Link>
                        <button
                          onClick={() => handleDelete(product._id)}
                          className="text-red-600 hover:text-red-900"
                        >
                          Xóa
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6 mt-4 rounded-lg">
          <div>
            <p className="text-sm text-gray-700">
              Hiển thị <span className="font-medium">{indexOfFirstProduct + 1}</span> đến{' '}
              <span className="font-medium">{Math.min(indexOfLastProduct, products.length)}</span>{' '}
              của <span className="font-medium">{products.length}</span> sản phẩm
            </p>
          </div>
          <div>
            <nav
              className="isolate inline-flex -space-x-px rounded-md shadow-sm"
              aria-label="Pagination"
            >
              <button
                onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
                disabled={currentPage === 1}
                className={`relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${
                  currentPage === 1 ? 'opacity-50 cursor-not-allowed' : ''
                }`}
              >
                &laquo;
              </button>

              {[...Array(totalPages).keys()].map((number) => (
                <button
                  key={number + 1}
                  onClick={() => setCurrentPage(number + 1)}
                  className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                    currentPage === number + 1
                      ? 'z-10 bg-blue-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600'
                      : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                  }`}
                >
                  {number + 1}
                </button>
              ))}

              <button
                onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
                disabled={currentPage === totalPages}
                className={`relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${
                  currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : ''
                }`}
              >
                &raquo;
              </button>
            </nav>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductTable;


--- File: src/components/feature/Admin/UserManager/UserTable.js ---
// src/components/feature/Admin/UserManager/UserTable.js
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { formatDate } from '../../../../utils/formatters';

const UserTable = ({ users, onChangeStatus }) => {
  const [currentPage, setCurrentPage] = useState(1);
  const usersPerPage = 10;

  // Phân trang
  const indexOfLastUser = currentPage * usersPerPage;
  const indexOfFirstUser = indexOfLastUser - usersPerPage;
  const currentUsers = users.slice(indexOfFirstUser, indexOfLastUser);
  const totalPages = Math.ceil(users.length / usersPerPage);

  return (
    <div className="mt-4">
      <div className="flex flex-col">
        <div className="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
          <div className="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
            <div className="shadow overflow-hidden border-b border-gray-200 sm:rounded-lg">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Người dùng
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Vai trò
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Trạng thái
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Ngày đăng ký
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Đơn hàng
                    </th>
                    <th scope="col" className="relative px-6 py-3">
                      <span className="sr-only">Hành động</span>
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {currentUsers.map((user) => (
                    <tr key={user._id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10">
                            {user.avatar ? (
                              <img
                                className="h-10 w-10 rounded-full"
                                src={user.avatar}
                                alt={user.name}
                              />
                            ) : (
                              <div className="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center text-white font-semibold">
                                {user.name.charAt(0).toUpperCase()}
                              </div>
                            )}
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">{user.name}</div>
                            <div className="text-sm text-gray-500">{user.email}</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span
                          className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            user.role === 'admin'
                              ? 'bg-purple-100 text-purple-800'
                              : user.role === 'staff'
                                ? 'bg-blue-100 text-blue-800'
                                : 'bg-green-100 text-green-800'
                          }`}
                        >
                          {user.role === 'admin'
                            ? 'Admin'
                            : user.role === 'staff'
                              ? 'Nhân viên'
                              : 'Người dùng'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span
                          className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            user.isActive
                              ? 'bg-green-100 text-green-800'
                              : 'bg-red-100 text-red-800'
                          }`}
                        >
                          {user.isActive ? 'Hoạt động' : 'Đã khóa'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {formatDate(user.createdAt)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {user.orderCount || 0}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <Link
                          to={`/admin/users/${user._id}`}
                          className="text-blue-600 hover:text-blue-900 mr-4"
                        >
                          Chi tiết
                        </Link>
                        <button
                          onClick={() => onChangeStatus(user._id, !user.isActive)}
                          className={`${
                            user.isActive
                              ? 'text-red-600 hover:text-red-900'
                              : 'text-green-600 hover:text-green-900'
                          }`}
                        >
                          {user.isActive ? 'Khóa' : 'Kích hoạt'}
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6 mt-4 rounded-lg">
          <div>
            <p className="text-sm text-gray-700">
              Hiển thị <span className="font-medium">{indexOfFirstUser + 1}</span> đến{' '}
              <span className="font-medium">{Math.min(indexOfLastUser, users.length)}</span> của{' '}
              <span className="font-medium">{users.length}</span> người dùng
            </p>
          </div>
          <div>
            <nav
              className="isolate inline-flex -space-x-px rounded-md shadow-sm"
              aria-label="Pagination"
            >
              <button
                onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
                disabled={currentPage === 1}
                className={`relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${
                  currentPage === 1 ? 'opacity-50 cursor-not-allowed' : ''
                }`}
              >
                &laquo;
              </button>

              {[...Array(totalPages).keys()].map((number) => (
                <button
                  key={number + 1}
                  onClick={() => setCurrentPage(number + 1)}
                  className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                    currentPage === number + 1
                      ? 'z-10 bg-blue-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600'
                      : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                  }`}
                >
                  {number + 1}
                </button>
              ))}

              <button
                onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
                disabled={currentPage === totalPages}
                className={`relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${
                  currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : ''
                }`}
              >
                &raquo;
              </button>
            </nav>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserTable;


--- File: src/components/feature/Auth/RegisterForm.js ---
// Vị trí file: client/src/components/feature/Auth/RegisterForm.js
// Component form đăng ký với chức năng bật tắt hiển thị mật khẩu cải tiến
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { useDispatch } from 'react-redux';
import {
  FaUser,
  FaEnvelope,
  FaLock,
  FaEye,
  FaEyeSlash,
  FaGoogle,
  FaFacebook,
  FaInfoCircle,
} from 'react-icons/fa';

import { Input, Button } from '../../../components/common';

import authService from '../../../services/authService';
import { login } from '../../../store/slices/authSlice';
import { ROUTES } from '../../../routes/paths';

const RegisterForm = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [agreeTerms, setAgreeTerms] = useState(false);
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
  } = useForm({
    defaultValues: {
      name: '',
      email: '',
      password: '',
      confirmPassword: '',
    },
  });

  const password = watch('password');

  const onSubmit = async (data) => {
    if (!agreeTerms) {
      setError('Vui lòng đồng ý với điều khoản sử dụng để tiếp tục');
      return;
    }

    try {
      setLoading(true);
      setError(null);

      // Gọi API đăng ký
      const response = await authService.register({
        name: data.name,
        email: data.email,
        password: data.password,
      });

      setSuccess('Đăng ký thành công! Đang chuyển hướng...');

      // Lưu thông tin đăng nhập vào Redux
      dispatch(
        login({
          user: response.user,
          token: response.token,
        })
      );

      // Chuyển hướng đến trang chủ sau 1.5 giây
      setTimeout(() => {
        navigate(ROUTES.HOME);
      }, 1500);
    } catch (err) {
      setError(err.response?.data?.message || 'Đăng ký không thành công. Vui lòng thử lại sau.');
    } finally {
      setLoading(false);
    }
  };

  const handleSocialLogin = (provider) => {
    // Xử lý đăng nhập bằng mạng xã hội (sẽ triển khai sau)
    console.log(`Đăng nhập với ${provider}`);
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  const toggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword(!showConfirmPassword);
  };

  // Kiểm tra độ mạnh của mật khẩu
  const getPasswordStrength = (password) => {
    if (!password) return null;

    let strength = 0;

    // Độ dài tối thiểu
    if (password.length >= 8) strength += 1;

    // Có chữ thường
    if (/[a-z]/.test(password)) strength += 1;

    // Có chữ hoa
    if (/[A-Z]/.test(password)) strength += 1;

    // Có số
    if (/[0-9]/.test(password)) strength += 1;

    // Có ký tự đặc biệt
    if (/[^a-zA-Z0-9]/.test(password)) strength += 1;

    return strength;
  };

  const renderPasswordStrength = (password) => {
    const strength = getPasswordStrength(password);

    if (!strength) return null;

    const strengthText = {
      1: 'Rất yếu',
      2: 'Yếu',
      3: 'Trung bình',
      4: 'Mạnh',
      5: 'Rất mạnh',
    };

    const strengthColor = {
      1: 'bg-red-500',
      2: 'bg-orange-500',
      3: 'bg-yellow-500',
      4: 'bg-green-500',
      5: 'bg-green-600',
    };

    return (
      <div className="mt-2">
        <div className="flex items-center mb-1">
          <div className="flex-1 h-1.5 bg-gray-200 rounded-full overflow-hidden">
            {Array.from({ length: 5 }).map((_, index) => (
              <div
                key={index}
                className={`h-full ${index < strength ? strengthColor[strength] : 'bg-gray-200'}`}
                style={{ width: '20%', float: 'left' }}
              ></div>
            ))}
          </div>
          <span className="ml-2 text-xs text-gray-600">{strengthText[strength]}</span>
        </div>
      </div>
    );
  };

  return (
    <div className="bg-white p-8 rounded-lg shadow-md max-w-md w-full mx-auto">
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800">Tạo tài khoản mới</h2>
        <p className="text-gray-600 mt-1">Điền thông tin để đăng ký tài khoản</p>
      </div>

      {/* Social Login Buttons */}
      <div className="flex space-x-4 mb-6">
        <Button
          variant="outline"
          className="flex-1 flex justify-center items-center"
          onClick={() => handleSocialLogin('Google')}
        >
          <FaGoogle className="mr-2" /> Google
        </Button>
        <Button
          variant="outline"
          className="flex-1 flex justify-center items-center"
          onClick={() => handleSocialLogin('Facebook')}
        >
          <FaFacebook className="mr-2" /> Facebook
        </Button>
      </div>

      <div className="relative flex items-center justify-center mb-6">
        <div className="border-t border-gray-300 flex-grow"></div>
        <span className="px-3 text-sm text-gray-500 bg-white">hoặc đăng ký với email</span>
        <div className="border-t border-gray-300 flex-grow"></div>
      </div>

      {success && (
        <div className="rounded-md bg-green-50 p-4 mb-6">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path
                  fillRule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                  clipRule="evenodd"
                />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-green-800">{success}</p>
            </div>
          </div>
        </div>
      )}

      {error && (
        <div className="rounded-md bg-red-50 p-4 mb-6">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path
                  fillRule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                  clipRule="evenodd"
                />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-red-800">{error}</p>
            </div>
          </div>
        </div>
      )}

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-5">
        <div>
          <Input
            id="name"
            type="text"
            placeholder="Họ và tên"
            leftIcon={<FaUser className="text-gray-400" />}
            {...register('name', {
              required: 'Vui lòng nhập họ và tên',
              minLength: {
                value: 3,
                message: 'Tên phải có ít nhất 3 ký tự',
              },
            })}
            error={errors.name?.message}
          />
        </div>

        <div>
          <Input
            id="email"
            type="email"
            placeholder="Email"
            leftIcon={<FaEnvelope className="text-gray-400" />}
            {...register('email', {
              required: 'Vui lòng nhập email',
              pattern: {
                value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
                message: 'Email không hợp lệ',
              },
            })}
            error={errors.email?.message}
          />
        </div>

        <div>
          <div className="relative">
            <Input
              id="password"
              type={showPassword ? 'text' : 'password'}
              placeholder="Mật khẩu"
              leftIcon={<FaLock className="text-gray-400" />}
              rightIcon={
                <div
                  onClick={togglePasswordVisibility}
                  className="cursor-pointer text-gray-400 hover:text-gray-600"
                >
                  {showPassword ? <FaEyeSlash /> : <FaEye />}
                </div>
              }
              {...register('password', {
                required: 'Vui lòng nhập mật khẩu',
                minLength: {
                  value: 8,
                  message: 'Mật khẩu phải có ít nhất 8 ký tự',
                },
                pattern: {
                  value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/,
                  message:
                    'Mật khẩu phải chứa ít nhất một chữ cái viết hoa, một chữ cái viết thường và một số',
                },
              })}
              error={errors.password?.message}
            />
          </div>

          {password && renderPasswordStrength(password)}

          {password && !errors.password && (
            <div className="mt-1 flex items-center text-xs text-green-600">
              <FaInfoCircle className="mr-1" />
              <span>Mật khẩu hợp lệ</span>
            </div>
          )}

          <div className="mt-1 text-xs text-gray-500">
            Mật khẩu phải có ít nhất 8 ký tự, bao gồm chữ hoa, chữ thường và số
          </div>
        </div>

        <div>
          <div className="relative">
            <Input
              id="confirmPassword"
              type={showConfirmPassword ? 'text' : 'password'}
              placeholder="Xác nhận mật kh��u"
              leftIcon={<FaLock className="text-gray-400" />}
              rightIcon={
                <div
                  onClick={toggleConfirmPasswordVisibility}
                  className="cursor-pointer text-gray-400 hover:text-gray-600"
                >
                  {showConfirmPassword ? <FaEyeSlash /> : <FaEye />}
                </div>
              }
              {...register('confirmPassword', {
                required: 'Vui lòng xác nhận mật khẩu',
                validate: (value) => value === password || 'Mật khẩu không khớp',
              })}
              error={errors.confirmPassword?.message}
            />
          </div>
        </div>

        <div className="flex items-center">
          <input
            id="terms"
            type="checkbox"
            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            checked={agreeTerms}
            onChange={(e) => setAgreeTerms(e.target.checked)}
          />
          <label htmlFor="terms" className="ml-2 block text-sm text-gray-700">
            Tôi đồng ý với{' '}
            <Link to={ROUTES.TERMS} className="text-blue-600 hover:text-blue-500">
              Điều khoản sử dụng
            </Link>{' '}
            và{' '}
            <Link to={ROUTES.PRIVACY} className="text-blue-600 hover:text-blue-500">
              Chính sách bảo mật
            </Link>
          </label>
        </div>

        <div>
          <Button
            type="submit"
            className="w-full py-3 font-medium"
            isLoading={loading}
            disabled={!agreeTerms}
          >
            Đăng ký
          </Button>
        </div>

        <div className="text-sm text-center mt-6">
          Đã có tài khoản?{' '}
          <Link to={ROUTES.LOGIN} className="font-medium text-blue-600 hover:text-blue-500">
            Đăng nhập
          </Link>
        </div>
      </form>
    </div>
  );
};

export default RegisterForm;


--- File: src/components/feature/Cart/AddToCart.js ---
// src/components/feature/Cart/AddToCart.js
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { addToCart } from '../../../store/slices/cartSlice';
import { Button } from '../../common/Button';

const AddToCart = ({ product }) => {
  const dispatch = useDispatch();
  const [quantity, setQuantity] = useState(1);
  const { loading } = useSelector((state) => state.cart);

  const handleQuantityChange = (newQuantity) => {
    if (newQuantity < 1 || newQuantity > product.stock) return;
    setQuantity(newQuantity);
  };

  const handleAddToCart = () => {
    dispatch(
      addToCart({
        productId: product._id,
        quantity,
      })
    );
  };

  if (product.stock < 1) {
    return (
      <div className="mt-6">
        <p className="text-red-500 mb-2">Hết hàng</p>
        <Button variant="outline" disabled className="w-full">
          Hết hàng
        </Button>
      </div>
    );
  }

  return (
    <div className="mt-6">
      <div className="flex items-center mb-4">
        <span className="mr-3">Số lượng:</span>
        <div className="flex items-center border rounded">
          <button
            className="px-3 py-1 text-gray-500"
            onClick={() => handleQuantityChange(quantity - 1)}
            disabled={quantity <= 1}
          >
            -
          </button>
          <span className="px-4 py-1">{quantity}</span>
          <button
            className="px-3 py-1 text-gray-500"
            onClick={() => handleQuantityChange(quantity + 1)}
            disabled={quantity >= product.stock}
          >
            +
          </button>
        </div>
        <span className="ml-3 text-sm text-gray-500">{product.stock} sản phẩm có sẵn</span>
      </div>

      <Button onClick={handleAddToCart} isLoading={loading} className="w-full">
        Thêm vào giỏ hàng
      </Button>
    </div>
  );
};

export default AddToCart;


--- File: src/components/feature/Cart/CartItem.js ---
// src/components/feature/Cart/CartItem.js
import React from 'react';
import { useDispatch } from 'react-redux';
import { updateCartItem, removeFromCart } from '../../../store/slices/cartSlice';
import { Button } from '../../common/Button';
import { formatPrice } from '../../../utils/formatters';

const CartItem = ({ item }) => {
  const dispatch = useDispatch();

  const handleQuantityChange = (newQuantity) => {
    if (newQuantity < 1) return;
    dispatch(
      updateCartItem({
        productId: item.product._id,
        quantity: newQuantity,
      })
    );
  };

  const handleRemove = () => {
    dispatch(removeFromCart(item.product._id));
  };

  return (
    <div className="flex items-center justify-between p-4 border-b">
      <div className="flex items-center space-x-4">
        <img
          src={item.product.images[0] || '/assets/placeholder.jpg'}
          alt={item.product.name}
          className="w-16 h-16 object-cover"
        />

        <div>
          <h3 className="font-medium">{item.product.name}</h3>
          <p className="text-gray-500 text-sm">{formatPrice(item.price)}</p>
        </div>
      </div>

      <div className="flex items-center space-x-4">
        <div className="flex items-center border rounded">
          <button
            className="px-2 py-1 text-gray-500"
            onClick={() => handleQuantityChange(item.quantity - 1)}
          >
            -
          </button>
          <span className="px-3 py-1">{item.quantity}</span>
          <button
            className="px-2 py-1 text-gray-500"
            onClick={() => handleQuantityChange(item.quantity + 1)}
          >
            +
          </button>
        </div>

        <div className="text-right">
          <p className="font-bold">{formatPrice(item.price * item.quantity)}</p>
        </div>

        <Button onClick={handleRemove} variant="outline" size="sm">
          Xóa
        </Button>
      </div>
    </div>
  );
};

export default CartItem;


--- File: src/components/feature/Cart/CartList.js ---
// src/components/feature/Cart/CartList.js
import React from 'react';
import { useSelector } from 'react-redux';
import CartItem from './CartItem';
import { Empty } from '../../common/Empty';

const CartList = () => {
  const { items } = useSelector((state) => state.cart);

  if (!items.length) {
    return <Empty message="Giỏ hàng của bạn đang trống" />;
  }

  return (
    <div className="rounded-lg border bg-white">
      <div className="p-4 border-b bg-gray-50">
        <h2 className="font-semibold">Giỏ hàng của bạn</h2>
      </div>
      <div>
        {items.map((item) => (
          <CartItem key={item.product._id} item={item} />
        ))}
      </div>
    </div>
  );
};

export default CartList;


--- File: src/components/feature/Cart/CartSummary.js ---
// src/components/feature/Cart/CartSummary.js
import React from 'react';
import { useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import { Button } from '../../common/Button';
import { formatPrice } from '../../../utils/formatters';

const CartSummary = () => {
  const { items, subtotal, discount } = useSelector((state) => state.cart);
  const totalItems = items.reduce((acc, item) => acc + item.quantity, 0);
  const total = subtotal - (discount || 0);

  return (
    <div className="rounded-lg border bg-white p-4">
      <h2 className="font-semibold mb-4">Tổng đơn hàng</h2>

      <div className="space-y-2 border-b pb-3 mb-3">
        <div className="flex justify-between">
          <span className="text-gray-600">Số lượng sản phẩm:</span>
          <span>{totalItems}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-600">Tạm tính:</span>
          <span>{formatPrice(subtotal)}</span>
        </div>
        {discount > 0 && (
          <div className="flex justify-between text-green-600">
            <span>Giảm giá:</span>
            <span>-{formatPrice(discount)}</span>
          </div>
        )}
      </div>

      <div className="flex justify-between font-bold mb-6">
        <span>Tổng cộng:</span>
        <span>{formatPrice(total)}</span>
      </div>

      <Link to="/checkout">
        <Button className="w-full">Tiến hành thanh toán</Button>
      </Link>
    </div>
  );
};

export default CartSummary;


--- File: src/components/feature/Category/CategoryBreadcrumb.js ---
// client/src/components/feature/Category/CategoryBreadcrumb.js

import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { fetchCategoryById } from '../../../store/slices/categorySlice';
import { PATHS } from '../../../routes/paths';

const CategoryBreadcrumb = ({ categoryId }) => {
  const dispatch = useDispatch();
  const { categories } = useSelector(state => state.categories);
  const [breadcrumbs, setBreadcrumbs] = useState([]);
  
  useEffect(() => {
    if (categoryId) {
      dispatch(fetchCategoryById(categoryId));
    }
  }, [dispatch, categoryId]);
  
  useEffect(() => {
    if (categoryId && categories[categoryId]) {
      const category = categories[categoryId];
      
      // Tạo breadcrumb từ ancestors
      const breadcrumbItems = [
        { name: 'Trang Chủ', path: PATHS.HOME },
        { name: 'Sản Phẩm', path: PATHS.PRODUCTS }
      ];
      
      // Thêm ancestors nếu có
      if (category.ancestors && category.ancestors.length > 0) {
        category.ancestors.forEach(ancestor => {
          breadcrumbItems.push({
            name: ancestor.name,
            path: `${PATHS.PRODUCTS}?category=${ancestor._id}`
          });
        });
      }
      
      // Thêm category hiện tại
      breadcrumbItems.push({
        name: category.name,
        path: `${PATHS.PRODUCTS}?category=${category._id}`,
        active: true
      });
      
      setBreadcrumbs(breadcrumbItems);
    } else {
      // Default breadcrumb nếu không có category
      setBreadcrumbs([
        { name: 'Trang Chủ', path: PATHS.HOME },
        { name: 'Sản Phẩm', path: PATHS.PRODUCTS, active: true }
      ]);
    }
  }, [categoryId, categories]);
  
  return (
    <nav className="flex py-3 px-5 text-gray-700 bg-gray-50 rounded-lg mb-6" aria-label="Breadcrumb">
      <ol className="inline-flex items-center space-x-1 md:space-x-3">
        {breadcrumbs.map((item, index) => (
          <li key={index} className="inline-flex items-center">
            {index > 0 && (
              <svg className="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd"></path>
              </svg>
            )}
            
            {item.active ? (
              <span className="ml-1 md:ml-2 text-sm font-medium text-gray-500">
                {item.name}
              </span>
            ) : (
              <Link
                to={item.path}
                className={`ml-1 md:ml-2 text-sm font-medium text-blue-600 hover:text-blue-800 ${index === 0 ? '' : 'ml-2'}`}
              >
                {item.name}
              </Link>
            )}
          </li>
        ))}
      </ol>
    </nav>
  );
};

export default CategoryBreadcrumb;

--- File: src/components/feature/Product/ProductCard.js ---
// src/components/feature/Product/ProductCard.js
// Component hiển thị thông tin sản phẩm trong trang danh sách sản phẩm

import React from 'react';
import { Link } from 'react-router-dom';
import Button from '../../common/Button';
import Card from '../../common/Card';
import { formatPrice } from '../../../utils/formatters';
import { useDispatch } from 'react-redux';
import { addToCart } from '../../../store/slices/cartSlice';

const ProductCard = ({ product }) => {
  const dispatch = useDispatch();

  const handleAddToCart = () => {
    dispatch(
      addToCart({
        productId: product.id,
        quantity: 1,
      })
    );
  };

  return (
    <Card className="product-card">
      <Link to={`/products/${product.id}`} className="block relative">
        <img
          src={product.images[0]?.url || '/placeholder.png'}
          alt={product.name}
          className="w-full h-48 object-cover rounded-t-lg"
        />
        {product.isPromoted && (
          <span className="absolute top-2 right-2 bg-red-500 text-white px-2 py-1 text-xs font-bold rounded">
            Khuyến mãi
          </span>
        )}
      </Link>
      <div className="p-4">
        <h3 className="text-lg font-semibold mb-1">{product.name}</h3>
        <p className="text-gray-600 text-sm mb-2">{product.brand}</p>
        <p className="text-gray-800 font-bold mb-3">{formatPrice(product.price)}</p>
        <Button variant="primary" size="sm" onClick={handleAddToCart} className="w-full">
          Thêm vào giỏ hàng
        </Button>
      </div>
    </Card>
  );
};

// Sử dụng React.memo để tránh re-render không cần thiết
export default React.memo(ProductCard);


--- File: src/components/feature/Product/ProductFilter.js ---
// client/src/components/feature/Product/ProductFilter.js

import React, { useState } from 'react';
import { useDebounce } from '../../../hooks/useDebounce';

const ProductFilter = ({ onFilterChange }) => {
  const [filters, setFilters] = useState({
    minPrice: '',
    maxPrice: '',
    brand: '',
    inStock: false,
  });

  const debouncedFilters = useDebounce(filters, 500);

  // Gọi onFilterChange khi filters thay đổi
  React.useEffect(() => {
    onFilterChange(debouncedFilters);
  }, [debouncedFilters, onFilterChange]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFilters((prev) => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  return (
    <div className="bg-white p-4 rounded-lg shadow mb-6">
      <h3 className="text-lg font-bold mb-4">Lọc Sản Phẩm</h3>

      <div className="mb-4">
        <label className="block text-sm font-medium mb-2">Khoảng Giá</label>
        <div className="flex space-x-2">
          <input
            type="number"
            name="minPrice"
            placeholder="Từ"
            value={filters.minPrice}
            onChange={handleChange}
            className="w-1/2 p-2 border rounded"
          />
          <input
            type="number"
            name="maxPrice"
            placeholder="Đến"
            value={filters.maxPrice}
            onChange={handleChange}
            className="w-1/2 p-2 border rounded"
          />
        </div>
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium mb-2">Thương Hiệu</label>
        <select
          name="brand"
          value={filters.brand}
          onChange={handleChange}
          className="w-full p-2 border rounded"
        >
          <option value="">Tất cả</option>
          <option value="ProCue">ProCue</option>
          <option value="StarterCue">StarterCue</option>
          <option value="MasterBall">MasterBall</option>
        </select>
      </div>

      <div className="mb-4">
        <label className="flex items-center">
          <input
            type="checkbox"
            name="inStock"
            checked={filters.inStock}
            onChange={handleChange}
            className="mr-2"
          />
          <span className="text-sm">Chỉ hiển thị sản phẩm còn hàng</span>
        </label>
      </div>
    </div>
  );
};

export default ProductFilter;


--- File: src/components/feature/Product/ProductList.js ---
// client/src/components/feature/Product/ProductList.js

import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { fetchProducts } from '../../../store/slices/productSlice';
import { addToCart } from '../../../store/slices/cartSlice';
import ProductCard from './ProductCard';
import { LoadingSpinner } from '../../../components/common';

const ProductList = ({ categoryId, filters = {} }) => {
  const dispatch = useDispatch();
  const { products, loading, error } = useSelector((state) => state.products);
  const [filteredProducts, setFilteredProducts] = useState([]);

  useEffect(() => {
    dispatch(fetchProducts({ categoryId, ...filters }));
  }, [dispatch, categoryId, filters]);

  useEffect(() => {
    setFilteredProducts(products);
  }, [products]);

  const handleAddToCart = (productId) => {
    dispatch(addToCart({ productId, quantity: 1 }));
  };

  if (loading) {
    return <LoadingSpinner />;
  }

  if (error) {
    return <div className="text-red-500">Error: {error}</div>;
  }

  if (!filteredProducts.length) {
    return <div className="text-center py-8">Không tìm thấy sản phẩm phù hợp.</div>;
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
      {filteredProducts.map((product) => (
        <ProductCard key={product.id} product={product} onAddToCart={handleAddToCart} />
      ))}
    </div>
  );
};

export default ProductList;


--- File: src/components/feature/Product/ProductList.test.js ---
// src/components/feature/Product/ProductList.test.js

import React from 'react';
import { render, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import { BrowserRouter } from 'react-router-dom';
import ProductList from './ProductList';
import { configureStore } from '@reduxjs/toolkit';
import productReducer from '../../../store/slices/productSlice';
import cartReducer from '../../../store/slices/cartSlice';

// Mock data
const mockProducts = [
  {
    id: '1',
    name: 'Gậy Billiard Pro Series X1',
    brand: 'ProCue',
    price: 1500000,
    images: ['/assets/products/cue1.jpg'],
  },
  {
    id: '2',
    name: 'Bộ bi-a Pro Tournament',
    brand: 'GameMaster',
    price: 850000,
    images: ['/assets/products/balls1.jpg'],
  },
];

// Test store
const testStore = configureStore({
  reducer: {
    products: productReducer,
    cart: cartReducer,
  },
  preloadedState: {
    products: {
      products: [],
      isLoading: false,
      error: null,
      filters: {},
    },
    cart: {
      items: [],
      total: 0,
    },
  },
});

// Test wrapper
const TestWrapper = ({ children }) => (
  <Provider store={testStore}>
    <BrowserRouter>{children}</BrowserRouter>
  </Provider>
);

describe('ProductList component', () => {
  test('renders empty state when no products', () => {
    render(<ProductList products={[]} />, { wrapper: TestWrapper });
    expect(screen.getByText('Không có sản phẩm')).toBeInTheDocument();
  });

  test('renders correct number of products', () => {
    render(<ProductList products={mockProducts} />, { wrapper: TestWrapper });
    expect(screen.getAllByRole('article')).toHaveLength(2);
  });

  test('displays product names correctly', () => {
    render(<ProductList products={mockProducts} />, { wrapper: TestWrapper });
    expect(screen.getByText('Gậy Billiard Pro Series X1')).toBeInTheDocument();
    expect(screen.getByText('Bộ bi-a Pro Tournament')).toBeInTheDocument();
  });
});


--- File: src/components/feature/Review/ReviewForm.js ---
// src/components/feature/Review/ReviewForm.js
import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { Button } from '../../common/Button';
import { Input } from '../../common/Input';

const schema = yup.object({
  rating: yup.number().required('Vui lòng chọn số sao').min(1, 'Vui lòng chọn số sao'),
  title: yup.string().required('Vui lòng nhập tiêu đề'),
  content: yup.string().required('Vui lòng nhập nội dung đánh giá'),
});

const ReviewForm = ({ productId, onSubmit, isSubmitting }) => {
  const [selectedRating, setSelectedRating] = useState(0);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(schema),
    defaultValues: {
      rating: 0,
      title: '',
      content: '',
    },
  });

  const handleRatingClick = (rating) => {
    setSelectedRating(rating);
  };

  const submitHandler = (data) => {
    onSubmit({ ...data, productId });
  };

  return (
    <form onSubmit={handleSubmit(submitHandler)} className="bg-white p-6 rounded-lg border">
      <h3 className="text-lg font-semibold mb-4">Viết đánh giá</h3>

      <div className="mb-4">
        <label className="block mb-2">Đánh giá của bạn</label>
        <div className="flex items-center mb-1">
          {[1, 2, 3, 4, 5].map((rating) => (
            <button
              key={rating}
              type="button"
              onClick={() => handleRatingClick(rating)}
              className="text-2xl text-yellow-400 focus:outline-none"
            >
              {rating <= selectedRating ? '★' : '☆'}
            </button>
          ))}
          <input type="hidden" value={selectedRating} {...register('rating')} />
        </div>
        {errors.rating && <p className="text-red-500 text-sm">{errors.rating.message}</p>}
      </div>

      <div className="mb-4">
        <Input label="Tiêu đề" {...register('title')} error={errors.title?.message} />
      </div>

      <div className="mb-6">
        <Input
          label="Nội dung đánh giá"
          {...register('content')}
          error={errors.content?.message}
          multiline
          rows={4}
        />
      </div>

      <Button type="submit" isLoading={isSubmitting}>
        Gửi đánh giá
      </Button>
    </form>
  );
};

export default ReviewForm;


--- File: src/components/feature/Review/ReviewItem.js ---
// src/components/feature/Review/ReviewItem.js
import React from 'react';
import { formatDate } from '../../../utils/formatters';

const ReviewItem = ({ review }) => {
  const renderStars = (rating) => {
    return Array.from({ length: 5 }).map((_, index) => (
      <span key={index} className="text-yellow-400">
        {index < rating ? '★' : '☆'}
      </span>
    ));
  };

  return (
    <div className="border-b pb-4 mb-4 last:border-b-0 last:mb-0 last:pb-0">
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center">
          <div className="font-semibold mr-3">{review.user.name}</div>
          <div className="text-yellow-400">{renderStars(review.rating)}</div>
        </div>
        <div className="text-gray-500 text-sm">{formatDate(review.createdAt)}</div>
      </div>

      <h4 className="font-medium mb-1">{review.title}</h4>
      <p className="text-gray-700">{review.content}</p>

      {review.response && (
        <div className="mt-3 pl-4 border-l-2 border-gray-300">
          <p className="text-sm font-semibold">Phản hồi từ cửa hàng:</p>
          <p className="text-sm text-gray-700">{review.response.content}</p>
        </div>
      )}
    </div>
  );
};

export default ReviewItem;


--- File: src/components/feature/Review/ReviewList.js ---
// src/components/feature/Review/ReviewList.js
import React from 'react';
import ReviewItem from './ReviewItem';
import { Empty } from '../../common/Empty';

const ReviewList = ({ reviews, loading, error }) => {
  if (loading) {
    return <div className="text-center p-4">Đang tải đánh giá...</div>;
  }

  if (error) {
    return <div className="text-center text-red-500 p-4">{error}</div>;
  }

  if (!reviews || reviews.length === 0) {
    return <Empty message="Chưa có đánh giá nào" />;
  }

  return (
    <div className="bg-white p-6 rounded-lg border">
      <h3 className="text-lg font-semibold mb-4">Đánh giá ({reviews.length})</h3>

      <div>
        {reviews.map((review) => (
          <ReviewItem key={review._id} review={review} />
        ))}
      </div>
    </div>
  );
};

export default ReviewList;


--- File: src/components/feature/Review/ReviewStats.js ---
// src/components/feature/Review/ReviewStats.js
import React from 'react';

const ReviewStats = ({ stats }) => {
  const { average, count, distribution } = stats;

  const renderStars = (rating) => {
    return Array.from({ length: 5 }).map((_, index) => (
      <span key={index} className="text-yellow-400 text-lg">
        {index < Math.floor(rating) ? '★' : '☆'}
      </span>
    ));
  };

  const renderDistribution = () => {
    return [5, 4, 3, 2, 1].map((rating) => {
      const count = distribution[rating] || 0;
      const percentage = count > 0 ? (count / stats.count) * 100 : 0;

      return (
        <div key={rating} className="flex items-center mb-1">
          <div className="w-12 text-sm">{rating} sao</div>
          <div className="w-full mx-4 bg-gray-200 rounded-full h-2.5">
            <div
              className="bg-yellow-400 h-2.5 rounded-full"
              style={{ width: `${percentage}%` }}
            ></div>
          </div>
          <div className="w-12 text-sm text-right">{count}</div>
        </div>
      );
    });
  };

  return (
    <div className="bg-white p-6 rounded-lg border mb-6">
      <div className="flex flex-col md:flex-row md:items-center mb-4">
        <div className="flex flex-col items-center mr-6 mb-4 md:mb-0">
          <div className="text-4xl font-bold text-center">
            {average ? average.toFixed(1) : '0.0'}
          </div>
          <div className="mb-1">{renderStars(average || 0)}</div>
          <div className="text-sm text-gray-500">({count} đánh giá)</div>
        </div>

        <div className="flex-1">{renderDistribution()}</div>
      </div>
    </div>
  );
};

export default ReviewStats;


--- File: src/components/feature/Search/RecentSearches.js ---
import React from 'react';

const RecentSearches = ({ searches, onSelect }) => {
  if (searches.length === 0) return null;

  return (
    <div className="absolute z-10 w-full mt-1 bg-white shadow-lg rounded-md border border-gray-200 max-h-60 overflow-y-auto">
      <div className="p-2 text-sm text-gray-500 border-b">Tìm kiếm gần đây</div>
      <ul>
        {searches.map((term, index) => (
          <li key={index}>
            <button
              className="w-full px-4 py-2 text-left hover:bg-gray-100 text-gray-700 flex items-center"
              onClick={() => onSelect(term)}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-4 w-4 mr-2 text-gray-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
              {term}
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default RecentSearches;


--- File: src/components/feature/Search/SearchBar.js ---
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { setKeyword, clearResults, searchProducts } from '../../../store/slices/searchSlice';
import { useDebounce } from '../../../hooks/useDebounce';
import { Input } from '../../common/Input';
import { Button } from '../../common/Button';
import RecentSearches from './RecentSearches';
import { useOutsideClick } from '../../../hooks/useOutsideClick';

const SearchBar = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const [inputValue, setInputValue] = useState('');
  const [showRecent, setShowRecent] = useState(false);
  const searchRef = useRef(null);
  const { recentSearches } = useSelector((state) => state.search);

  // Debounce input to avoid too many API calls
  const debouncedValue = useDebounce(inputValue, 300);

  // Close dropdown when clicking outside
  useOutsideClick(searchRef, () => {
    setShowRecent(false);
  });

  // Perform search when debounced value changes
  useEffect(() => {
    if (debouncedValue && debouncedValue.length > 2) {
      dispatch(searchProducts(debouncedValue));
    } else {
      dispatch(clearResults());
    }
  }, [debouncedValue, dispatch]);

  // Handle input change
  const handleChange = (e) => {
    const value = e.target.value;
    setInputValue(value);

    // Show recent searches dropdown when typing
    if (value.length > 0) {
      setShowRecent(true);
    } else {
      setShowRecent(false);
      dispatch(clearResults());
    }
  };

  // Handle search submission
  const handleSubmit = (e) => {
    e.preventDefault();
    if (inputValue.trim()) {
      dispatch(setKeyword(inputValue));
      navigate(`/search?q=${encodeURIComponent(inputValue)}`);
      setShowRecent(false);
    }
  };

  // Select recent search
  const handleSelectRecent = (term) => {
    setInputValue(term);
    dispatch(setKeyword(term));
    navigate(`/search?q=${encodeURIComponent(term)}`);
    setShowRecent(false);
  };

  return (
    <div ref={searchRef} className="relative">
      <form onSubmit={handleSubmit} className="flex">
        <Input
          type="text"
          placeholder="Tìm kiếm sản phẩm..."
          value={inputValue}
          onChange={handleChange}
          onFocus={() => inputValue && setShowRecent(true)}
          className="w-full rounded-r-none"
        />
        <Button type="submit" variant="primary" className="rounded-l-none">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
            />
          </svg>
        </Button>
      </form>

      {/* Recent searches dropdown */}
      {showRecent && recentSearches.length > 0 && (
        <RecentSearches searches={recentSearches} onSelect={handleSelectRecent} />
      )}
    </div>
  );
};

export default SearchBar;


--- File: src/components/feature/User/OrderDetail.js ---
// src/components/feature/User/OrderDetail.js
import React, { useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { fetchOrderDetail } from '../../../store/slices/orderSlice';
import { formatDate, formatPrice } from '../../../utils/formatters';
import { LoadingSpinner } from '../../common/LoadingSpinner';

const OrderStatus = ({ status, statusHistory }) => {
  const statusSteps = [
    { key: 'pending', label: 'Chờ xác nhận' },
    { key: 'processing', label: 'Đang xử lý' },
    { key: 'shipped', label: 'Đang giao hàng' },
    { key: 'delivered', label: 'Đã giao hàng' },
  ];

  // Find current status index
  const currentIndex = statusSteps.findIndex((step) => step.key === status);

  // Handle cancelled order
  if (status === 'cancelled') {
    return (
      <div className="mb-6">
        <div className="flex items-center">
          <div className="w-8 h-8 bg-red-500 rounded-full flex items-center justify-center text-white">
            ✕
          </div>
          <div className="ml-3">
            <p className="font-medium">Đơn hàng đã bị hủy</p>
            <p className="text-sm text-gray-500">
              {statusHistory &&
                statusHistory.length > 0 &&
                `Ngày hủy: ${formatDate(statusHistory[statusHistory.length - 1].date)}`}
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="mb-6">
      <h3 className="font-medium mb-4">Trạng thái đơn hàng</h3>
      <div className="relative">
        {/* Progress line */}
        <div className="absolute top-4 left-4 right-4 h-0.5 bg-gray-200">
          <div
            className="h-0.5 bg-green-500"
            style={{ width: `${(currentIndex * 100) / (statusSteps.length - 1)}%` }}
          ></div>
        </div>

        {/* Status steps */}
        <div className="flex justify-between relative">
          {statusSteps.map((step, index) => {
            const isCompleted = index <= currentIndex;
            const isCurrent = index === currentIndex;

            return (
              <div key={step.key} className="flex flex-col items-center">
                <div
                  className={`w-8 h-8 rounded-full flex items-center justify-center z-10 ${
                    isCompleted ? 'bg-green-500 text-white' : 'bg-gray-200'
                  } ${isCurrent ? 'ring-2 ring-green-300' : ''}`}
                >
                  {isCompleted ? '✓' : index + 1}
                </div>
                <p className={`text-sm mt-2 ${isCompleted ? 'font-medium' : 'text-gray-500'}`}>
                  {step.label}
                </p>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};

const OrderDetail = () => {
  const { orderId } = useParams();
  const dispatch = useDispatch();
  const { currentOrder, loading, error } = useSelector((state) => state.order);

  useEffect(() => {
    if (orderId) {
      dispatch(fetchOrderDetail(orderId));
    }
  }, [dispatch, orderId]);

  if (loading) {
    return (
      <div className="flex justify-center items-center py-8">
        <LoadingSpinner />
      </div>
    );
  }

  if (error) {
    return <div className="text-center text-red-500 py-4">{error}</div>;
  }

  if (!currentOrder) {
    return <div className="text-center py-4">Không tìm thấy thông tin đơn hàng</div>;
  }

  return (
    <div className="bg-white rounded-lg border p-6">
      <div className="flex justify-between items-start mb-6">
        <div>
          <h2 className="text-xl font-semibold">Đơn hàng #{currentOrder.orderNumber}</h2>
          <p className="text-gray-500">Ngày đặt: {formatDate(currentOrder.createdAt)}</p>
        </div>
        <div className="font-bold text-lg">{formatPrice(currentOrder.totalAmount)}</div>
      </div>

      <OrderStatus status={currentOrder.status} statusHistory={currentOrder.statusHistory} />

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <div>
          <h3 className="font-medium mb-2">Thông tin giao hàng</h3>
          <div className="border rounded-lg p-4">
            <p>{currentOrder.shippingAddress.name}</p>
            <p>{currentOrder.shippingAddress.phone}</p>
            <p>{currentOrder.shippingAddress.street}</p>
            <p>
              {currentOrder.shippingAddress.city}, {currentOrder.shippingAddress.zipCode}
            </p>
          </div>
        </div>

        <div>
          <h3 className="font-medium mb-2">Phương thức thanh toán</h3>
          <div className="border rounded-lg p-4">
            <p>
              {currentOrder.paymentMethod === 'cod'
                ? 'Thanh toán khi nhận hàng (COD)'
                : 'Thanh toán qua VNPay'}
            </p>
            <p className="text-sm mt-1">
              Trạng thái:
              <span
                className={
                  currentOrder.paymentStatus === 'paid' ? 'text-green-600' : 'text-yellow-600'
                }
              >
                {currentOrder.paymentStatus === 'paid' ? ' Đã thanh toán' : ' Chưa thanh toán'}
              </span>
            </p>
          </div>
        </div>
      </div>

      <h3 className="font-medium mb-2">Chi tiết đơn hàng</h3>
      <div className="border rounded-lg">
        <div className="divide-y">
          {currentOrder.items.map((item) => (
            <div key={item._id} className="p-4 flex justify-between items-center">
              <div className="flex items-center">
                {item.image && (
                  <img
                    src={item.image}
                    alt={item.name}
                    className="w-12 h-12 object-cover rounded mr-3"
                  />
                )}
                <div>
                  <p className="font-medium">{item.name}</p>
                  <p className="text-sm text-gray-500">
                    Số lượng: {item.quantity} x {formatPrice(item.price)}
                  </p>
                </div>
              </div>
              <div className="font-medium">{formatPrice(item.price * item.quantity)}</div>
            </div>
          ))}
        </div>

        <div className="border-t p-4">
          <div className="flex justify-between mb-2">
            <span className="text-gray-600">Tạm tính:</span>
            <span>{formatPrice(currentOrder.subtotal)}</span>
          </div>
          {currentOrder.discount && currentOrder.discount.amount > 0 && (
            <div className="flex justify-between mb-2 text-green-600">
              <span>Giảm giá:</span>
              <span>-{formatPrice(currentOrder.discount.amount)}</span>
            </div>
          )}
          <div className="flex justify-between mb-2">
            <span className="text-gray-600">Phí vận chuyển:</span>
            <span>{formatPrice(currentOrder.shippingCost)}</span>
          </div>
          <div className="flex justify-between font-bold text-lg pt-2 border-t mt-2">
            <span>Tổng cộng:</span>
            <span>{formatPrice(currentOrder.totalAmount)}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OrderDetail;


--- File: src/components/feature/User/ProfileSidebar.js ---
// src/components/feature/User/ProfileSidebar.js
import React from 'react';
import { NavLink, useLocation } from 'react-router-dom';
import { useSelector } from 'react-redux';

const ProfileSidebar = () => {
  const location = useLocation();
  const { user } = useSelector((state) => state.user);

  const menuItems = [
    {
      path: '/profile',
      label: 'Thông tin tài khoản',
      icon: '👤',
      exact: true,
    },
    {
      path: '/profile/orders',
      label: 'Đơn hàng của tôi',
      icon: '📦',
      exact: false,
    },
    {
      path: '/profile/reviews',
      label: 'Đánh giá của tôi',
      icon: '⭐',
      exact: true,
    },
    {
      path: '/profile/wishlist',
      label: 'Sản phẩm yêu thích',
      icon: '❤️',
      exact: true,
    },
    {
      path: '/profile/settings',
      label: 'Cài đặt tài khoản',
      icon: '⚙️',
      exact: true,
    },
  ];

  return (
    <div className="bg-white rounded-lg border overflow-hidden">
      {user && (
        <div className="p-6 border-b">
          <div className="flex items-center">
            <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center text-blue-600 font-semibold mr-3">
              {user.name.charAt(0).toUpperCase()}
            </div>
            <div>
              <p className="font-medium">{user.name}</p>
              <p className="text-sm text-gray-500">{user.email}</p>
            </div>
          </div>
        </div>
      )}

      <div className="py-2">
        {menuItems.map((item) => {
          const isActive = item.exact
            ? location.pathname === item.path
            : location.pathname.startsWith(item.path);

          return (
            <NavLink
              key={item.path}
              to={item.path}
              className={`flex items-center px-6 py-3 hover:bg-gray-50 ${
                isActive ? 'text-blue-600 bg-blue-50 font-medium' : 'text-gray-700'
              }`}
            >
              <span className="mr-3">{item.icon}</span>
              {item.label}
            </NavLink>
          );
        })}
      </div>
    </div>
  );
};

export default ProfileSidebar;


--- File: src/components/feature/User/UserOrders.js ---
// src/components/feature/User/UserOrders.js
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { Link } from 'react-router-dom';
import { fetchUserOrders } from '../../../store/slices/orderSlice';
import { LoadingSpinner } from '../../common/LoadingSpinner';
import { formatDate, formatPrice } from '../../../utils/formatters';
import { Empty } from '../../common/Empty';

const OrderStatusBadge = ({ status }) => {
  const statusConfig = {
    pending: { text: 'Chờ xác nhận', color: 'bg-yellow-100 text-yellow-800' },
    processing: { text: 'Đang xử lý', color: 'bg-blue-100 text-blue-800' },
    shipped: { text: 'Đang giao hàng', color: 'bg-purple-100 text-purple-800' },
    delivered: { text: 'Đã giao hàng', color: 'bg-green-100 text-green-800' },
    cancelled: { text: 'Đã hủy', color: 'bg-red-100 text-red-800' },
  };

  const config = statusConfig[status] || { text: status, color: 'bg-gray-100 text-gray-800' };

  return (
    <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${config.color}`}>
      {config.text}
    </span>
  );
};

const UserOrders = () => {
  const dispatch = useDispatch();
  const { orders, loading, error } = useSelector((state) => state.order);

  useEffect(() => {
    dispatch(fetchUserOrders());
  }, [dispatch]);

  if (loading) {
    return (
      <div className="flex justify-center items-center py-8">
        <LoadingSpinner />
      </div>
    );
  }

  if (error) {
    return <div className="text-center text-red-500 py-4">{error}</div>;
  }

  if (!orders || orders.length === 0) {
    return <Empty message="Bạn chưa có đơn hàng nào" />;
  }

  return (
    <div className="bg-white rounded-lg border">
      <h2 className="text-xl font-semibold p-6 border-b">Đơn hàng của tôi</h2>

      <div className="divide-y">
        {orders.map((order) => (
          <div key={order._id} className="p-6">
            <div className="flex justify-between items-start mb-4">
              <div>
                <p className="font-medium mb-1">Đơn hàng #{order.orderNumber}</p>
                <p className="text-sm text-gray-500">Ngày đặt: {formatDate(order.createdAt)}</p>
              </div>
              <div className="flex flex-col items-end">
                <OrderStatusBadge status={order.status} />
                <p className="font-bold mt-2">{formatPrice(order.totalAmount)}</p>
              </div>
            </div>

            <div className="space-y-2 mb-4">
              {order.items.map((item) => (
                <div key={item._id} className="flex items-center">
                  <span className="text-gray-500 mr-2">{item.quantity}x</span>
                  <span>{item.name}</span>
                </div>
              ))}
            </div>

            <Link
              to={`/profile/orders/${order._id}`}
              className="text-blue-600 hover:text-blue-800 text-sm font-medium"
            >
              Xem chi tiết
            </Link>
          </div>
        ))}
      </div>
    </div>
  );
};

export default UserOrders;


--- File: src/components/feature/User/UserProfile.js ---
// src/components/feature/User/UserProfile.js
import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { updateUserProfile } from '../../../store/slices/userSlice';
import { Button } from '../../common/Button';
import { Input } from '../../common/Input';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';

const schema = yup.object({
  name: yup.string().required('Vui lòng nhập họ tên'),
  email: yup.string().email('Email không hợp lệ').required('Vui lòng nhập email'),
  phone: yup.string(),
  address: yup.string(),
});

const UserProfile = () => {
  const dispatch = useDispatch();
  const { user, loading } = useSelector((state) => state.user);
  const [isEditing, setIsEditing] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(schema),
    defaultValues: {
      name: user?.name || '',
      email: user?.email || '',
      phone: user?.phone || '',
      address: user?.address?.street || '',
    },
  });

  const onSubmit = async (data) => {
    try {
      await dispatch(updateUserProfile(data)).unwrap();
      setIsEditing(false);
    } catch (error) {
      console.error('Failed to update profile:', error);
    }
  };

  if (!user) {
    return <div className="text-center p-4">Đang tải thông tin...</div>;
  }

  return (
    <div className="bg-white p-6 rounded-lg border">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-semibold">Thông tin cá nhân</h2>
        {!isEditing && (
          <Button variant="outline" size="sm" onClick={() => setIsEditing(true)}>
            Chỉnh sửa
          </Button>
        )}
      </div>

      {isEditing ? (
        <form onSubmit={handleSubmit(onSubmit)}>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div>
              <Input label="Họ tên" {...register('name')} error={errors.name?.message} />
            </div>
            <div>
              <Input label="Email" {...register('email')} error={errors.email?.message} disabled />
            </div>
            <div>
              <Input label="Số điện thoại" {...register('phone')} error={errors.phone?.message} />
            </div>
            <div>
              <Input label="Địa chỉ" {...register('address')} error={errors.address?.message} />
            </div>
          </div>

          <div className="flex justify-end space-x-3">
            <Button type="button" variant="outline" onClick={() => setIsEditing(false)}>
              Hủy
            </Button>
            <Button type="submit" isLoading={loading}>
              Lưu thay đổi
            </Button>
          </div>
        </form>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <p className="text-gray-500 mb-1">Họ tên</p>
            <p className="font-medium">{user.name}</p>
          </div>
          <div>
            <p className="text-gray-500 mb-1">Email</p>
            <p className="font-medium">{user.email}</p>
          </div>
          <div>
            <p className="text-gray-500 mb-1">Số điện thoại</p>
            <p className="font-medium">{user.phone || 'Chưa cập nhật'}</p>
          </div>
          <div>
            <p className="text-gray-500 mb-1">Địa chỉ</p>
            <p className="font-medium">{user.address?.street || 'Chưa cập nhật'}</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserProfile;


--- File: src/hooks/useDebounce.js ---
import { useState, useEffect } from 'react';

/**
 * Custom hook để debounce một giá trị
 * @param {any} value - Giá trị cần debounce
 * @param {number} delay - Thời gian delay (ms)
 * @returns {any} - Giá trị đã debounce
 */
const useDebounce = (value, delay) => {
  // State và setter cho giá trị debounced
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    // Cập nhật giá trị debounced sau một khoảng thời gian delay
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    // Hủy timeout nếu value thay đổi hoặc unmount
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};

export default useDebounce;


--- File: src/hooks/useForm.js ---
import { useState } from 'react';

/**
 * Custom hook để quản lý form state
 * @param {Object} initialValues - Giá trị ban đầu của form
 * @param {Function} [validate] - Hàm validate form (optional)
 * @param {Function} [onSubmit] - Hàm xử lý submit form (optional)
 * @returns {Object} - Form state và các hàm xử lý
 */
const useForm = (initialValues, validate, onSubmit) => {
  const [values, setValues] = useState(initialValues);
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Xử lý thay đổi input
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;

    // Xử lý giá trị dựa trên loại input
    const inputValue = type === 'checkbox' ? checked : value;

    setValues({
      ...values,
      [name]: inputValue,
    });

    // Nếu field đã được touched, chạy validate khi thay đổi
    if (touched[name] && validate) {
      const validationErrors = validate({ ...values, [name]: inputValue });
      setErrors(validationErrors);
    }
  };

  // Xử lý khi blur khỏi field
  const handleBlur = (e) => {
    const { name } = e.target;

    setTouched({
      ...touched,
      [name]: true,
    });

    // Chạy validate khi blur
    if (validate) {
      const validationErrors = validate(values);
      setErrors(validationErrors);
    }
  };

  // Xử lý submit form
  const handleSubmit = async (e) => {
    e.preventDefault();

    // Đánh dấu tất cả các field là touched
    const allTouched = Object.keys(values).reduce((acc, key) => {
      acc[key] = true;
      return acc;
    }, {});

    setTouched(allTouched);

    // Validate form trước khi submit
    let validationErrors = {};
    if (validate) {
      validationErrors = validate(values);
      setErrors(validationErrors);
    }

    // Nếu không có lỗi và có hàm onSubmit
    if (Object.keys(validationErrors).length === 0 && onSubmit) {
      setIsSubmitting(true);

      try {
        await onSubmit(values);
      } catch (error) {
        console.error('Form submission error:', error);
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  // Reset form
  const resetForm = () => {
    setValues(initialValues);
    setErrors({});
    setTouched({});
    setIsSubmitting(false);
  };

  // Cập nhật giá trị form từ bên ngoài
  const setFieldValue = (name, value) => {
    setValues({
      ...values,
      [name]: value,
    });
  };

  return {
    values,
    errors,
    touched,
    isSubmitting,
    handleChange,
    handleBlur,
    handleSubmit,
    resetForm,
    setFieldValue,
  };
};

export default useForm;


--- File: src/hooks/useLocalStorage.js ---
import { useState, useEffect } from 'react';

/**
 * Custom hook để sử dụng localStorage
 * @param {string} key - Key để lưu trong localStorage
 * @param {any} initialValue - Giá trị ban đầu
 * @returns {Array} [storedValue, setValue]
 */
const useLocalStorage = (key, initialValue) => {
  // Tạo state ban đầu
  const [storedValue, setStoredValue] = useState(() => {
    try {
      // Lấy giá trị từ localStorage
      const item = window.localStorage.getItem(key);
      // Parse stored json or return initialValue
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      // Nếu có lỗi, trả về giá trị ban đầu
      console.error(`Error getting localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  // Hàm để cập nhật localStorage và state
  const setValue = (value) => {
    try {
      // Cho phép value là một function
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      // Lưu state
      setStoredValue(valueToStore);
      // Lưu vào localStorage
      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.error(`Error setting localStorage key "${key}":`, error);
    }
  };

  // Đồng bộ với các tab khác
  useEffect(() => {
    const handleStorageChange = (e) => {
      if (e.key === key) {
        try {
          setStoredValue(JSON.parse(e.newValue));
        } catch (error) {
          console.error(`Error parsing localStorage key "${key}":`, error);
        }
      }
    };

    // Lắng nghe sự kiện storage
    window.addEventListener('storage', handleStorageChange);

    // Cleanup
    return () => {
      window.removeEventListener('storage', handleStorageChange);
    };
  }, [key]);

  return [storedValue, setValue];
};

export default useLocalStorage;


--- File: src/hooks/useOutsideClick.js ---
import { useEffect, useRef } from 'react';

/**
 * Custom hook để phát hiện click bên ngoài một element
 * @param {Function} callback - Hàm sẽ được gọi khi click bên ngoài
 * @returns {React.MutableRefObject} - Ref để gắn vào element cần theo dõi
 */
const useOutsideClick = (callback) => {
  const ref = useRef();

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (ref.current && !ref.current.contains(event.target)) {
        callback();
      }
    };

    // Thêm event listener
    document.addEventListener('mousedown', handleClickOutside);

    // Cleanup
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [callback]);

  return ref;
};

export default useOutsideClick;


--- File: src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import { QueryClient, QueryClientProvider } from 'react-query';
import { store } from './store';
import App from './App';
import './assets/css/index.css';

// Khởi tạo React Query client
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      retry: 1,
      staleTime: 5 * 60 * 1000, // 5 phút
    },
  },
});

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <QueryClientProvider client={queryClient}>
        <BrowserRouter>
          <App />
        </BrowserRouter>
      </QueryClientProvider>
    </Provider>
  </React.StrictMode>
);


--- File: src/pages/Admin/Dashboard/index.js ---
// src/pages/Admin/Dashboard/index.js
// Vị trí: Trang Dashboard chính cho Admin, hiển thị thống kê, biểu đồ và đơn hàng gần đây

import React, { useEffect, useState, useCallback } from 'react';
import { useAppDispatch, useAppSelector } from '../../../store/hooks';
import {
  fetchDashboardStats,
  fetchRecentOrders,
  clearError,
} from '../../../store/slices/adminSlice';
import {
  DashboardStats,
  RecentOrders,
  SalesChart,
  TimeFilter,
} from '../../../components/feature/Admin/Dashboard';
import { LoadingSpinner, ErrorAlert, RefreshButton } from '../../../components/common';

const TIME_PERIODS = {
  TODAY: 'today',
  WEEK: 'week',
  MONTH: 'month',
  YEAR: 'year',
};
import { unwrapResult } from '@reduxjs/toolkit';
const AdminDashboardPage = () => {
  const dispatch = useAppDispatch();
  const { stats, recentOrders, isLoading, error } = useAppSelector((state) => state.admin);

  const [timePeriod, setTimePeriod] = useState(TIME_PERIODS.WEEK);

  const fetchDashboardData = useCallback(async () => {
    const result = await dispatch(fetchDashboardStats(timePeriod));
    const data = unwrapResult(result);
    // Sử dụng data
  }, [dispatch, timePeriod]);
  useEffect(() => {
    fetchDashboardData();

    // Cleanup function để reset errors khi unmount
    return () => {
      dispatch(clearError());
    };
  }, [fetchDashboardData, dispatch]);

  const handleRefresh = () => {
    fetchDashboardData();
  };

  const handleTimeFilterChange = (period) => {
    setTimePeriod(period);
  };

  const handleDismissError = () => {
    dispatch(clearError());
  };

  return (
    <div className="space-y-6 px-4 py-6 sm:px-6 lg:px-8">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>

        <div className="mt-3 sm:mt-0 flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4">
          <TimeFilter
            currentPeriod={timePeriod}
            onChange={handleTimeFilterChange}
            options={TIME_PERIODS}
          />
          <RefreshButton onClick={handleRefresh} isLoading={isLoading} />
        </div>
      </div>

      {error && <ErrorAlert message={error} onDismiss={handleDismissError} />}

      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <LoadingSpinner size="large" />
        </div>
      ) : (
        <>
          <DashboardStats stats={stats} />

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2 bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">Doanh số bán hàng</h2>
              <SalesChart data={stats?.salesData || []} period={timePeriod} />
            </div>

            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">Đơn hàng gần đây</h2>
              <RecentOrders
                orders={recentOrders}
                isLoading={isLoading}
                onViewAllClick={() => {
                  /* Navigate to orders page */
                }}
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">Sản phẩm bán chạy</h2>
              {/* Component hiển thị sản phẩm bán chạy */}
            </div>

            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">Hoạt động gần đây</h2>
              {/* Component hiển thị hoạt động gần đây */}
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default AdminDashboardPage;


--- File: src/pages/Auth/Login/index.js ---
import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { login, clearError, selectAuth } from '../../../store/slices/authSlice';
import { ROUTES } from '../../../routes/paths';
import Button from '../../../components/common/Button';
import Input from '../../../components/common/Input';
import useForm from '../../../hooks/useForm';

const Login = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const location = useLocation();
  const { isAuthenticated, error, loading } = useSelector(selectAuth);
  const [showPassword, setShowPassword] = useState(false);

  // Lấy redirect path từ location state hoặc mặc định về trang chủ
  const from = location.state?.from?.pathname || ROUTES.HOME;

  // Nếu đã đăng nhập, chuyển hướng
  useEffect(() => {
    if (isAuthenticated) {
      navigate(from, { replace: true });
    }

    // Xóa error khi unmount
    return () => {
      dispatch(clearError());
    };
  }, [isAuthenticated, navigate, from, dispatch]);

  // Validate form
  const validateForm = (values) => {
    const errors = {};

    if (!values.email) {
      errors.email = 'Email là bắt buộc';
    } else if (!/\S+@\S+\.\S+/.test(values.email)) {
      errors.email = 'Email không hợp lệ';
    }

    if (!values.password) {
      errors.password = 'Mật khẩu là bắt buộc';
    }

    return errors;
  };

  // Xử lý submit form
  const handleSubmit = async (values) => {
    await dispatch(login(values));
  };

  // Khởi tạo form với useForm hook
  const {
    values,
    errors,
    touched,
    handleChange,
    handleBlur,
    handleSubmit: submitForm,
  } = useForm({ email: '', password: '' }, validateForm, handleSubmit);

  return (
    <div className="max-w-md mx-auto">
      <h2 className="text-center text-2xl font-extrabold mb-6">Đăng Nhập</h2>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}

      <form onSubmit={submitForm}>
        <Input
          type="email"
          id="email"
          name="email"
          label="Email"
          placeholder="Nhập email của bạn"
          value={values.email}
          onChange={handleChange}
          onBlur={handleBlur}
          error={touched.email && errors.email}
          leftIcon={
            <svg
              className="h-5 w-5 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
              ></path>
            </svg>
          }
        />

        <Input
          type={showPassword ? 'text' : 'password'}
          id="password"
          name="password"
          label="Mật khẩu"
          placeholder="Nhập mật khẩu của bạn"
          value={values.password}
          onChange={handleChange}
          onBlur={handleBlur}
          error={touched.password && errors.password}
          leftIcon={
            <svg
              className="h-5 w-5 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
              ></path>
            </svg>
          }
          rightIcon={
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="focus:outline-none"
            >
              {showPassword ? (
                <svg
                  className="h-5 w-5 text-gray-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"
                  ></path>
                </svg>
              ) : (
                <svg
                  className="h-5 w-5 text-gray-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                  ></path>
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                  ></path>
                </svg>
              )}
            </button>
          }
        />

        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center">
            <input
              id="remember-me"
              name="remember-me"
              type="checkbox"
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
              Ghi nhớ đăng nhập
            </label>
          </div>

          <div className="text-sm">
            <Link
              to={ROUTES.FORGOT_PASSWORD}
              className="font-medium text-blue-600 hover:text-blue-500"
            >
              Quên mật khẩu?
            </Link>
          </div>
        </div>

        <Button type="submit" variant="primary" className="w-full" isLoading={loading}>
          Đăng Nhập
        </Button>
      </form>

      <div className="text-center mt-6">
        <p className="text-sm text-gray-600">
          Chưa có tài khoản?{' '}
          <Link to={ROUTES.REGISTER} className="font-medium text-blue-600 hover:text-blue-500">
            Đăng ký ngay
          </Link>
        </p>
      </div>
    </div>
  );
};

export default Login;


--- File: src/pages/Auth/Register/index.js ---
// src/pages/Auth/Register/index.js
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAppSelector } from '../../../store/hooks';

import RegisterForm from '../../../components/feature/Auth/RegisterForm';
import { ROUTES } from '../../../routes/paths';

const RegisterPage = () => {
  const { isAuthenticated } = useAppSelector((state) => state.auth);

  // Nếu đã đăng nhập, chuyển hướng về trang chủ
  if (isAuthenticated) {
    return <Navigate to={ROUTES.HOME} replace />;
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          {/* <img
            className="mx-auto h-16 w-auto"
            src="/assets/images/logo.png"
            alt="RunOut-Biliard Logo"
          /> */}
          {/* <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Tạo tài khoản mới
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Trở thành thành viên của RunOut-Biliard và nhận được nhiều ưu đãi hấp dẫn
          </p> */}
        </div>

        <div className="mt-8 bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <RegisterForm />
        </div>

        <div className="text-center text-xs text-gray-500">
          © 2025 RunOut-Biliard. Tất cả các quyền thuộc về Steve.
        </div>
      </div>
    </div>
  );
};

export default RegisterPage;


--- File: src/pages/Cart/index.js ---
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { Link } from 'react-router-dom';
import { updateCartItem, removeFromCart, clearCart, fetchCart } from '../../store/slices/cartSlice';
import CartList from '../../components/feature/Cart/CartList';
import CartSummary from '../../components/feature/Cart/CartSummary';
import EmptyState from '../../components/common/Empty';
import Breadcrumb from '../../components/common/Breadcrumb';
import { Button } from '../../components/common/Button';
import { LoadingSpinner } from '../../components/common/LoadingSpinner';
import MainLayout from '../../components/layout/MainLayout';
import { PATHS } from '../../routes/paths';

const CartPage = () => {
  const dispatch = useDispatch();
  const { items, loading, error } = useSelector((state) => state.cart);

  useEffect(() => {
    dispatch(fetchCart());
  }, [dispatch]);

  // Handle quantity change
  const handleQuantityChange = (productId, quantity) => {
    dispatch(updateCartItem({ productId, quantity }));
  };

  // Handle remove item
  const handleRemoveItem = (productId) => {
    dispatch(removeFromCart(productId));
  };

  // Handle clear cart
  const handleClearCart = () => {
    if (window.confirm('Bạn có chắc muốn xóa tất cả sản phẩm khỏi giỏ hàng?')) {
      dispatch(clearCart());
    }
  };

  // Render loading state
  if (loading) {
    return (
      <MainLayout>
        <div className="container mx-auto px-4 py-8">
          <Breadcrumb
            items={[
              { label: 'Trang chủ', path: '/' },
              { label: 'Giỏ hàng', path: '/cart' },
            ]}
          />
          <div className="flex justify-center items-center h-64">
            <LoadingSpinner />
          </div>
        </div>
      </MainLayout>
    );
  }

  // Render error state
  if (error) {
    return (
      <MainLayout>
        <div className="container mx-auto px-4 py-8">
          <Breadcrumb
            items={[
              { label: 'Trang chủ', path: '/' },
              { label: 'Giỏ hàng', path: '/cart' },
            ]}
          />
          <div className="text-center text-red-500 mt-8">
            <p>Đã xảy ra lỗi: {error}</p>
            <Button variant="primary" className="mt-4" onClick={() => dispatch(fetchCart())}>
              Thử lại
            </Button>
          </div>
        </div>
      </MainLayout>
    );
  }

  // Render empty state if cart is empty
  if (items.length === 0) {
    return (
      <MainLayout>
        <div className="container mx-auto px-4 py-8">
          <Breadcrumb
            items={[
              { label: 'Trang chủ', path: '/' },
              { label: 'Giỏ hàng', path: '/cart' },
            ]}
          />

          <EmptyState
            message="Giỏ hàng của bạn đang trống"
            icon={
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-16 w-16 text-gray-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
                />
              </svg>
            }
            action={
              <Link to={PATHS.PRODUCTS}>
                <Button variant="primary">Tiếp tục mua sắm</Button>
              </Link>
            }
          />
        </div>
      </MainLayout>
    );
  }

  // Render cart with items
  return (
    <MainLayout>
      <div className="container mx-auto px-4 py-8">
        <Breadcrumb
          items={[
            { label: 'Trang chủ', path: '/' },
            { label: 'Giỏ hàng', path: '/cart' },
          ]}
        />

        <h1 className="text-2xl font-bold mb-6">Giỏ hàng của bạn</h1>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Cart Items */}
          <div className="lg:col-span-2">
            <CartList
              items={items}
              onQuantityChange={handleQuantityChange}
              onRemoveItem={handleRemoveItem}
              loading={loading}
            />

            <div className="mt-4 flex justify-between items-center">
              <Button variant="outline" onClick={handleClearCart} disabled={items.length === 0}>
                Xóa tất cả
              </Button>

              <Link to={PATHS.PRODUCTS}>
                <Button variant="link">Tiếp tục mua sắm</Button>
              </Link>
            </div>
          </div>

          {/* Cart Summary */}
          <div className="lg:col-span-1">
            <CartSummary items={items} checkoutLink={PATHS.CHECKOUT} />
          </div>
        </div>
      </div>
    </MainLayout>
  );
};

export default CartPage;


--- File: src/pages/Home/index.js ---
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import { fetchProducts, fetchCategories } from '../../store/slices/productSlice';
import { ROUTES } from '../../routes/paths';
import LoadingSpinner from '../../components/common/LoadingSpiner';
import Card from '../../components/common/Card';
import Button from '../../components/common/Button';
import { formatPrice } from '../../utils/formatters';

const HomePage = () => {
  const dispatch = useDispatch();
  const { products, categories, loading } = useSelector((state) => state.product);

  useEffect(() => {
    // Lấy sản phẩm nổi bật
    dispatch(fetchProducts({ limit: 8, featured: true }));

    // Lấy danh mục
    dispatch(fetchCategories());
  }, [dispatch]);
  u
  if (loading && products.length === 0) {
    return <LoadingSpinner fullScreen />;
  }

  return (
    <div>
      {/* Hero Section */}
      <section className="bg-blue-900 text-white py-16 mb-12 rounded-lg">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl md:text-5xl font-bold mb-6">RunOut-Biliard</h1>
          <p className="text-xl mb-8 max-w-3xl mx-auto">
            Chuyên cung cấp các sản phẩm Bi-a chất lượng cao, đa dạng mẫu mã, phù hợp với mọi nhu
            cầu từ người chơi nghiệp dư đến chuyên nghiệp.
          </p>
          <div className="flex justify-center space-x-4">
            <Link to={ROUTES.PRODUCTS}>
              <Button variant="primary" size="lg">
                Mua Ngay
              </Button>
            </Link>
            <Link to={ROUTES.ABOUT}>
              <Button variant="outline" size="lg">
                Tìm Hiểu Thêm
              </Button>
            </Link>
          </div>
        </div>
      </section>

      {/* Categories Section */}
      <section className="mb-16">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold mb-8 text-center">Danh Mục Sản Phẩm</h2>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {categories.slice(0, 4).map((category) => (
              <Link
                key={category._id}
                to={`${ROUTES.PRODUCTS}?category=${category.slug}`}
                className="block"
              >
                <div className="bg-gray-100 rounded-lg p-6 transition-transform hover:transform hover:scale-105 hover:shadow-lg text-center">
                  {category.image && (
                    <img
                      src={category.image.url}
                      alt={category.name}
                      className="w-16 h-16 mx-auto mb-4"
                    />
                  )}
                  <h3 className="text-xl font-semibold mb-2">{category.name}</h3>
                  <p className="text-gray-600 mb-4">
                    {category.description
                      ? category.description.substring(0, 100)
                      : 'Xem các sản phẩm'}
                  </p>
                  <span className="text-blue-600 hover:text-blue-800 font-medium">
                    Xem sản phẩm →
                  </span>
                </div>
              </Link>
            ))}
          </div>
        </div>
      </section>

      {/* Featured Products Section */}
      <section className="mb-16">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold mb-8 text-center">Sản Phẩm Nổi Bật</h2>

          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {products.map((product) => (
              <Link key={product._id} to={`${ROUTES.PRODUCTS}/${product._id}`}>
                <Card className="h-full flex flex-col transition-all hover:shadow-lg">
                  <div className="relative pb-[75%] overflow-hidden rounded-t-lg">
                    <img
                      src={product.images[0]?.url || '/placeholder.png'}
                      alt={product.name}
                      className="absolute top-0 left-0 w-full h-full object-cover"
                    />
                  </div>
                  <div className="p-4 flex-grow flex flex-col">
                    <h3 className="text-lg font-semibold mb-2">{product.name}</h3>
                    <p className="text-gray-600 text-sm mb-4 flex-grow">
                      {product.description?.short?.substring(0, 100) || 'Không có mô tả'}
                    </p>
                    <div className="flex justify-between items-center">
                      <span className="text-lg font-bold text-blue-700">
                        {formatPrice(product.price)}
                      </span>
                      <span className="text-sm text-gray-500">
                        {product.ratings?.average > 0 ? (
                          <span className="flex items-center">
                            <svg
                              className="w-4 h-4 text-yellow-500 mr-1"
                              fill="currentColor"
                              viewBox="0 0 20 20"
                            >
                              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                            </svg>
                            {product.ratings.average.toFixed(1)}
                          </span>
                        ) : (
                          'Chưa có đánh giá'
                        )}
                      </span>
                    </div>
                  </div>
                </Card>
              </Link>
            ))}
          </div>

          <div className="text-center mt-10">
            <Link to={ROUTES.PRODUCTS}>
              <Button variant="outline" size="lg">
                Xem Tất Cả Sản Phẩm
              </Button>
            </Link>
          </div>
        </div>
      </section>

      {/* About Section */}
      <section className="mb-16 bg-gray-100 py-16 rounded-lg">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row items-center">
            <div className="md:w-1/2 mb-8 md:mb-0 md:pr-8">
              <h2 className="text-3xl font-bold mb-6">Về RunOut-Biliard</h2>
              <p className="text-lg mb-6">
                RunOut-Biliard là nhà cung cấp hàng đầu các sản phẩm Bi-a chất lượng cao tại Việt
                Nam. Chúng tôi tự hào mang đến cho khách hàng những sản phẩm chính hãng với giá cả
                hợp lý.
              </p>
              <p className="text-lg mb-6">
                Với đội ngũ nhân viên nhiều kinh nghiệm và am hiểu về Bi-a, chúng tôi cam kết mang
                đến sự tư vấn tận tâm và chuyên nghiệp cho khách hàng.
              </p>
              <Link to={ROUTES.ABOUT}>
                <Button variant="primary">Xem Thêm</Button>
              </Link>
            </div>
            <div className="md:w-1/2">
              <img
                src="/assets/about.jpg"
                alt="RunOut-Biliard Store"
                className="rounded-lg shadow-lg"
              />
            </div>
          </div>
        </div>
      </section>
    </div>
  );
};

export default HomePage;


--- File: src/pages/Info/Contact.js ---


--- File: src/pages/Info/FAQ.js ---


--- File: src/pages/Info/Privacy.js ---


--- File: src/pages/Info/Return.js ---


--- File: src/pages/Info/Shipping.js ---


--- File: src/pages/Info/Terms.js ---


--- File: src/pages/NotFound/index.js ---
import React from 'react';
import { Link } from 'react-router-dom';
import { ROUTES } from '../../routes/paths';
import Button from '../../components/common/Button';

const NotFoundPage = () => {
  return (
    <div className="min-h-[70vh] flex flex-col items-center justify-center text-center px-4">
      <h1 className="text-9xl font-bold text-blue-600 mb-4">404</h1>
      <h2 className="text-3xl font-semibold mb-6">Trang Không Tìm Thấy</h2>
      <p className="text-lg text-gray-600 max-w-md mb-8">
        Xin lỗi, trang bạn đang tìm kiếm không tồn tại hoặc đã được di chuyển.
      </p>
      <div className="flex flex-col sm:flex-row gap-4">
        <Link to={ROUTES.HOME}>
          <Button variant="primary" size="lg">
            Quay Lại Trang Chủ
          </Button>
        </Link>
        <Link to={ROUTES.PRODUCTS}>
          <Button variant="outline" size="lg">
            Xem Sản Phẩm
          </Button>
        </Link>
      </div>
    </div>
  );
};

export default NotFoundPage;


--- File: src/pages/ProductDetail/index.js ---
// src/pages/ProductDetail/index.js
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { fetchProductById } from '../../store/slices/productSlice';
import { fetchProductReviews, submitProductReview } from '../../store/slices/reviewSlice';
import { addToCart } from '../../store/slices/cartSlice';
import MainLayout from '../../components/layout/MainLayout';
import { Button, LoadingSpinner } from '../../components/common';
import { formatPrice } from '../../utils/formatters';
import ReviewForm from '../../components/feature/Review/ReviewForm';
import ReviewList from '../../components/feature/Review/ReviewList';
import ReviewStats from '../../components/feature/Review/ReviewStats';
import { toast } from 'react-toastify';

const ProductDetailPage = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const { product, loading, error } = useSelector((state) => state.products);
  const {
    reviews,
    stats: reviewStats,
    loading: reviewsLoading,
    error: reviewsError,
  } = useSelector((state) => state.review);
  const { isAuthenticated, user } = useSelector((state) => state.auth);
  const [quantity, setQuantity] = useState(1);
  const [selectedImage, setSelectedImage] = useState(0);
  const [isSubmittingReview, setIsSubmittingReview] = useState(false);

  useEffect(() => {
    if (id) {
      dispatch(fetchProductById(id));
      dispatch(fetchProductReviews(id));
    }

    // Scroll to top when component mounts
    window.scrollTo(0, 0);
  }, [dispatch, id]);

  const handleQuantityChange = (e) => {
    const value = parseInt(e.target.value);
    if (!isNaN(value) && value > 0 && value <= (product?.stock || 1)) {
      setQuantity(value);
    }
  };

  const handleAddToCart = () => {
    if (product) {
      dispatch(
        addToCart({
          productId: product.id,
          quantity,
          name: product.name,
          price: product.price,
          image: product.images[0]?.url || '/placeholder.png',
        })
      );
      toast.success('Đã thêm sản phẩm vào giỏ hàng!');
    }
  };

  const handleSubmitReview = async (reviewData) => {
    try {
      setIsSubmittingReview(true);
      await dispatch(submitProductReview({ ...reviewData, productId: id })).unwrap();
      toast.success('Đánh giá của bạn đã được gửi thành công!');
      // Refresh reviews
      dispatch(fetchProductReviews(id));
    } catch (error) {
      toast.error(error || 'Không thể gửi đánh giá. Vui lòng thử lại sau.');
    } finally {
      setIsSubmittingReview(false);
    }
  };

  const handleImageClick = (index) => {
    setSelectedImage(index);
  };

  if (loading) {
    return (
      <MainLayout>
        <div className="container mx-auto py-8 px-4 flex justify-center">
          <LoadingSpinner />
        </div>
      </MainLayout>
    );
  }

  if (error) {
    return (
      <MainLayout>
        <div className="container mx-auto py-8 px-4">
          <div className="text-red-500">Lỗi: {error}</div>
        </div>
      </MainLayout>
    );
  }

  if (!product) {
    return (
      <MainLayout>
        <div className="container mx-auto py-8 px-4">
          <div className="text-center">Không tìm thấy sản phẩm.</div>
        </div>
      </MainLayout>
    );
  }

  // Kiểm tra xem người dùng đã đánh giá sản phẩm này chưa
  const hasUserReviewed = isAuthenticated && reviews.some((review) => review.userId === user?.id);

  return (
    <MainLayout>
      <div className="container mx-auto py-8 px-4">
        {/* Breadcrumb */}
        <div className="mb-6 text-sm text-gray-600">
          <a href="/" className="hover:text-blue-600">
            Trang chủ
          </a>{' '}
          &gt;
          <a href="/products" className="hover:text-blue-600">
            {' '}
            Sản phẩm
          </a>{' '}
          &gt;
          <span className="text-gray-800"> {product.name}</span>
        </div>

        <div className="flex flex-col md:flex-row gap-8">
          {/* Hình ảnh sản phẩm */}
          <div className="w-full md:w-1/2">
            <div className="bg-white rounded-lg overflow-hidden shadow-md">
              <img
                src={product.images[selectedImage]?.url || '/placeholder.png'}
                alt={product.name}
                className="w-full h-auto object-contain"
                style={{ maxHeight: '500px' }}
              />
            </div>

            {/* Hình ảnh phụ */}
            {product.images.length > 1 && (
              <div className="grid grid-cols-5 gap-2 mt-4">
                {product.images.map((image, index) => (
                  <div
                    key={index}
                    className={`border rounded cursor-pointer overflow-hidden ${selectedImage === index ? 'border-blue-500 border-2' : ''}`}
                    onClick={() => handleImageClick(index)}
                  >
                    <img
                      src={image.url}
                      alt={image.alt || `${product.name} - Ảnh ${index + 1}`}
                      className="w-full h-20 object-cover"
                    />
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Thông tin sản phẩm */}
          <div className="w-full md:w-1/2">
            <h1 className="text-3xl font-bold mb-2">{product.name}</h1>
            <p className="text-gray-600 mb-2">Thương hiệu: {product.brand}</p>

            {/* Đánh giá sao */}
            <div className="flex items-center mb-4">
              <div className="flex text-yellow-400 mr-2">
                {'★'.repeat(Math.floor(product.ratings?.average || 0))}
                {'☆'.repeat(5 - Math.floor(product.ratings?.average || 0))}
              </div>
              <p className="text-gray-600">({product.ratings?.count || 0} đánh giá)</p>
            </div>

            <div className="text-2xl font-bold text-blue-700 mb-4">
              {formatPrice(product.price)}
              {product.salePrice && product.salePrice < product.price && (
                <span className="text-gray-500 line-through ml-2 text-lg">
                  {formatPrice(product.salePrice)}
                </span>
              )}
            </div>

            {/* Tình trạng kho */}
            <div className="mb-4">
              <span className="font-semibold">Tình trạng: </span>
              {product.stock > 0 ? (
                <span className="text-green-600">Còn hàng ({product.stock})</span>
              ) : (
                <span className="text-red-600">Hết hàng</span>
              )}
            </div>

            {/* Mô tả ngắn */}
            <div className="mb-6">
              <p>{product.description.short}</p>
            </div>

            {/* Số lượng và thêm vào giỏ hàng */}
            <div className="flex items-center mb-6">
              <div className="mr-4">
                <label htmlFor="quantity" className="block mb-1">
                  Số lượng:
                </label>
                <div className="flex items-center border rounded">
                  <button
                    className="px-3 py-2 bg-gray-100 hover:bg-gray-200"
                    onClick={() => quantity > 1 && setQuantity(quantity - 1)}
                    disabled={quantity <= 1}
                  >
                    -
                  </button>
                  <input
                    type="number"
                    id="quantity"
                    min="1"
                    max={product.stock}
                    value={quantity}
                    onChange={handleQuantityChange}
                    className="w-16 border-x p-2 text-center"
                  />
                  <button
                    className="px-3 py-2 bg-gray-100 hover:bg-gray-200"
                    onClick={() => quantity < product.stock && setQuantity(quantity + 1)}
                    disabled={quantity >= product.stock}
                  >
                    +
                  </button>
                </div>
              </div>

              <Button
                variant="primary"
                size="lg"
                onClick={handleAddToCart}
                disabled={product.stock <= 0}
                className="flex-1"
              >
                {product.stock > 0 ? 'Thêm vào giỏ hàng' : 'Hết hàng'}
              </Button>
            </div>

            {/* Tính năng sản phẩm */}
            {product.features && product.features.length > 0 && (
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Tính năng nổi bật:</h3>
                <ul className="list-disc pl-5">
                  {product.features.map((feature, index) => (
                    <li key={index} className="mb-1">
                      {feature}
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {/* Chính sách bán hàng */}
            <div className="mt-6 bg-gray-50 p-4 rounded-lg">
              <h3 className="font-semibold mb-2">Chính sách mua hàng:</h3>
              <ul className="space-y-2">
                <li className="flex items-center">
                  <svg
                    className="w-5 h-5 mr-2 text-green-600"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M5 13l4 4L19 7"
                    ></path>
                  </svg>
                  Giao hàng toàn quốc
                </li>
                <li className="flex items-center">
                  <svg
                    className="w-5 h-5 mr-2 text-green-600"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M5 13l4 4L19 7"
                    ></path>
                  </svg>
                  Đổi trả trong vòng 7 ngày
                </li>
                <li className="flex items-center">
                  <svg
                    className="w-5 h-5 mr-2 text-green-600"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M5 13l4 4L19 7"
                    ></path>
                  </svg>
                  Bảo hành chính hãng 12 tháng
                </li>
              </ul>
            </div>
          </div>
        </div>

        {/* Tabs cho mô tả và thông số kỹ thuật */}
        <div className="mt-12">
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex space-x-8">
              <a
                href="#description"
                className="border-b-2 border-blue-500 py-4 px-1 text-sm font-medium text-blue-600"
              >
                Mô tả sản phẩm
              </a>
              <a
                href="#specifications"
                className="border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300"
              >
                Thông số kỹ thuật
              </a>
              <a
                href="#reviews"
                className="border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300"
              >
                Đánh giá ({product.ratings?.count || 0})
              </a>
            </nav>
          </div>

          {/* Mô tả chi tiết */}
          <div id="description" className="mt-6">
            <div className="bg-white p-6 rounded-lg shadow">
              <p className="whitespace-pre-line">{product.description.long}</p>
            </div>
          </div>

          {/* Thông số kỹ thuật */}
          {product.specifications && Object.keys(product.specifications).length > 0 && (
            <div id="specifications" className="mt-10">
              <h2 className="text-2xl font-bold mb-4">Thông số kỹ thuật</h2>
              <div className="bg-white rounded-lg shadow overflow-hidden">
                <table className="w-full border-collapse">
                  <tbody>
                    {Object.entries(product.specifications).map(([key, value]) => (
                      <tr key={key} className="border-b">
                        <td className="py-3 px-6 bg-gray-50 font-medium capitalize w-1/3">
                          {key.replace(/([A-Z])/g, ' $1').toLowerCase()}
                        </td>
                        <td className="py-3 px-6">{value}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {/* Đánh giá sản phẩm */}
          <div id="reviews" className="mt-10">
            <h2 className="text-2xl font-bold mb-6">Đánh giá sản phẩm</h2>

            {/* Thống kê đánh giá */}
            <ReviewStats stats={reviewStats} />

            {/* Form đánh giá - chỉ hiển thị cho người dùng đã đăng nhập và chưa đánh giá */}
            {isAuthenticated && !hasUserReviewed && (
              <div className="mb-8 mt-6">
                <h3 className="text-lg font-semibold mb-3">Viết đánh giá của bạn</h3>
                <ReviewForm
                  productId={product.id}
                  onSubmit={handleSubmitReview}
                  isSubmitting={isSubmittingReview}
                />
              </div>
            )}

            {/* Danh sách đánh giá */}
            <ReviewList reviews={reviews} loading={reviewsLoading} error={reviewsError} />
          </div>
        </div>

        {/* Sản phẩm liên quan */}
        <div className="mt-16">
          <h2 className="text-2xl font-bold mb-6">Sản phẩm liên quan</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {/* Placeholder cho sản phẩm liên quan - sẽ được thay thế bằng dữ liệu thực */}
            {[1, 2, 3, 4].map((item) => (
              <div key={item} className="bg-white rounded-lg shadow overflow-hidden">
                <div className="p-4">
                  <div className="aspect-w-1 aspect-h-1 bg-gray-200 mb-3"></div>
                  <h3 className="font-medium">Sản phẩm liên quan {item}</h3>
                  <p className="text-blue-600 font-bold mt-2">1.000.000₫</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </MainLayout>
  );
};

export default ProductDetailPage;


--- File: src/pages/Products/index.js ---
// src/pages/Products/index.js
// Trang hiển thị danh sách sản phẩm, bao gồm bộ lọc và breadcrumb

import React, { useEffect, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import { useAppSelector, useAppDispatch } from '../../store/hooks';
import { fetchProducts } from '../../store/slices/productSlice';
import ProductList from '../../components/feature/Product/ProductList';
import ProductFilter from '../../components/feature/Product/ProductFilter';
import CategoryBreadcrumb from '../../components/feature/Category/CategoryBreadcrumb';
import MainLayout from '../../components/layout/MainLayout';
import LoadingSpinner from '../../components/common/LoadingSpiner';

const ProductsPage = () => {
  const { categoryId } = useParams();
  const dispatch = useAppDispatch();
  const { products, isLoading, filters } = useAppSelector((state) => state.products);

  // Fetch sản phẩm khi component mount hoặc categoryId thay đổi
  useEffect(() => {
    dispatch(fetchProducts({ categoryId }));
  }, [dispatch, categoryId]);

  // Sử dụng useMemo để tối ưu hóa filtering
  const filteredProducts = useMemo(() => {
    if (!products.length) return [];

    return products.filter((product) => {
      // Filter by price range
      if (filters.minPrice && product.price < filters.minPrice) {
        return false;
      }
      if (filters.maxPrice && product.price > filters.maxPrice) {
        return false;
      }

      // Filter by brand
      if (filters.brand && product.brand !== filters.brand) {
        return false;
      }

      // Filter by stock
      if (filters.inStock && !product.inStock) {
        return false;
      }

      return true;
    });
  }, [products, filters]);

  return (
    <MainLayout>
      <div className="container mx-auto py-8 px-4">
        <CategoryBreadcrumb categoryId={categoryId} />
        <h1 className="text-3xl font-bold mb-6">Sản Phẩm Billiard</h1>

        <div className="flex flex-col md:flex-row gap-6">
          <div className="w-full md:w-1/4">
            <ProductFilter />
          </div>

          <div className="w-full md:w-3/4">
            {isLoading ? (
              <div className="flex justify-center py-12">
                <LoadingSpinner />
              </div>
            ) : (
              <ProductList products={filteredProducts} />
            )}
          </div>
        </div>
      </div>
    </MainLayout>
  );
};

export default ProductsPage;


--- File: src/pages/Profile/OrderDetail.js ---
// src/pages/Profile/OrderDetail.js
import React from 'react';
import { Link, useParams } from 'react-router-dom';
import MainLayout from '../../components/layout/MainLayout';
import OrderDetail from '../../components/feature/User/OrderDetail';
import ProfileSidebar from '../../components/feature/User/ProfileSidebar';

const OrderDetailPage = () => {
  const { orderId } = useParams();

  return (
    <MainLayout>
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center mb-6">
          <Link to="/profile/orders" className="text-blue-600 hover:text-blue-800 mr-2">
            ← Quay lại
          </Link>
          <h1 className="text-2xl font-bold">Chi tiết đơn hàng</h1>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <div className="lg:col-span-1">
            <ProfileSidebar />
          </div>
          <div className="lg:col-span-3">
            <OrderDetail />
          </div>
        </div>
      </div>
    </MainLayout>
  );
};

export default OrderDetailPage;


--- File: src/pages/Profile/Orders.js ---
// src/pages/Profile/Orders.js
import React from 'react';
import MainLayout from '../../components/layout/MainLayout';
import UserOrders from '../../components/feature/User/UserOrders';
import ProfileSidebar from '../../components/feature/User/ProfileSidebar';

const OrdersPage = () => {
  return (
    <MainLayout>
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-2xl font-bold mb-6">Đơn hàng của tôi</h1>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <div className="lg:col-span-1">
            <ProfileSidebar />
          </div>
          <div className="lg:col-span-3">
            <UserOrders />
          </div>
        </div>
      </div>
    </MainLayout>
  );
};

export default OrdersPage;


--- File: src/pages/Profile/index.js ---
// src/pages/Profile/index.js
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchUserProfile } from '../../store/slices/userSlice';
import MainLayout from '../../components/layout/MainLayout';
import UserProfile from '../../components/feature/User/UserProfile';
import { LoadingSpinner } from '../../components/common/LoadingSpinner';
import ProfileSidebar from '../../components/feature/User/ProfileSidebar';

const ProfilePage = () => {
  const dispatch = useDispatch();
  const { loading, error } = useSelector((state) => state.user);

  useEffect(() => {
    dispatch(fetchUserProfile());
  }, [dispatch]);

  if (loading) {
    return (
      <MainLayout>
        <div className="flex justify-center items-center py-12">
          <LoadingSpinner />
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-2xl font-bold mb-6">Tài khoản của tôi</h1>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <div className="lg:col-span-1">
            <ProfileSidebar />
          </div>
          <div className="lg:col-span-3">
            {error ? (
              <div className="bg-red-100 text-red-700 p-4 rounded">{error}</div>
            ) : (
              <UserProfile />
            )}
          </div>
        </div>
      </div>
    </MainLayout>
  );
};

export default ProfilePage;


--- File: src/pages/Search/index.js ---
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useLocation } from 'react-router-dom';
import { searchProducts, setKeyword } from '../../store/slices/searchSlice';
import ProductCard from '../../components/feature/Product/ProductCard';
import SearchFilters from '../../components/feature/Search/SearchFilters';
import Breadcrumb from '../../components/common/Breadcrumb';
import LoadingSpinner from '../../components/common/LoadingSpinner';
import EmptyState from '../../components/common/Empty';
import ErrorMessage from '../../components/common/ErrorMessage';

const SearchPage = () => {
  const dispatch = useDispatch();
  const location = useLocation();
  const { results, loading, error, keyword } = useSelector((state) => state.search);

  // Extract search query from URL
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const queryParam = searchParams.get('q');

    if (queryParam) {
      dispatch(setKeyword(queryParam));
      dispatch(searchProducts(queryParam));
    }
  }, [dispatch, location.search]);

  return (
    <div className="container mx-auto px-4 py-8">
      <Breadcrumb
        items={[
          { label: 'Trang chủ', path: '/' },
          { label: 'Tìm kiếm', path: '/search' },
          { label: keyword, path: `/search?q=${encodeURIComponent(keyword)}` },
        ]}
      />

      <h1 className="text-2xl font-bold mb-6">Kết quả tìm kiếm cho `{keyword}`</h1>

      <div className="flex flex-col md:flex-row gap-6">
        {/* Sidebar with filters */}
        <div className="w-full md:w-1/4 lg:w-1/5">
          <SearchFilters />
        </div>

        {/* Search results */}
        <div className="w-full md:w-3/4 lg:w-4/5">
          {loading ? (
            <LoadingSpinner />
          ) : error ? (
            <ErrorMessage message={error} />
          ) : results.length === 0 ? (
            <EmptyState message={`Không tìm thấy sản phẩm nào phù hợp với "${keyword}"`} />
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {results.map((product) => (
                <ProductCard key={product.id} product={product} />
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default SearchPage;


--- File: src/services/adminService.js ---
// src/services/adminService.js

import api from './api';

const adminService = {
  // Dashboard Stats
  getDashboardStats: async () => {
    try {
      const response = await api.get('/admin/dashboard/stats');
      return response.data;
    } catch (error) {
      console.error('Error fetching dashboard stats:', error);
      throw error;
    }
  },

  // Recent Orders
  getRecentOrders: async () => {
    try {
      const response = await api.get('/admin/orders/recent');
      return response.data;
    } catch (error) {
      console.error('Error fetching recent orders:', error);
      throw error;
    }
  },

  // Sales Data
  getSalesData: async (period = 'monthly') => {
    try {
      const response = await api.get(`/admin/dashboard/sales?period=${period}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching sales data:', error);
      throw error;
    }
  },

  // Product Management
  getProducts: async (page = 1, limit = 10, filters = {}) => {
    try {
      const queryParams = new URLSearchParams({
        page,
        limit,
        ...filters,
      }).toString();

      const response = await api.get(`/admin/products?${queryParams}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching products:', error);
      throw error;
    }
  },

  // Order Management
  getOrders: async (page = 1, limit = 10, filters = {}) => {
    try {
      const queryParams = new URLSearchParams({
        page,
        limit,
        ...filters,
      }).toString();

      const response = await api.get(`/admin/orders?${queryParams}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching orders:', error);
      throw error;
    }
  },

  // User Management
  getUsers: async (page = 1, limit = 10, filters = {}) => {
    try {
      const queryParams = new URLSearchParams({
        page,
        limit,
        ...filters,
      }).toString();

      const response = await api.get(`/admin/users?${queryParams}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching users:', error);
      throw error;
    }
  },
};

export default adminService;


--- File: src/services/api.js ---
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { refreshToken } from '../utils/authToken';

// URL cơ sở của API
const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

// Truy vấn cơ sở tùy chỉnh với khả năng làm mới token
const baseQueryWithReauth = async (args, api, extraOptions) => {
  const baseQuery = fetchBaseQuery({
    baseUrl,
    prepareHeaders: (headers, { getState }) => {
      // Lấy token từ state
      const token = getState().auth.token;

      // Nếu có token, thêm vào header
      if (token) {
        headers.set('Authorization', `Bearer ${token}`);
      }

      return headers;
    },
  });

  // Thử nghiệm đầu tiên với token hiện tại
  let result = await baseQuery(args, api, extraOptions);

  // Nếu nhận được phản hồi 401 Unauthorized, thử làm mới token
  if (result.error && result.error.status === 401) {
    try {
      // Cố gắng lấy token mới
      const newToken = await refreshToken();

      // Lưu trữ token mới
      api.dispatch({
        type: 'auth/tokenRefreshed',
        payload: newToken,
      });

      // Thử lại truy vấn ban đầu với token mới
      result = await baseQuery(args, api, extraOptions);
    } catch (refreshError) {
      // Xử lý khi làm mới token thất bại - chuyển hướng đến trang đăng nhập
      window.location.href = '/login';
    }
  }

  return result;
};

// RTK Query API
export const api = createApi({
  reducerPath: 'api',
  baseQuery: baseQueryWithReauth,
  tagTypes: ['Product', 'Category', 'User', 'Cart', 'Order', 'Review'],
  endpoints: () => ({}),
});

export default api;


--- File: src/services/authService.js ---
// File: client/src/services/authService.js
// Dịch vụ xác thực người dùng trong ứng dụng client

import axios from 'axios';
import { api } from './api';

// API base URL
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';
const AUTH_URL = `${API_URL}/auth`;

// Auth API endpoints
export const authApi = api.injectEndpoints({
  endpoints: (builder) => ({
    login: builder.mutation({
      query: (credentials) => ({
        url: '/auth/login',
        method: 'POST',
        body: credentials,
      }),
    }),
    register: builder.mutation({
      query: (userData) => ({
        url: '/auth/register',
        method: 'POST',
        body: userData,
      }),
    }),
    forgotPassword: builder.mutation({
      query: (email) => ({
        url: '/auth/forgot-password',
        method: 'POST',
        body: { email },
      }),
    }),
    resetPassword: builder.mutation({
      query: ({ token, password }) => ({
        url: '/auth/reset-password',
        method: 'POST',
        body: { token, password },
      }),
    }),
    getCurrentUser: builder.query({
      query: () => '/auth/me',
      providesTags: ['User'],
    }),
  }),
});

// Export hooks
export const {
  useLoginMutation,
  useRegisterMutation,
  useForgotPasswordMutation,
  useResetPasswordMutation,
  useGetCurrentUserQuery,
} = authApi;

// Utility để quản lý token
const authToken = {
  setToken: (token) => {
    localStorage.setItem('token', token);
  },
  getToken: () => {
    return localStorage.getItem('token');
  },
  removeToken: () => {
    localStorage.removeItem('token');
  },
};

// Regular API service for use with Redux Thunk
const authService = {
  // Đăng nhập
  login: async (credentials) => {
    try {
      const response = await axios.post(`${AUTH_URL}/login`, credentials);

      // Lưu token vào localStorage nếu có
      if (response.data.token) {
        authToken.setToken(response.data.token);
      }

      return response.data;
    } catch (error) {
      console.error('Lỗi đăng nhập:', error);
      throw error;
    }
  },

  // Đăng ký
  register: async (userData) => {
    try {
      const response = await axios.post(`${AUTH_URL}/register`, userData);

      // Lưu token vào localStorage nếu có
      if (response.data.token) {
        authToken.setToken(response.data.token);
      }

      return response.data;
    } catch (error) {
      console.error('Lỗi đăng ký:', error.response?.data || error.message);
      throw error;
    }
  },

  // Quên mật khẩu
  forgotPassword: async (email) => {
    try {
      return await axios.post(`${AUTH_URL}/forgot-password`, { email });
    } catch (error) {
      console.error('Lỗi quên mật khẩu:', error);
      throw error;
    }
  },

  // Đặt lại mật khẩu
  resetPassword: async (token, password) => {
    try {
      return await axios.post(`${AUTH_URL}/reset-password`, { token, password });
    } catch (error) {
      console.error('Lỗi đặt lại mật khẩu:', error);
      throw error;
    }
  },

  // Lấy thông tin người dùng hiện tại
  getCurrentUser: async () => {
    try {
      const token = authToken.getToken();
      if (!token) {
        throw new Error('Không tìm thấy token xác thực');
      }

      return await axios.get(`${AUTH_URL}/me`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
    } catch (error) {
      console.error('Lỗi lấy thông tin người dùng:', error);
      throw error;
    }
  },

  // Cập nhật thông tin người dùng
  updateProfile: async (userData) => {
    try {
      const token = authToken.getToken();
      return await axios.put(`${API_URL}/users/profile`, userData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
    } catch (error) {
      console.error('Lỗi cập nhật thông tin:', error);
      throw error;
    }
  },

  // Đổi mật khẩu
  changePassword: async (passwordData) => {
    try {
      const token = authToken.getToken();
      return await axios.put(`${API_URL}/users/password`, passwordData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
    } catch (error) {
      console.error('Lỗi đổi mật khẩu:', error);
      throw error;
    }
  },

  // Đăng xuất
  logout: () => {
    authToken.removeToken();
  },
};

export default authService;


--- File: src/services/cartService.js ---
import api from './api';
import { isAuthenticated } from '../utils/authToken';

export const cartService = {
  // Get cart (for authenticated users)
  async getCart() {
    if (!isAuthenticated()) {
      // Return local cart for guest users
      return this.getLocalCart();
    }

    try {
      const { data } = await api.get('/carts/me');
      return data;
    } catch (error) {
      console.error('Error fetching cart:', error);
      throw error;
    }
  },

  // Add item to cart
  async addToCart(productId, quantity = 1) {
    if (!isAuthenticated()) {
      // Use local cart for guest users
      return this.addToLocalCart(productId, quantity);
    }

    try {
      const { data } = await api.post('/carts/items', { productId, quantity });
      return data;
    } catch (error) {
      console.error('Error adding item to cart:', error);
      throw error;
    }
  },

  // Update cart item
  async updateCartItem(productId, quantity) {
    if (!isAuthenticated()) {
      // Use local cart for guest users
      return this.updateLocalCartItem(productId, quantity);
    }

    try {
      const { data } = await api.put(`/carts/items/${productId}`, { quantity });
      return data;
    } catch (error) {
      console.error('Error updating cart item:', error);
      throw error;
    }
  },

  // Remove item from cart
  async removeFromCart(productId) {
    if (!isAuthenticated()) {
      // Use local cart for guest users
      return this.removeFromLocalCart(productId);
    }

    try {
      const { data } = await api.delete(`/carts/items/${productId}`);
      return data;
    } catch (error) {
      console.error('Error removing item from cart:', error);
      throw error;
    }
  },

  // Clear cart
  async clearCart() {
    if (!isAuthenticated()) {
      // Use local cart for guest users
      return this.clearLocalCart();
    }

    try {
      const { data } = await api.delete('/carts/items');
      return data;
    } catch (error) {
      console.error('Error clearing cart:', error);
      throw error;
    }
  },

  // Local cart methods (for guest users)
  getLocalCart() {
    const cartJson = localStorage.getItem('guest_cart');
    return cartJson ? JSON.parse(cartJson) : { items: [] };
  },

  saveLocalCart(cart) {
    localStorage.setItem('guest_cart', JSON.stringify(cart));
    return cart;
  },

  async addToLocalCart(productId, quantity) {
    // Fetch product details first
    const { data: product } = await api.get(`/products/${productId}`);

    // Get current cart
    const cart = this.getLocalCart();

    // Check if product already exists in cart
    const existingItemIndex = cart.items.findIndex((item) => item.product.id === productId);

    if (existingItemIndex !== -1) {
      // Update quantity if product already exists
      cart.items[existingItemIndex].quantity += quantity;
    } else {
      // Add new item to cart
      cart.items.push({
        product,
        quantity,
      });
    }

    // Save updated cart
    return this.saveLocalCart(cart);
  },

  updateLocalCartItem(productId, quantity) {
    // Get current cart
    const cart = this.getLocalCart();

    // Find item in cart
    const itemIndex = cart.items.findIndex((item) => item.product.id === productId);

    if (itemIndex !== -1) {
      // Update quantity
      cart.items[itemIndex].quantity = quantity;

      // Save updated cart
      return this.saveLocalCart(cart);
    }

    return cart;
  },

  removeFromLocalCart(productId) {
    // Get current cart
    const cart = this.getLocalCart();

    // Remove item from cart
    cart.items = cart.items.filter((item) => item.product.id !== productId);

    // Save updated cart
    return this.saveLocalCart(cart);
  },

  clearLocalCart() {
    // Clear cart
    const emptyCart = { items: [] };

    // Save empty cart
    return this.saveLocalCart(emptyCart);
  },
};


--- File: src/services/notificationService.js ---
// services/notificationService.js
import api from './api';

/**
 * Service for notification-related API calls
 */
const notificationService = {
  /**
   * Get all notifications for current user
   * @param {Object} params - Query parameters for pagination/filtering
   * @returns {Promise<Object>} Notifications with pagination data
   */
  async getNotifications(params = {}) {
    try {
      const response = await api.get('/notifications', { params });
      return response.data;
    } catch (error) {
      console.error('Error fetching notifications:', error);
      throw error;
    }
  },

  /**
   * Get unread notifications count
   * @returns {Promise<number>} Number of unread notifications
   */
  async getUnreadCount() {
    try {
      const response = await api.get('/notifications/unread/count');
      return response.data.count;
    } catch (error) {
      console.error('Error fetching unread count:', error);
      throw error;
    }
  },

  /**
   * Mark notification as read
   * @param {string} notificationId - ID of the notification
   * @returns {Promise<Object>} Updated notification
   */
  async markAsRead(notificationId) {
    try {
      const response = await api.put(`/notifications/${notificationId}/read`);
      return response.data;
    } catch (error) {
      console.error(`Error marking notification ${notificationId} as read:`, error);
      throw error;
    }
  },

  /**
   * Mark all notifications as read
   * @returns {Promise<Object>} Success message
   */
  async markAllAsRead() {
    try {
      const response = await api.put('/notifications/read-all');
      return response.data;
    } catch (error) {
      console.error('Error marking all notifications as read:', error);
      throw error;
    }
  },

  /**
   * Delete a notification
   * @param {string} notificationId - ID of the notification
   * @returns {Promise<Object>} Success message
   */
  async deleteNotification(notificationId) {
    try {
      const response = await api.delete(`/notifications/${notificationId}`);
      return response.data;
    } catch (error) {
      console.error(`Error deleting notification ${notificationId}:`, error);
      throw error;
    }
  },

  /**
   * Delete all notifications
   * @returns {Promise<Object>} Success message
   */
  async deleteAllNotifications() {
    try {
      const response = await api.delete('/notifications');
      return response.data;
    } catch (error) {
      console.error('Error deleting all notifications:', error);
      throw error;
    }
  },

  /**
   * Update notification preferences
   * @param {Object} preferences - Notification preferences
   * @returns {Promise<Object>} Updated preferences
   */
  async updatePreferences(preferences) {
    try {
      const response = await api.put('/notifications/preferences', preferences);
      return response.data;
    } catch (error) {
      console.error('Error updating notification preferences:', error);
      throw error;
    }
  },

  /**
   * Get notification preferences
   * @returns {Promise<Object>} Current notification preferences
   */
  async getPreferences() {
    try {
      const response = await api.get('/notifications/preferences');
      return response.data;
    } catch (error) {
      console.error('Error fetching notification preferences:', error);
      throw error;
    }
  },

  /**
   * Initialize WebSocket connection for real-time notifications
   * @returns {WebSocket} WebSocket connection
   */
  initializeWebSocket() {
    const token = localStorage.getItem('token');
    if (!token) {
      console.warn('No authentication token available for WebSocket connection');
      return null;
    }

    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsHost = process.env.REACT_APP_WS_HOST || window.location.host;
    const wsUrl = `${wsProtocol}//${wsHost}/ws/notifications?token=${token}`;

    try {
      const socket = new WebSocket(wsUrl);

      socket.onopen = () => {
        console.log('WebSocket connection established for notifications');
      };

      socket.onerror = (error) => {
        console.error('WebSocket error:', error);
      };

      socket.onclose = (event) => {
        console.log('WebSocket connection closed:', event.code, event.reason);

        // Attempt to reconnect after 5 seconds if connection was closed unexpectedly
        if (event.code !== 1000) {
          setTimeout(() => {
            console.log('Attempting to reconnect WebSocket...');
            this.initializeWebSocket();
          }, 5000);
        }
      };

      return socket;
    } catch (error) {
      console.error('Error initializing WebSocket:', error);
      return null;
    }
  },
};

export default notificationService;


--- File: src/services/orderService.js ---
// src/services/orderService.js
import api from './api';

export const orderService = {
  // Tạo đơn hàng mới
  async createOrder(orderData) {
    try {
      const response = await api.post('/orders', orderData);
      return response.data.data;
    } catch (error) {
      console.error('Error creating order:', error);
      throw error;
    }
  },

  // Lấy danh sách đơn hàng của người dùng
  async getUserOrders() {
    try {
      const response = await api.get('/orders');
      return response.data.data;
    } catch (error) {
      console.error('Error fetching user orders:', error);
      throw error;
    }
  },

  // Lấy thông tin chi tiết đơn hàng
  async getOrderById(orderId) {
    try {
      const response = await api.get(`/orders/${orderId}`);
      return response.data.data;
    } catch (error) {
      console.error(`Error fetching order ${orderId}:`, error);
      throw error;
    }
  },

  // Hủy đơn hàng
  async cancelOrder(orderId) {
    try {
      const response = await api.post(`/orders/${orderId}/cancel`);
      return response.data.data;
    } catch (error) {
      console.error(`Error cancelling order ${orderId}:`, error);
      throw error;
    }
  },
};


--- File: src/services/paymentService.js ---
// src/services/paymentService.js
// File này chứa các dịch vụ liên quan đến thanh toán trong ứng dụng
// Hỗ trợ nhiều cổng thanh toán như VNPay, Momo, v.v.

import api from './api';

const paymentService = {
  // === VNPay Payment Methods ===

  // Tạo URL thanh toán VNPay
  createVnpayPaymentUrl: async (orderId, amount, orderInfo) => {
    try {
      const response = await api.post('/payments/vnpay/create-payment-url', {
        orderId,
        amount,
        orderInfo,
      });
      return response.data;
    } catch (error) {
      console.error('Error creating VNPay payment URL:', error);
      throw error;
    }
  },

  // Xác thực kết quả thanh toán từ VNPay
  verifyVnpayReturn: async (vnpParams) => {
    try {
      const response = await api.post('/payments/vnpay/verify-return', vnpParams);
      return response.data;
    } catch (error) {
      console.error('Error verifying VNPay return:', error);
      throw error;
    }
  },

  // === Momo Payment Methods ===

  // Tạo URL thanh toán Momo
  createMomoPaymentUrl: async (orderId, amount, orderInfo) => {
    try {
      const response = await api.post('/payments/momo/create-payment-url', {
        orderId,
        amount,
        orderInfo,
      });
      return response.data;
    } catch (error) {
      console.error('Error creating Momo payment URL:', error);
      throw error;
    }
  },

  // Xác thực kết quả thanh toán từ Momo
  verifyMomoReturn: async (momoParams) => {
    try {
      const response = await api.post('/payments/momo/verify-return', momoParams);
      return response.data;
    } catch (error) {
      console.error('Error verifying Momo return:', error);
      throw error;
    }
  },

  // === Generic Payment Methods ===

  // Lấy lịch sử thanh toán của người dùng hiện tại
  getPaymentHistory: async () => {
    try {
      const response = await api.get('/payments/history');
      return response.data.data;
    } catch (error) {
      console.error('Error fetching payment history:', error);
      throw error;
    }
  },

  // Lấy chi tiết một giao dịch thanh toán
  getPaymentDetail: async (paymentId) => {
    try {
      const response = await api.get(`/payments/${paymentId}`);
      return response.data.data;
    } catch (error) {
      console.error('Error fetching payment detail:', error);
      throw error;
    }
  },

  // Hủy một giao dịch thanh toán
  cancelPayment: async (paymentId, reason) => {
    try {
      const response = await api.post(`/payments/${paymentId}/cancel`, { reason });
      return response.data.data;
    } catch (error) {
      console.error('Error canceling payment:', error);
      throw error;
    }
  },
};

export default paymentService;


--- File: src/services/productService.js ---
// client/src/services/productService.js
// File này chứa các dịch vụ và endpoints API liên quan đến sản phẩm và danh mục
// Vị trí: client/src/services/productService.js

import axios from 'axios';
import { api } from './api';

// API base URL
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';
const PRODUCTS_URL = `${API_URL}/products`;
const CATEGORIES_URL = `${API_URL}/categories`;

// Products API endpoints
export const productApi = api.injectEndpoints({
  endpoints: (builder) => ({
    getProducts: builder.query({
      query: (params) => ({
        url: '/products',
        params,
      }),
      providesTags: (result) =>
        result
          ? [
              ...result.products.map(({ id }) => ({ type: 'Product', id })),
              { type: 'Product', id: 'LIST' },
            ]
          : [{ type: 'Product', id: 'LIST' }],
    }),
    getProductById: builder.query({
      query: (id) => `/products/${id}`,
      providesTags: (result, error, id) => [{ type: 'Product', id }],
    }),
    getCategories: builder.query({
      query: () => '/categories',
      providesTags: [{ type: 'Category', id: 'LIST' }],
    }),
    getProductReviews: builder.query({
      query: (id) => `/products/${id}/reviews`,
      providesTags: (result, error, id) => [{ type: 'Review', id: `product-${id}` }],
    }),
    // Thêm mới các endpoints
    createProduct: builder.mutation({
      query: (productData) => ({
        url: '/products',
        method: 'POST',
        body: productData,
      }),
      invalidatesTags: [{ type: 'Product', id: 'LIST' }],
    }),
    updateProduct: builder.mutation({
      query: ({ id, ...productData }) => ({
        url: `/products/${id}`,
        method: 'PUT',
        body: productData,
      }),
      invalidatesTags: (result, error, { id }) => [{ type: 'Product', id }],
    }),
    deleteProduct: builder.mutation({
      query: (id) => ({
        url: `/products/${id}`,
        method: 'DELETE',
      }),
      invalidatesTags: (result, error, id) => [
        { type: 'Product', id },
        { type: 'Product', id: 'LIST' },
      ],
    }),
    addProductReview: builder.mutation({
      query: ({ productId, reviewData }) => ({
        url: `/products/${productId}/reviews`,
        method: 'POST',
        body: reviewData,
      }),
      invalidatesTags: (result, error, { productId }) => [
        { type: 'Review', id: `product-${productId}` },
        { type: 'Product', id: productId },
      ],
    }),
    getCategoryById: builder.query({
      query: (id) => `/categories/${id}`,
      providesTags: (result, error, id) => [{ type: 'Category', id }],
    }),
    createCategory: builder.mutation({
      query: (categoryData) => ({
        url: '/categories',
        method: 'POST',
        body: categoryData,
      }),
      invalidatesTags: [{ type: 'Category', id: 'LIST' }],
    }),
    updateCategory: builder.mutation({
      query: ({ id, ...categoryData }) => ({
        url: `/categories/${id}`,
        method: 'PUT',
        body: categoryData,
      }),
      invalidatesTags: (result, error, { id }) => [
        { type: 'Category', id },
        { type: 'Category', id: 'LIST' },
      ],
    }),
    deleteCategory: builder.mutation({
      query: (id) => ({
        url: `/categories/${id}`,
        method: 'DELETE',
      }),
      invalidatesTags: (result, error, id) => [
        { type: 'Category', id },
        { type: 'Category', id: 'LIST' },
      ],
    }),
    getProductsByCategory: builder.query({
      query: ({ categoryId, ...params }) => ({
        url: `/categories/${categoryId}/products`,
        params,
      }),
      providesTags: (result) =>
        result
          ? [
              ...result.products.map(({ id }) => ({ type: 'Product', id })),
              { type: 'Product', id: 'LIST' },
            ]
          : [{ type: 'Product', id: 'LIST' }],
    }),
    searchProducts: builder.query({
      query: ({ query, ...params }) => ({
        url: '/products/search',
        params: { q: query, ...params },
      }),
      providesTags: [{ type: 'Product', id: 'LIST' }],
    }),
  }),
});

// Export hooks
export const {
  useGetProductsQuery,
  useGetProductByIdQuery,
  useGetCategoriesQuery,
  useGetProductReviewsQuery,
  useCreateProductMutation,
  useUpdateProductMutation,
  useDeleteProductMutation,
  useAddProductReviewMutation,
  useGetCategoryByIdQuery,
  useCreateCategoryMutation,
  useUpdateCategoryMutation,
  useDeleteCategoryMutation,
  useGetProductsByCategoryQuery,
  useSearchProductsQuery,
} = productApi;

// Regular API service for use with Redux Thunk
const productService = {
  /**
   * Lấy danh sách sản phẩm
   * @param {Object} params - Tham số lọc và phân trang
   * @returns {Promise<Object>} Danh sách sản phẩm và thông tin phân trang
   */
  getProducts: async (params = {}) => {
    const response = await axios.get(PRODUCTS_URL, { params });
    return response.data;
  },

  /**
   * Lấy chi tiết sản phẩm theo ID
   * @param {string} id - ID sản phẩm
   * @returns {Promise<Object>} Thông tin chi tiết sản phẩm
   */
  getProductById: async (id) => {
    const response = await axios.get(`${PRODUCTS_URL}/${id}`);
    return response.data;
  },

  /**
   * Lấy sản phẩm theo danh mục
   * @param {string} categoryId - ID danh mục
   * @param {Object} params - Tham số lọc và phân trang
   * @returns {Promise<Object>} Danh sách sản phẩm và thông tin phân trang
   */
  getProductsByCategory: async (categoryId, params = {}) => {
    const response = await axios.get(`${CATEGORIES_URL}/${categoryId}/products`, { params });
    return response.data;
  },

  /**
   * Tìm kiếm sản phẩm
   * @param {string} query - Từ khóa tìm kiếm
   * @param {Object} params - Tham số lọc và phân trang
   * @returns {Promise<Object>} Kết quả tìm kiếm
   */
  searchProducts: async (query, params = {}) => {
    const response = await axios.get(`${PRODUCTS_URL}/search`, {
      params: {
        q: query,
        ...params,
      },
    });
    return response.data;
  },

  /**
   * Tạo sản phẩm mới
   * @param {Object} productData - Dữ liệu sản phẩm
   * @returns {Promise<Object>} Sản phẩm đã tạo
   */
  createProduct: async (productData) => {
    const response = await axios.post(PRODUCTS_URL, productData);
    return response.data;
  },

  /**
   * Cập nhật sản phẩm
   * @param {string} id - ID sản phẩm
   * @param {Object} productData - Dữ liệu cập nhật
   * @returns {Promise<Object>} Sản phẩm đã cập nhật
   */
  updateProduct: async (id, productData) => {
    const response = await axios.put(`${PRODUCTS_URL}/${id}`, productData);
    return response.data;
  },

  /**
   * Xóa sản phẩm
   * @param {string} id - ID sản phẩm
   * @returns {Promise<Object>} Kết quả xóa
   */
  deleteProduct: async (id) => {
    const response = await axios.delete(`${PRODUCTS_URL}/${id}`);
    return response.data;
  },

  /**
   * Thêm đánh giá cho sản phẩm
   * @param {string} productId - ID sản phẩm
   * @param {Object} reviewData - Dữ liệu đánh giá
   * @returns {Promise<Object>} Đánh giá đã tạo
   */
  addProductReview: async (productId, reviewData) => {
    const response = await axios.post(`${PRODUCTS_URL}/${productId}/reviews`, reviewData);
    return response.data;
  },

  /**
   * Lấy đánh giá của sản phẩm
   * @param {string} productId - ID sản phẩm
   * @returns {Promise<Array>} Danh sách đánh giá
   */
  getProductReviews: async (productId) => {
    const response = await axios.get(`${PRODUCTS_URL}/${productId}/reviews`);
    return response.data;
  },

  /**
   * Lấy danh sách danh mục
   * @returns {Promise<Array>} Danh sách danh mục
   */
  getCategories: async () => {
    const response = await axios.get(CATEGORIES_URL);
    return response.data;
  },

  /**
   * Lấy chi tiết danh mục theo ID
   * @param {string} id - ID danh mục
   * @returns {Promise<Object>} Thông tin chi tiết danh mục
   */
  getCategoryById: async (id) => {
    const response = await axios.get(`${CATEGORIES_URL}/${id}`);
    return response.data;
  },

  /**
   * Tạo danh mục mới
   * @param {Object} categoryData - Dữ liệu danh mục
   * @returns {Promise<Object>} Danh mục đã tạo
   */
  createCategory: async (categoryData) => {
    const response = await axios.post(CATEGORIES_URL, categoryData);
    return response.data;
  },

  /**
   * Cập nhật danh mục
   * @param {string} id - ID danh mục
   * @param {Object} categoryData - Dữ liệu cập nhật
   * @returns {Promise<Object>} Danh mục đã cập nhật
   */
  updateCategory: async (id, categoryData) => {
    const response = await axios.put(`${CATEGORIES_URL}/${id}`, categoryData);
    return response.data;
  },

  /**
   * Xóa danh mục
   * @param {string} id - ID danh mục
   * @returns {Promise<Object>} Kết quả xóa
   */
  deleteCategory: async (id) => {
    const response = await axios.delete(`${CATEGORIES_URL}/${id}`);
    return response.data;
  },
};

export default productService;
export { productService, API_URL, PRODUCTS_URL, CATEGORIES_URL };
// Đoạn mã này định nghĩa các dịch vụ và endpoints API liên quan đến sản phẩm và danh mục


--- File: src/services/reviewService.js ---
// src/services/reviewService.js
import api from './api';

export const reviewService = {
  // Lấy đánh giá của sản phẩm
  async getProductReviews(productId) {
    try {
      const response = await api.get(`/products/${productId}/reviews`);
      return response.data.data;
    } catch (error) {
      console.error(`Error fetching reviews for product ${productId}:`, error);
      throw error;
    }
  },

  // Tạo đánh giá mới
  async createReview(reviewData) {
    try {
      const response = await api.post(`/products/${reviewData.productId}/reviews`, reviewData);
      return response.data.data;
    } catch (error) {
      console.error('Error creating review:', error);
      throw error;
    }
  },

  // Lấy đánh giá của người dùng
  async getUserReviews() {
    try {
      const response = await api.get('/reviews/user');
      return response.data.data;
    } catch (error) {
      console.error('Error fetching user reviews:', error);
      throw error;
    }
  },

  // Cập nhật đánh giá
  async updateReview(reviewId, reviewData) {
    try {
      const response = await api.put(`/reviews/${reviewId}`, reviewData);
      return response.data.data;
    } catch (error) {
      console.error(`Error updating review ${reviewId}:`, error);
      throw error;
    }
  },

  // Xóa đánh giá
  async deleteReview(reviewId) {
    try {
      const response = await api.delete(`/reviews/${reviewId}`);
      return response.data.data;
    } catch (error) {
      console.error(`Error deleting review ${reviewId}:`, error);
      throw error;
    }
  },
};


--- File: src/services/userService.js ---
// services/userService.js
import api from './api';

/**
 * Service for user-related API calls
 */
const userService = {
  /**
   * Get current user profile
   * @returns {Promise<Object>} User profile data
   */
  async getCurrentUser() {
    try {
      const response = await api.get('/users/me');
      return response.data;
    } catch (error) {
      console.error('Error fetching user profile:', error);
      throw error;
    }
  },

  /**
   * Update user profile
   * @param {Object} userData - User data to update
   * @returns {Promise<Object>} Updated user data
   */
  async updateProfile(userData) {
    try {
      const response = await api.put('/users/me', userData);
      return response.data;
    } catch (error) {
      console.error('Error updating user profile:', error);
      throw error;
    }
  },

  /**
   * Change user password
   * @param {Object} passwordData - Contains current and new password
   * @returns {Promise<Object>} Success message
   */
  async changePassword(passwordData) {
    try {
      const response = await api.put('/users/change-password', passwordData);
      return response.data;
    } catch (error) {
      console.error('Error changing password:', error);
      throw error;
    }
  },

  /**
   * Get user order history
   * @param {Object} params - Query parameters for pagination/filtering
   * @returns {Promise<Array>} List of user orders
   */
  async getOrders(params = {}) {
    try {
      const response = await api.get('/users/orders', { params });
      return response.data;
    } catch (error) {
      console.error('Error fetching user orders:', error);
      throw error;
    }
  },

  /**
   * Get specific order details
   * @param {string} orderId - ID of the order
   * @returns {Promise<Object>} Order details
   */
  async getOrderDetails(orderId) {
    try {
      const response = await api.get(`/users/orders/${orderId}`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching order details for order ${orderId}:`, error);
      throw error;
    }
  },

  /**
   * Get user reviews
   * @param {Object} params - Query parameters for pagination/filtering
   * @returns {Promise<Array>} List of user reviews
   */
  async getReviews(params = {}) {
    try {
      const response = await api.get('/users/reviews', { params });
      return response.data;
    } catch (error) {
      console.error('Error fetching user reviews:', error);
      throw error;
    }
  },

  /**
   * Upload user avatar
   * @param {FormData} formData - Form data containing the avatar image
   * @returns {Promise<Object>} Updated user data with new avatar URL
   */
  async uploadAvatar(formData) {
    try {
      const response = await api.post('/users/avatar', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      return response.data;
    } catch (error) {
      console.error('Error uploading avatar:', error);
      throw error;
    }
  },

  /**
   * Get user shipping addresses
   * @returns {Promise<Array>} List of user addresses
   */
  async getAddresses() {
    try {
      const response = await api.get('/users/addresses');
      return response.data;
    } catch (error) {
      console.error('Error fetching addresses:', error);
      throw error;
    }
  },

  /**
   * Add new shipping address
   * @param {Object} addressData - Address information
   * @returns {Promise<Object>} Created address
   */
  async addAddress(addressData) {
    try {
      const response = await api.post('/users/addresses', addressData);
      return response.data;
    } catch (error) {
      console.error('Error adding address:', error);
      throw error;
    }
  },

  /**
   * Update existing shipping address
   * @param {string} addressId - ID of the address
   * @param {Object} addressData - Updated address information
   * @returns {Promise<Object>} Updated address
   */
  async updateAddress(addressId, addressData) {
    try {
      const response = await api.put(`/users/addresses/${addressId}`, addressData);
      return response.data;
    } catch (error) {
      console.error(`Error updating address ${addressId}:`, error);
      throw error;
    }
  },

  /**
   * Delete shipping address
   * @param {string} addressId - ID of the address
   * @returns {Promise<Object>} Success message
   */
  async deleteAddress(addressId) {
    try {
      const response = await api.delete(`/users/addresses/${addressId}`);
      return response.data;
    } catch (error) {
      console.error(`Error deleting address ${addressId}:`, error);
      throw error;
    }
  },
};

export default userService;


--- File: src/services/wishlistService.js ---
// services/wishlistService.js
import api from './api';

/**
 * Service for wishlist-related API calls
 */
const wishlistService = {
  /**
   * Get all wishlist items
   * @returns {Promise<Array>} List of wishlist items
   */
  async getWishlist() {
    try {
      const response = await api.get('/wishlist');
      return response.data;
    } catch (error) {
      console.error('Error fetching wishlist:', error);
      throw error;
    }
  },

  /**
   * Add product to wishlist
   * @param {string} productId - Product ID to add to wishlist
   * @returns {Promise<Object>} Added wishlist item or success message
   */
  async addToWishlist(productId) {
    try {
      const response = await api.post('/wishlist', { productId });
      return response.data;
    } catch (error) {
      console.error('Error adding to wishlist:', error);
      throw error;
    }
  },

  /**
   * Remove product from wishlist
   * @param {string} productId - Product ID to remove from wishlist
   * @returns {Promise<Object>} Success message
   */
  async removeFromWishlist(productId) {
    try {
      const response = await api.delete(`/wishlist/${productId}`);
      return response.data;
    } catch (error) {
      console.error('Error removing from wishlist:', error);
      throw error;
    }
  },

  /**
   * Check if product is in wishlist
   * @param {string} productId - Product ID to check
   * @returns {Promise<boolean>} True if product is in wishlist
   */
  async checkInWishlist(productId) {
    try {
      const response = await api.get(`/wishlist/check/${productId}`);
      return response.data.inWishlist;
    } catch (error) {
      console.error('Error checking wishlist status:', error);
      throw error;
    }
  },

  /**
   * Clear entire wishlist
   * @returns {Promise<Object>} Success message
   */
  async clearWishlist() {
    try {
      const response = await api.delete('/wishlist');
      return response.data;
    } catch (error) {
      console.error('Error clearing wishlist:', error);
      throw error;
    }
  },

  /**
   * Move all wishlist items to cart
   * @returns {Promise<Object>} Success message and cart information
   */
  async moveAllToCart() {
    try {
      const response = await api.post('/wishlist/move-to-cart');
      return response.data;
    } catch (error) {
      console.error('Error moving wishlist to cart:', error);
      throw error;
    }
  },

  /**
   * Move a single wishlist item to cart
   * @param {string} productId - Product ID to move to cart
   * @returns {Promise<Object>} Success message and cart information
   */
  async moveToCart(productId) {
    try {
      const response = await api.post(`/wishlist/move-to-cart/${productId}`);
      return response.data;
    } catch (error) {
      console.error('Error moving item to cart:', error);
      throw error;
    }
  },
};

export default wishlistService;


--- File: src/store/hooks.js ---
import { useDispatch, useSelector } from 'react-redux';

// Sử dụng hooks này thay vì useDispatch và useSelector thông thường
export const useAppDispatch = () => useDispatch();
export const useAppSelector = useSelector;


--- File: src/store/index.js ---
import { configureStore } from '@reduxjs/toolkit';
import { setupListeners } from '@reduxjs/toolkit/query';
import authReducer, { authMiddleware } from './slices/authSlice';
import cartReducer from './slices/cartSlice';
import productReducer from './slices/productSlice';
import uiReducer, { uiMiddleware } from './slices/uiSlice';
import orderReducer from './slices/orderSlice';
import reviewReducer from './slices/reviewSlice';
import checkoutReducer from './slices/checkoutSlice';
import userReducer from './slices/userSlice';
import wishlistReducer from './slices/wishlistSlice';
import notificationReducer from './slices/notificationSlice';
import { api } from '../services/api';

// Hàm tiện ích để thao tác với localStorage an toàn
const safeLocalStorage = {
  getItem: (key, defaultValue = null) => {
    try {
      const value = localStorage.getItem(key);
      return value !== null ? value : defaultValue;
    } catch (error) {
      console.error(`Lỗi khi đọc ${key} từ localStorage:`, error);
      return defaultValue;
    }
  },
  setItem: (key, value) => {
    try {
      localStorage.setItem(key, value);
      return true;
    } catch (error) {
      console.error(`Lỗi khi lưu ${key} vào localStorage:`, error);
      return false;
    }
  },
  removeItem: (key) => {
    try {
      localStorage.removeItem(key);
      return true;
    } catch (error) {
      console.error(`Lỗi khi xóa ${key} từ localStorage:`, error);
      return false;
    }
  },
};

// Middleware tùy chỉnh để ghi log các actions (chỉ trong môi trường development)
const loggerMiddleware = (store) => (next) => (action) => {
  if (process.env.NODE_ENV !== 'production') {
    console.group(action.type);
    console.info('dispatching', action);
    const result = next(action);
    console.log('next state', store.getState());
    console.groupEnd();
    return result;
  }
  return next(action);
};

// Middleware để lưu state vào localStorage - đã cải tiến với xử lý lỗi
const persistStateMiddleware = (store) => (next) => (action) => {
  const result = next(action);
  try {
    const stateToPersist = {
      cart: store.getState().cart,
      auth: {
        isAuthenticated: store.getState().auth.isAuthenticated,
        user: store.getState().auth.user,
      },
      wishlist: store.getState().wishlist,
    };
    safeLocalStorage.setItem('reduxState', JSON.stringify(stateToPersist));
  } catch (error) {
    console.error('Lỗi khi lưu state vào localStorage:', error);
  }
  return result;
};

// Lấy state từ localStorage khi khởi động - đã cải tiến với safeLocalStorage
const loadState = () => {
  try {
    const serializedState = safeLocalStorage.getItem('reduxState');
    if (serializedState === null) {
      return undefined;
    }
    return JSON.parse(serializedState);
  } catch (err) {
    console.error('Không thể load state từ localStorage:', err);
    return undefined;
  }
};

const preloadedState = loadState();

export const store = configureStore({
  reducer: {
    auth: authReducer,
    cart: cartReducer,
    product: productReducer,
    ui: uiReducer,
    order: orderReducer,
    review: reviewReducer,
    checkout: checkoutReducer,
    user: userReducer,
    wishlist: wishlistReducer,
    notification: notificationReducer,
    [api.reducerPath]: api.reducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        // Bỏ qua các actions và paths không serializable
        ignoredActions: [
          'checkout/createOrder/fulfilled',
          'auth/login/fulfilled',
          'auth/register/fulfilled',
        ],
        ignoredPaths: ['checkout.paymentUrl', 'auth.user.token', 'ui.modalContent'],
      },
    }).concat(
      api.middleware,
      loggerMiddleware,
      persistStateMiddleware,
      uiMiddleware, // Thêm middleware cho UI
      authMiddleware // Thêm middleware cho Auth
    ),
  preloadedState,
  devTools: process.env.NODE_ENV !== 'production',
});

// Áp dụng theme ban đầu khi ứng dụng khởi động
const initialTheme = store.getState().ui.theme;
if (initialTheme) {
  document.documentElement.classList.add(initialTheme);
}

// Cấu hình listeners cho RTK Query
setupListeners(store.dispatch);

// Hàm tiện ích để dispatch nhiều actions cùng lúc
export const batchDispatch = (actions) => {
  actions.forEach((action) => store.dispatch(action));
};

// Hàm tiện ích để reset toàn bộ state (ví dụ: khi logout)
export const resetStore = () => {
  // Danh sách các actions để reset từng phần của state
  const resetActions = [
    { type: 'auth/logout' },
    { type: 'cart/clearCart' },
    { type: 'ui/resetUI' },
    { type: 'wishlist/clearWishlist' },
    { type: 'notification/clearAll' },
  ];

  batchDispatch(resetActions);
  safeLocalStorage.removeItem('reduxState');
};

// Hooks typing
export * from './hooks';


--- File: src/store/slices/adminSlice.js ---
// src/store/slices/adminSlice.js
// File này nằm trong thư mục src/store/slices của dự án React Redux

import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import adminService from '../../services/adminService';

// Async thunk actions
export const fetchDashboardStats = createAsyncThunk(
  'admin/fetchDashboardStats',
  async (_, { rejectWithValue }) => {
    try {
      return await adminService.getDashboardStats();
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Lỗi khi lấy thống kê dashboard');
    }
  }
);

export const fetchRecentOrders = createAsyncThunk(
  'admin/fetchRecentOrders',
  async (_, { rejectWithValue }) => {
    try {
      return await adminService.getRecentOrders();
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Lỗi khi lấy đơn hàng gần đây');
    }
  }
);

export const fetchSalesData = createAsyncThunk(
  'admin/fetchSalesData',
  async (period, { rejectWithValue }) => {
    try {
      return await adminService.getSalesData(period);
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Lỗi khi lấy dữ liệu doanh thu');
    }
  }
);

// Thêm thunk action quản lý sản phẩm
export const fetchProducts = createAsyncThunk(
  'admin/fetchProducts',
  async ({ page = 1, limit = 10, search = '' }, { rejectWithValue }) => {
    try {
      return await adminService.getProducts(page, limit, search);
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Lỗi khi lấy danh sách sản phẩm');
    }
  }
);

export const createProduct = createAsyncThunk(
  'admin/createProduct',
  async (productData, { rejectWithValue, dispatch }) => {
    try {
      const response = await adminService.createProduct(productData);
      // Sau khi tạo sản phẩm thành công, cập nhật lại danh sách
      dispatch(fetchProducts({ page: 1 }));
      return response;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Lỗi khi tạo sản phẩm mới');
    }
  }
);

export const updateProduct = createAsyncThunk(
  'admin/updateProduct',
  async ({ id, productData }, { rejectWithValue, dispatch, getState }) => {
    try {
      const response = await adminService.updateProduct(id, productData);
      // Sau khi cập nhật sản phẩm thành công, cập nhật lại danh sách
      const { currentPage } = getState().admin;
      dispatch(fetchProducts({ page: currentPage }));
      return response;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Lỗi khi cập nhật sản phẩm');
    }
  }
);

export const deleteProduct = createAsyncThunk(
  'admin/deleteProduct',
  async (id, { rejectWithValue, dispatch, getState }) => {
    try {
      const response = await adminService.deleteProduct(id);
      // Sau khi xóa sản phẩm thành công, cập nhật lại danh sách
      const { currentPage } = getState().admin;
      dispatch(fetchProducts({ page: currentPage }));
      return response;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Lỗi khi xóa sản phẩm');
    }
  }
);

// Thêm thunk action quản lý đơn hàng
export const fetchOrders = createAsyncThunk(
  'admin/fetchOrders',
  async ({ page = 1, limit = 10, status = '' }, { rejectWithValue }) => {
    try {
      return await adminService.getOrders(page, limit, status);
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Lỗi khi lấy danh sách đơn hàng');
    }
  }
);

export const updateOrderStatus = createAsyncThunk(
  'admin/updateOrderStatus',
  async ({ id, status }, { rejectWithValue, dispatch, getState }) => {
    try {
      const response = await adminService.updateOrderStatus(id, status);
      // Sau khi cập nhật trạng thái đơn hàng, cập nhật lại danh sách
      const { currentPage } = getState().admin;
      dispatch(fetchOrders({ page: currentPage }));
      return response;
    } catch (error) {
      return rejectWithValue(
        error.response?.data?.message || 'Lỗi khi cập nhật trạng thái đơn hàng'
      );
    }
  }
);

// Thêm thunk action quản lý người dùng
export const fetchUsers = createAsyncThunk(
  'admin/fetchUsers',
  async ({ page = 1, limit = 10, search = '' }, { rejectWithValue }) => {
    try {
      return await adminService.getUsers(page, limit, search);
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Lỗi khi lấy danh sách người dùng');
    }
  }
);

export const updateUserStatus = createAsyncThunk(
  'admin/updateUserStatus',
  async ({ id, status }, { rejectWithValue, dispatch, getState }) => {
    try {
      const response = await adminService.updateUserStatus(id, status);
      // Sau khi cập nhật trạng thái người dùng, cập nhật lại danh sách
      const { currentPage } = getState().admin;
      dispatch(fetchUsers({ page: currentPage }));
      return response;
    } catch (error) {
      return rejectWithValue(
        error.response?.data?.message || 'Lỗi khi cập nhật trạng thái người dùng'
      );
    }
  }
);

const initialState = {
  stats: null,
  recentOrders: [],
  salesData: [],
  productList: [],
  orderList: [],
  userList: [],
  totalPages: 1,
  currentPage: 1,
  isLoading: false,
  isLoadingSales: false,
  isLoadingProducts: false,
  isLoadingOrders: false,
  isLoadingUsers: false,
  error: null,
};

const adminSlice = createSlice({
  name: 'admin',
  initialState,
  reducers: {
    setCurrentPage: (state, action) => {
      state.currentPage = action.payload;
    },
    clearError: (state) => {
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // Dashboard Stats
      .addCase(fetchDashboardStats.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(fetchDashboardStats.fulfilled, (state, action) => {
        state.isLoading = false;
        state.stats = action.payload;
      })
      .addCase(fetchDashboardStats.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload;
      })

      // Recent Orders
      .addCase(fetchRecentOrders.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(fetchRecentOrders.fulfilled, (state, action) => {
        state.isLoading = false;
        state.recentOrders = action.payload;
      })
      .addCase(fetchRecentOrders.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload;
      })

      // Sales Data
      .addCase(fetchSalesData.pending, (state) => {
        state.isLoadingSales = true;
      })
      .addCase(fetchSalesData.fulfilled, (state, action) => {
        state.isLoadingSales = false;
        state.salesData = action.payload;
      })
      .addCase(fetchSalesData.rejected, (state, action) => {
        state.isLoadingSales = false;
        state.error = action.payload;
      })

      // Products
      .addCase(fetchProducts.pending, (state) => {
        state.isLoadingProducts = true;
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.isLoadingProducts = false;
        state.productList = action.payload.products;
        state.totalPages = action.payload.totalPages;
      })
      .addCase(fetchProducts.rejected, (state, action) => {
        state.isLoadingProducts = false;
        state.error = action.payload;
      })

      // Không cần thêm case cho createProduct, updateProduct, deleteProduct
      // vì chúng đã dispatch fetchProducts để cập nhật lại danh sách

      // Orders
      .addCase(fetchOrders.pending, (state) => {
        state.isLoadingOrders = true;
      })
      .addCase(fetchOrders.fulfilled, (state, action) => {
        state.isLoadingOrders = false;
        state.orderList = action.payload.orders;
        state.totalPages = action.payload.totalPages;
      })
      .addCase(fetchOrders.rejected, (state, action) => {
        state.isLoadingOrders = false;
        state.error = action.payload;
      })

      // Users
      .addCase(fetchUsers.pending, (state) => {
        state.isLoadingUsers = true;
      })
      .addCase(fetchUsers.fulfilled, (state, action) => {
        state.isLoadingUsers = false;
        state.userList = action.payload.users;
        state.totalPages = action.payload.totalPages;
      })
      .addCase(fetchUsers.rejected, (state, action) => {
        state.isLoadingUsers = false;
        state.error = action.payload;
      });
  },
});

export const { setCurrentPage, clearError } = adminSlice.actions;

export default adminSlice.reducer;


--- File: src/store/slices/authSlice.js ---
// client/src/store/slices/authSlice.js
// File này chứa Redux slice cho việc quản lý xác thực người dùng
// Vị trí: client/src/store/slices/authSlice.js

import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import authService from '../../services/authService';
import {
  setAuthToken,
  removeAuthToken,
  setRefreshToken,
  removeRefreshToken,
  refreshToken as refreshAuthToken,
} from '../../utils/authToken';

// Hàm tiện ích để thao tác với localStorage an toàn
const safeLocalStorage = {
  getItem: (key, defaultValue = null) => {
    try {
      const value = localStorage.getItem(key);
      return value !== null ? value : defaultValue;
    } catch (error) {
      console.error(`Lỗi khi đọc ${key} từ localStorage:`, error);
      return defaultValue;
    }
  },
  setItem: (key, value) => {
    try {
      localStorage.setItem(key, value);
      return true;
    } catch (error) {
      console.error(`Lỗi khi lưu ${key} vào localStorage:`, error);
      return false;
    }
  },
  removeItem: (key) => {
    try {
      localStorage.removeItem(key);
      return true;
    } catch (error) {
      console.error(`Lỗi khi xóa ${key} từ localStorage:`, error);
      return false;
    }
  },
};

// Async thunks
export const login = createAsyncThunk('auth/login', async (credentials, { rejectWithValue }) => {
  try {
    const response = await authService.login(credentials);
    return response.data;
  } catch (error) {
    return rejectWithValue(error.response?.data?.message || 'Đăng nhập thất bại');
  }
});

export const register = createAsyncThunk('auth/register', async (userData, { rejectWithValue }) => {
  try {
    const response = await authService.register(userData);
    return response.data;
  } catch (error) {
    return rejectWithValue(error.response?.data?.message || 'Đăng ký thất bại');
  }
});

export const fetchCurrentUser = createAsyncThunk(
  'auth/fetchCurrentUser',
  async (_, { rejectWithValue, dispatch }) => {
    try {
      const response = await authService.getCurrentUser();
      return response.data;
    } catch (error) {
      // Nếu lỗi 401 và có refresh token, thử refresh token
      if (error.response?.status === 401 && safeLocalStorage.getItem('refresh_token')) {
        try {
          await refreshAuthToken();
          // Thử lại yêu cầu ban đầu
          const retryResponse = await authService.getCurrentUser();
          return retryResponse.data;
        } catch (refreshError) {
          // Nếu refresh token thất bại, đăng xuất người dùng
          dispatch(logout());
          return rejectWithValue('Phiên đăng nhập hết hạn, vui lòng đăng nhập lại');
        }
      }
      return rejectWithValue(error.response?.data?.message || 'Không thể lấy thông tin người dùng');
    }
  }
);

export const forgotPassword = createAsyncThunk(
  'auth/forgotPassword',
  async (email, { rejectWithValue }) => {
    try {
      const response = await authService.forgotPassword(email);
      return response.data;
    } catch (error) {
      return rejectWithValue(
        error.response?.data?.message || 'Không thể gửi yêu cầu đặt lại mật khẩu'
      );
    }
  }
);

export const resetPassword = createAsyncThunk(
  'auth/resetPassword',
  async ({ token, password }, { rejectWithValue }) => {
    try {
      const response = await authService.resetPassword(token, password);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể đặt lại mật khẩu');
    }
  }
);

export const updateProfile = createAsyncThunk(
  'auth/updateProfile',
  async (userData, { rejectWithValue }) => {
    try {
      const response = await authService.updateProfile(userData);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể cập nhật thông tin');
    }
  }
);

export const changePassword = createAsyncThunk(
  'auth/changePassword',
  async (passwordData, { rejectWithValue }) => {
    try {
      const response = await authService.changePassword(passwordData);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể đổi mật khẩu');
    }
  }
);

export const refreshUserToken = createAsyncThunk(
  'auth/refreshToken',
  async (_, { rejectWithValue }) => {
    try {
      const newToken = await refreshAuthToken();
      return { token: newToken };
    } catch (error) {
      return rejectWithValue('Không thể làm mới token');
    }
  }
);

// Initial state
const initialState = {
  user: null,
  token: safeLocalStorage.getItem('token'),
  refreshToken: safeLocalStorage.getItem('refresh_token'),
  isAuthenticated: !!safeLocalStorage.getItem('token'),
  loading: false,
  error: null,
  successMessage: null,
  passwordResetRequested: false,
  passwordResetSuccess: false,
  profileUpdateSuccess: false,
  passwordChangeSuccess: false,
};

// Slice
const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    logout: (state) => {
      state.user = null;
      state.token = null;
      state.refreshToken = null;
      state.isAuthenticated = false;
      state.successMessage = null;
      // Không thao tác với localStorage và removeAuthToken ở đây nữa
    },
    clearError: (state) => {
      state.error = null;
    },
    clearSuccess: (state) => {
      state.successMessage = null;
      state.passwordResetRequested = false;
      state.passwordResetSuccess = false;
      state.profileUpdateSuccess = false;
      state.passwordChangeSuccess = false;
    },
    setUser: (state, action) => {
      state.user = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      // Login
      .addCase(login.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(login.fulfilled, (state, action) => {
        state.loading = false;
        state.isAuthenticated = true;
        state.user = action.payload.user;
        state.token = action.payload.token;
        state.refreshToken = action.payload.refreshToken;
        state.successMessage = 'Đăng nhập thành công';
      })
      .addCase(login.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // Register
      .addCase(register.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(register.fulfilled, (state, action) => {
        state.loading = false;
        state.isAuthenticated = true;
        state.user = action.payload.user;
        state.token = action.payload.token;
        state.refreshToken = action.payload.refreshToken;
        state.successMessage = 'Đăng ký thành công';
      })
      .addCase(register.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // Fetch current user
      .addCase(fetchCurrentUser.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchCurrentUser.fulfilled, (state, action) => {
        state.loading = false;
        state.user = action.payload;
      })
      .addCase(fetchCurrentUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
        // Nếu token không hợp lệ, đăng xuất người dùng được xử lý trong thunk
      })

      // Forgot password
      .addCase(forgotPassword.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.passwordResetRequested = false;
      })
      .addCase(forgotPassword.fulfilled, (state) => {
        state.loading = false;
        state.passwordResetRequested = true;
        state.successMessage = 'Yêu cầu đặt lại mật khẩu đã được gửi đến email của bạn';
      })
      .addCase(forgotPassword.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // Reset password
      .addCase(resetPassword.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.passwordResetSuccess = false;
      })
      .addCase(resetPassword.fulfilled, (state) => {
        state.loading = false;
        state.passwordResetSuccess = true;
        state.successMessage = 'Mật khẩu đã được đặt lại thành công';
      })
      .addCase(resetPassword.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // Update profile
      .addCase(updateProfile.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.profileUpdateSuccess = false;
      })
      .addCase(updateProfile.fulfilled, (state, action) => {
        state.loading = false;
        state.user = action.payload;
        state.profileUpdateSuccess = true;
        state.successMessage = 'Cập nhật thông tin thành công';
      })
      .addCase(updateProfile.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // Change password
      .addCase(changePassword.pending, (state) => {
        state.loading = true;
        state.error = null;
        state.passwordChangeSuccess = false;
      })
      .addCase(changePassword.fulfilled, (state) => {
        state.loading = false;
        state.passwordChangeSuccess = true;
        state.successMessage = 'Đổi mật khẩu thành công';
      })
      .addCase(changePassword.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // Refresh token
      .addCase(refreshUserToken.fulfilled, (state, action) => {
        state.token = action.payload.token;
        if (action.payload.refreshToken) {
          state.refreshToken = action.payload.refreshToken;
        }
      })
      .addCase(refreshUserToken.rejected, (state) => {
        // Nếu refresh token thất bại, đăng xuất người dùng
        state.user = null;
        state.token = null;
        state.refreshToken = null;
        state.isAuthenticated = false;
      });
  },
});

// Actions
export const { logout, clearError, clearSuccess, setUser } = authSlice.actions;

// Selectors
export const selectAuth = (state) => state.auth;
export const selectIsAuthenticated = (state) => state.auth.isAuthenticated;
export const selectUser = (state) => state.auth.user;
export const selectAuthLoading = (state) => state.auth.loading;
export const selectAuthError = (state) => state.auth.error;
export const selectAuthSuccess = (state) => state.auth.successMessage;
export const selectPasswordResetRequested = (state) => state.auth.passwordResetRequested;
export const selectPasswordResetSuccess = (state) => state.auth.passwordResetSuccess;
export const selectProfileUpdateSuccess = (state) => state.auth.profileUpdateSuccess;
export const selectPasswordChangeSuccess = (state) => state.auth.passwordChangeSuccess;
export const selectUserRole = (state) => state.auth.user?.role || 'guest';
export const selectUserPermissions = (state) => state.auth.user?.permissions || [];
export const selectIsAdmin = (state) => state.auth.user?.role === 'admin';

// Middleware để xử lý side effects (như localStorage và authToken)
export const authMiddleware = (store) => (next) => (action) => {
  // Xử lý trước khi action được dispatch
  const result = next(action);

  // Xử lý sau khi action đã được dispatch
  if (login.fulfilled.match(action) || register.fulfilled.match(action)) {
    // Lưu token vào localStorage và thiết lập header cho axios
    safeLocalStorage.setItem('token', action.payload.token);
    setAuthToken(action.payload.token);

    // Lưu refresh token nếu có
    if (action.payload.refreshToken) {
      safeLocalStorage.setItem('refresh_token', action.payload.refreshToken);
      setRefreshToken(action.payload.refreshToken);
    }
  } else if (refreshUserToken.fulfilled.match(action)) {
    // Cập nhật token mới
    safeLocalStorage.setItem('token', action.payload.token);
    setAuthToken(action.payload.token);

    // Cập nhật refresh token nếu có
    if (action.payload.refreshToken) {
      safeLocalStorage.setItem('refresh_token', action.payload.refreshToken);
      setRefreshToken(action.payload.refreshToken);
    }
  } else if (
    logout.match(action) ||
    refreshUserToken.rejected.match(action) ||
    (fetchCurrentUser.rejected.match(action) &&
      (action.payload === 'Unauthorized' ||
        action.payload === 'Invalid token' ||
        action.payload === 'Phiên đăng nhập hết hạn, vui lòng đăng nhập lại'))
  ) {
    // Xóa token khỏi localStorage và header
    safeLocalStorage.removeItem('token');
    safeLocalStorage.removeItem('refresh_token');
    removeAuthToken();
    removeRefreshToken();
  }

  return result;
};

// Reducer
export default authSlice.reducer;


--- File: src/store/slices/cartSlice.js ---
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { cartService } from '../../services/cartService';

// Async thunks
export const fetchCart = createAsyncThunk('cart/fetchCart', async (_, { rejectWithValue }) => {
  try {
    return await cartService.getCart();
  } catch (error) {
    return rejectWithValue(error.message);
  }
});

export const addToCartAsync = createAsyncThunk(
  'cart/addToCartAsync',
  async ({ productId, quantity }, { rejectWithValue }) => {
    try {
      return await cartService.addToCart(productId, quantity);
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

export const updateCartItemAsync = createAsyncThunk(
  'cart/updateCartItemAsync',
  async ({ productId, quantity }, { rejectWithValue }) => {
    try {
      return await cartService.updateCartItem(productId, quantity);
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

export const removeFromCartAsync = createAsyncThunk(
  'cart/removeFromCartAsync',
  async (productId, { rejectWithValue }) => {
    try {
      return await cartService.removeFromCart(productId);
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

export const clearCartAsync = createAsyncThunk(
  'cart/clearCartAsync',
  async (_, { rejectWithValue }) => {
    try {
      return await cartService.clearCart();
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

// Helper functions
const calculateTotals = (items) => {
  return items.reduce(
    (totals, item) => {
      const itemTotal = item.product.price * item.quantity;
      return {
        itemsCount: totals.itemsCount + item.quantity,
        subtotal: totals.subtotal + itemTotal,
      };
    },
    { itemsCount: 0, subtotal: 0 }
  );
};

// Initial state
const initialState = {
  items: [],
  itemsCount: 0,
  subtotal: 0,
  loading: false,
  error: null,
};

// Slice
const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    // Local cart actions (for guest users)
    addToCart: (state, action) => {
      const { product, quantity = 1 } = action.payload;

      // Check if product already exists in cart
      const existingItem = state.items.find((item) => item.product.id === product.id);

      if (existingItem) {
        // Update quantity if product already exists
        existingItem.quantity += quantity;
      } else {
        // Add new item to cart
        state.items.push({
          product,
          quantity,
        });
      }

      // Update totals
      const { itemsCount, subtotal } = calculateTotals(state.items);
      state.itemsCount = itemsCount;
      state.subtotal = subtotal;
    },

    updateCartItem: (state, action) => {
      const { productId, quantity } = action.payload;

      // Find item in cart
      const item = state.items.find((item) => item.product.id === productId);

      if (item) {
        // Update quantity
        item.quantity = quantity;

        // Update totals
        const { itemsCount, subtotal } = calculateTotals(state.items);
        state.itemsCount = itemsCount;
        state.subtotal = subtotal;
      }
    },

    removeFromCart: (state, action) => {
      const productId = action.payload;

      // Remove item from cart
      state.items = state.items.filter((item) => item.product.id !== productId);

      // Update totals
      const { itemsCount, subtotal } = calculateTotals(state.items);
      state.itemsCount = itemsCount;
      state.subtotal = subtotal;
    },

    clearCart: (state) => {
      // Reset cart
      state.items = [];
      state.itemsCount = 0;
      state.subtotal = 0;
    },
  },
  extraReducers: (builder) => {
    builder
      // Handle fetchCart
      .addCase(fetchCart.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchCart.fulfilled, (state, action) => {
        state.loading = false;
        state.items = action.payload.items;

        // Calculate totals
        const { itemsCount, subtotal } = calculateTotals(action.payload.items);
        state.itemsCount = itemsCount;
        state.subtotal = subtotal;
      })
      .addCase(fetchCart.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });

    // Handle other async actions with similar patterns
    // ...
  },
});

// Export actions and reducer
export const { addToCart, updateCartItem, removeFromCart, clearCart } = cartSlice.actions;
export default cartSlice.reducer;


--- File: src/store/slices/notificationSlice.js ---
// src/store/slices/notificationSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import notificationService from '../../services/notificationService';

// Async thunk để lấy danh sách thông báo
export const fetchNotifications = createAsyncThunk(
  'notification/fetchNotifications',
  async (_, { rejectWithValue }) => {
    try {
      const notifications = await notificationService.getNotifications();
      return notifications;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể lấy thông báo');
    }
  }
);

// Async thunk để đánh dấu thông báo đã đọc
export const markAsRead = createAsyncThunk(
  'notification/markAsRead',
  async (notificationId, { rejectWithValue }) => {
    try {
      await notificationService.markAsRead(notificationId);
      return notificationId;
    } catch (error) {
      return rejectWithValue(
        error.response?.data?.message || 'Không thể đánh dấu thông báo đã đọc'
      );
    }
  }
);

// Async thunk để đánh dấu tất cả thông báo đã đọc
export const markAllAsRead = createAsyncThunk(
  'notification/markAllAsRead',
  async (_, { rejectWithValue }) => {
    try {
      await notificationService.markAllAsRead();
      return true;
    } catch (error) {
      return rejectWithValue(
        error.response?.data?.message || 'Không thể đánh dấu tất cả thông báo đã đọc'
      );
    }
  }
);

// Async thunk để xóa thông báo
export const deleteNotification = createAsyncThunk(
  'notification/deleteNotification',
  async (notificationId, { rejectWithValue }) => {
    try {
      await notificationService.deleteNotification(notificationId);
      return notificationId;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể xóa thông báo');
    }
  }
);

// Async thunk để xóa tất cả thông báo
export const deleteAllNotifications = createAsyncThunk(
  'notification/deleteAllNotifications',
  async (_, { rejectWithValue }) => {
    try {
      await notificationService.deleteAllNotifications();
      return true;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể xóa tất cả thông báo');
    }
  }
);

// Initial state
const initialState = {
  notifications: [],
  unreadCount: 0,
  loading: false,
  error: null,
  operationInProgress: false,
};

// Notification slice
const notificationSlice = createSlice({
  name: 'notification',
  initialState,
  reducers: {
    // Thêm thông báo mới (cho realtime notifications)
    addNewNotification: (state, action) => {
      state.notifications.unshift(action.payload);
      state.unreadCount += 1;
    },
    // Reset trạng thái lỗi
    resetNotificationError: (state) => {
      state.error = null;
    },
    // Clear notifications khi logout
    clearNotifications: (state) => {
      state.notifications = [];
      state.unreadCount = 0;
      state.loading = false;
      state.error = null;
      state.operationInProgress = false;
    },
  },
  extraReducers: (builder) => {
    builder
      // fetchNotifications
      .addCase(fetchNotifications.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchNotifications.fulfilled, (state, action) => {
        state.loading = false;
        state.notifications = action.payload.notifications;
        state.unreadCount = action.payload.unreadCount;
      })
      .addCase(fetchNotifications.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'Đã xảy ra lỗi khi lấy thông báo';
      })

      // markAsRead
      .addCase(markAsRead.pending, (state) => {
        state.operationInProgress = true;
      })
      .addCase(markAsRead.fulfilled, (state, action) => {
        state.operationInProgress = false;
        const notification = state.notifications.find((item) => item._id === action.payload);
        if (notification && !notification.isRead) {
          notification.isRead = true;
          state.unreadCount = Math.max(0, state.unreadCount - 1);
        }
      })
      .addCase(markAsRead.rejected, (state, action) => {
        state.operationInProgress = false;
        state.error = action.payload || 'Đã xảy ra lỗi khi đánh dấu thông báo đã đọc';
      })

      // markAllAsRead
      .addCase(markAllAsRead.pending, (state) => {
        state.operationInProgress = true;
      })
      .addCase(markAllAsRead.fulfilled, (state) => {
        state.operationInProgress = false;
        state.notifications.forEach((notification) => {
          notification.isRead = true;
        });
        state.unreadCount = 0;
      })
      .addCase(markAllAsRead.rejected, (state, action) => {
        state.operationInProgress = false;
        state.error = action.payload || 'Đã xảy ra lỗi khi đánh dấu tất cả thông báo đã đọc';
      })

      // deleteNotification
      .addCase(deleteNotification.pending, (state) => {
        state.operationInProgress = true;
      })
      .addCase(deleteNotification.fulfilled, (state, action) => {
        state.operationInProgress = false;
        const deletedNotification = state.notifications.find((item) => item._id === action.payload);
        if (deletedNotification && !deletedNotification.isRead) {
          state.unreadCount = Math.max(0, state.unreadCount - 1);
        }
        state.notifications = state.notifications.filter((item) => item._id !== action.payload);
      })
      .addCase(deleteNotification.rejected, (state, action) => {
        state.operationInProgress = false;
        state.error = action.payload || 'Đã xảy ra lỗi khi xóa thông báo';
      })

      // deleteAllNotifications
      .addCase(deleteAllNotifications.pending, (state) => {
        state.operationInProgress = true;
      })
      .addCase(deleteAllNotifications.fulfilled, (state) => {
        state.operationInProgress = false;
        state.notifications = [];
        state.unreadCount = 0;
      })
      .addCase(deleteAllNotifications.rejected, (state, action) => {
        state.operationInProgress = false;
        state.error = action.payload || 'Đã xảy ra lỗi khi xóa tất cả thông báo';
      });
  },
});

// Export actions
export const { addNewNotification, resetNotificationError, clearNotifications } =
  notificationSlice.actions;

// Export reducer
export default notificationSlice.reducer;


--- File: src/store/slices/orderSlice.js ---
// src/store/slices/orderSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { orderService } from '../../services/orderService';

export const fetchUserOrders = createAsyncThunk(
  'order/fetchUserOrders',
  async (_, { rejectWithValue }) => {
    try {
      const orders = await orderService.getUserOrders();
      return orders;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể lấy danh sách đơn hàng');
    }
  }
);

export const fetchOrderDetail = createAsyncThunk(
  'order/fetchOrderDetail',
  async (orderId, { rejectWithValue }) => {
    try {
      const order = await orderService.getOrderById(orderId);
      return order;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể lấy thông tin đơn hàng');
    }
  }
);

const initialState = {
  orders: [],
  currentOrder: null,
  loading: false,
  error: null,
};

const orderSlice = createSlice({
  name: 'order',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      // fetchUserOrders
      .addCase(fetchUserOrders.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchUserOrders.fulfilled, (state, action) => {
        state.loading = false;
        state.orders = action.payload;
      })
      .addCase(fetchUserOrders.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'Có lỗi xảy ra khi lấy danh sách đơn hàng';
      })

      // fetchOrderDetail
      .addCase(fetchOrderDetail.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchOrderDetail.fulfilled, (state, action) => {
        state.loading = false;
        state.currentOrder = action.payload;
      })
      .addCase(fetchOrderDetail.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'Có lỗi xảy ra khi lấy thông tin đơn hàng';
      });
  },
});

export default orderSlice.reducer;


--- File: src/store/slices/productSlice.js ---
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import productService from '../../services/productService';

// Async thunk để lấy chi tiết sản phẩm
export const fetchProducts = createAsyncThunk(
  'product/fetchProducts',
  async (params, { rejectWithValue }) => {
    try {
      const response = await productService.getProducts(params);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể lấy danh sách sản phẩm');
    }
  }
);

export const fetchProductById = createAsyncThunk(
  'product/fetchProductById',
  async (id, { rejectWithValue }) => {
    try {
      const response = await productService.getProductById(id);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể lấy thông tin sản phẩm');
    }
  }
);

export const fetchCategories = createAsyncThunk(
  'product/fetchCategories',
  async (_, { rejectWithValue }) => {
    try {
      const response = await productService.getCategories();
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể lấy danh mục sản phẩm');
    }
  }
);

// Initial state
const initialState = {
  products: [],
  product: null,
  categories: [],
  filters: {
    category: '',
    priceRange: { min: 0, max: 0 },
    sort: 'newest',
  },
  pagination: {
    page: 1,
    limit: 12,
    total: 0,
    pages: 0,
  },
  loading: false,
  error: null,
};

// Slice
const productSlice = createSlice({
  name: 'product',
  initialState,
  reducers: {
    setFilters: (state, action) => {
      state.filters = { ...state.filters, ...action.payload };
      // Reset trang về 1 khi thay đổi bộ lọc
      state.pagination.page = 1;
    },
    setPage: (state, action) => {
      state.pagination.page = action.payload;
    },
    clearProductError: (state) => {
      state.error = null;
    },
    clearSelectedProduct: (state) => {
      state.product = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // Fetch products
      .addCase(fetchProducts.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.loading = false;
        state.products = action.payload.products;
        state.pagination = {
          page: action.payload.page,
          limit: action.payload.limit,
          total: action.payload.total,
          pages: action.payload.pages,
        };
      })
      .addCase(fetchProducts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // Fetch product by id
      .addCase(fetchProductById.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchProductById.fulfilled, (state, action) => {
        state.loading = false;
        state.product = action.payload;
      })
      .addCase(fetchProductById.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // Fetch categories
      .addCase(fetchCategories.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchCategories.fulfilled, (state, action) => {
        state.loading = false;
        state.categories = action.payload;
      })
      .addCase(fetchCategories.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });
  },
});

// Actions
export const { setFilters, setPage, clearProductError, clearSelectedProduct } =
  productSlice.actions;

// Selectors
export const selectProducts = (state) => state.product.products;
export const selectSelectedProduct = (state) => state.product.product;
export const selectCategories = (state) => state.product.categories;
export const selectFilters = (state) => state.product.filters;
export const selectPagination = (state) => state.product.pagination;
export const selectProductLoading = (state) => state.product.loading;
export const selectProductError = (state) => state.product.error;

// Reducer

export default productSlice.reducer;


--- File: src/store/slices/reviewSlice.js ---
// src/store/slices/reviewSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { reviewService } from '../../services/reviewService';

export const fetchProductReviews = createAsyncThunk(
  'review/fetchProductReviews',
  async (productId, { rejectWithValue }) => {
    try {
      const result = await reviewService.getProductReviews(productId);
      return result;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể lấy đánh giá sản phẩm');
    }
  }
);

export const submitProductReview = createAsyncThunk(
  'review/submitProductReview',
  async (reviewData, { rejectWithValue, dispatch }) => {
    try {
      const result = await reviewService.createReview(reviewData);
      // Refetch reviews after submitting
      dispatch(fetchProductReviews(reviewData.productId));
      return result;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể gửi đánh giá');
    }
  }
);

export const fetchUserReviews = createAsyncThunk(
  'review/fetchUserReviews',
  async (_, { rejectWithValue }) => {
    try {
      const reviews = await reviewService.getUserReviews();
      return reviews;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể lấy đánh giá của bạn');
    }
  }
);

const initialState = {
  reviews: [],
  userReviews: [],
  stats: {
    average: 0,
    count: 0,
    distribution: {},
  },
  loading: false,
  submitting: false,
  error: null,
};

const reviewSlice = createSlice({
  name: 'review',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      // fetchProductReviews
      .addCase(fetchProductReviews.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchProductReviews.fulfilled, (state, action) => {
        state.loading = false;
        state.reviews = action.payload.reviews;
        state.stats = action.payload.stats;
      })
      .addCase(fetchProductReviews.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'Có lỗi xảy ra khi lấy đánh giá';
      })

      // submitProductReview
      .addCase(submitProductReview.pending, (state) => {
        state.submitting = true;
        state.error = null;
      })
      .addCase(submitProductReview.fulfilled, (state) => {
        state.submitting = false;
      })
      .addCase(submitProductReview.rejected, (state, action) => {
        state.submitting = false;
        state.error = action.payload || 'Có lỗi xảy ra khi gửi đánh giá';
      })

      // fetchUserReviews
      .addCase(fetchUserReviews.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchUserReviews.fulfilled, (state, action) => {
        state.loading = false;
        state.userReviews = action.payload;
      })
      .addCase(fetchUserReviews.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'Có lỗi xảy ra khi lấy đánh giá của bạn';
      });
  },
});

export default reviewSlice.reducer;


--- File: src/store/slices/searchSlice.js ---
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import productService from '../../services/productService';

// Async thunk for searching products
export const searchProducts = createAsyncThunk(
  'search/searchProducts',
  async (keyword, { rejectWithValue }) => {
    try {
      return await productService.searchProducts(keyword);
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

// Initial state
const initialState = {
  keyword: '',
  results: [],
  loading: false,
  error: null,
  recentSearches: [],
  filters: {
    category: null,
    priceRange: { min: 0, max: 10000000 },
    sortBy: 'relevance',
  },
};

// Slice
const searchSlice = createSlice({
  name: 'search',
  initialState,
  reducers: {
    setKeyword: (state, action) => {
      state.keyword = action.payload;

      // Add to recent searches if not already there
      if (action.payload && !state.recentSearches.includes(action.payload)) {
        state.recentSearches = [
          action.payload,
          ...state.recentSearches.slice(0, 4), // Keep only 5 most recent
        ];
      }
    },
    clearResults: (state) => {
      state.results = [];
    },
    setSearchFilters: (state, action) => {
      state.filters = { ...state.filters, ...action.payload };
    },
    clearSearchFilters: (state) => {
      state.filters = initialState.filters;
    },
    clearRecentSearches: (state) => {
      state.recentSearches = [];
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(searchProducts.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(searchProducts.fulfilled, (state, action) => {
        state.loading = false;
        state.results = action.payload;
      })
      .addCase(searchProducts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });
  },
});

// Export actions and reducer
export const {
  setKeyword,
  clearResults,
  setSearchFilters,
  clearSearchFilters,
  clearRecentSearches,
} = searchSlice.actions;

export default searchSlice.reducer;


--- File: src/store/slices/uiSlice.js ---
import { createSlice } from '@reduxjs/toolkit';

// Hàm tiện ích để thao tác với localStorage an toàn
const safeLocalStorage = {
  getItem: (key, defaultValue = null) => {
    try {
      const value = localStorage.getItem(key);
      return value !== null ? value : defaultValue;
    } catch (error) {
      console.error(`Lỗi khi đọc ${key} từ localStorage:`, error);
      return defaultValue;
    }
  },
  setItem: (key, value) => {
    try {
      localStorage.setItem(key, value);
      return true;
    } catch (error) {
      console.error(`Lỗi khi lưu ${key} vào localStorage:`, error);
      return false;
    }
  },
};

// Initial state
const initialState = {
  sidebarOpen: false,
  notifications: [],
  theme: safeLocalStorage.getItem('theme', 'light'),
};

// Slice
const uiSlice = createSlice({
  name: 'ui',
  initialState,
  reducers: {
    toggleSidebar: (state) => {
      state.sidebarOpen = !state.sidebarOpen;
    },
    setSidebarOpen: (state, action) => {
      state.sidebarOpen = action.payload;
    },
    addNotification: (state, action) => {
      const id = Date.now().toString();
      state.notifications.push({
        id,
        type: action.payload.type || 'info',
        message: action.payload.message,
        duration: action.payload.duration || 5000,
      });
    },
    removeNotification: (state, action) => {
      state.notifications = state.notifications.filter(
        (notification) => notification.id !== action.payload
      );
    },
    clearNotifications: (state) => {
      state.notifications = [];
    },
    setTheme: (state, action) => {
      state.theme = action.payload;
      safeLocalStorage.setItem('theme', action.payload);
    },
  },
});

// Actions
export const {
  toggleSidebar,
  setSidebarOpen,
  addNotification,
  removeNotification,
  clearNotifications,
  setTheme,
} = uiSlice.actions;

// Selectors
export const selectSidebarOpen = (state) => state.ui.sidebarOpen;
export const selectNotifications = (state) => state.ui.notifications;
export const selectTheme = (state) => state.ui.theme;

// Middleware để xử lý side effects (như thay đổi DOM)
export const uiMiddleware = (store) => (next) => (action) => {
  // Xử lý trước khi action được dispatch
  const result = next(action);

  // Xử lý sau khi action đã được dispatch
  if (setTheme.match(action)) {
    // Áp dụng theme vào document
    document.documentElement.classList.remove('light', 'dark');
    document.documentElement.classList.add(action.payload);
  }

  return result;
};

// Reducer
export default uiSlice.reducer;


--- File: src/store/slices/userSlice.js ---
// src/store/slices/userSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import userService from '../../services/userService';

// Async thunk để lấy thông tin hồ sơ người dùng
export const fetchUserProfile = createAsyncThunk(
  'user/fetchUserProfile',
  async (_, { rejectWithValue }) => {
    try {
      const user = await userService.getUserProfile();
      return user;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể lấy thông tin người dùng');
    }
  }
);

// Async thunk để cập nhật thông tin hồ sơ người dùng
export const updateUserProfile = createAsyncThunk(
  'user/updateUserProfile',
  async (userData, { rejectWithValue }) => {
    try {
      const updatedUser = await userService.updateUserProfile(userData);
      return updatedUser;
    } catch (error) {
      return rejectWithValue(
        error.response?.data?.message || 'Không thể cập nhật thông tin người dùng'
      );
    }
  }
);

// Async thunk để thay đổi mật khẩu
export const changePassword = createAsyncThunk(
  'user/changePassword',
  async (passwordData, { rejectWithValue }) => {
    try {
      const result = await userService.changePassword(passwordData);
      return result;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể thay đổi mật khẩu');
    }
  }
);

// Async thunk để cập nhật avatar
export const updateAvatar = createAsyncThunk(
  'user/updateAvatar',
  async (formData, { rejectWithValue }) => {
    try {
      const result = await userService.updateAvatar(formData);
      return result;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể cập nhật ảnh đại diện');
    }
  }
);

// Initial state
const initialState = {
  user: null,
  loading: false,
  error: null,
  passwordUpdateStatus: {
    loading: false,
    success: false,
    error: null,
  },
  avatarUpdateStatus: {
    loading: false,
    success: false,
    error: null,
  },
};

// User slice
const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    // Reset trạng thái cập nhật mật khẩu
    resetPasswordUpdateStatus: (state) => {
      state.passwordUpdateStatus = {
        loading: false,
        success: false,
        error: null,
      };
    },
    // Reset trạng thái cập nhật avatar
    resetAvatarUpdateStatus: (state) => {
      state.avatarUpdateStatus = {
        loading: false,
        success: false,
        error: null,
      };
    },
    // Clear user state khi logout
    clearUserState: (state) => {
      state.user = null;
      state.loading = false;
      state.error = null;
      state.passwordUpdateStatus = {
        loading: false,
        success: false,
        error: null,
      };
      state.avatarUpdateStatus = {
        loading: false,
        success: false,
        error: null,
      };
    },
  },
  extraReducers: (builder) => {
    builder
      // fetchUserProfile
      .addCase(fetchUserProfile.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchUserProfile.fulfilled, (state, action) => {
        state.loading = false;
        state.user = action.payload;
      })
      .addCase(fetchUserProfile.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'Đã xảy ra lỗi khi lấy thông tin người dùng';
      })

      // updateUserProfile
      .addCase(updateUserProfile.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(updateUserProfile.fulfilled, (state, action) => {
        state.loading = false;
        state.user = action.payload;
      })
      .addCase(updateUserProfile.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'Đã xảy ra lỗi khi cập nhật thông tin người dùng';
      })

      // changePassword
      .addCase(changePassword.pending, (state) => {
        state.passwordUpdateStatus.loading = true;
        state.passwordUpdateStatus.success = false;
        state.passwordUpdateStatus.error = null;
      })
      .addCase(changePassword.fulfilled, (state) => {
        state.passwordUpdateStatus.loading = false;
        state.passwordUpdateStatus.success = true;
      })
      .addCase(changePassword.rejected, (state, action) => {
        state.passwordUpdateStatus.loading = false;
        state.passwordUpdateStatus.success = false;
        state.passwordUpdateStatus.error = action.payload || 'Đã xảy ra lỗi khi thay đổi mật khẩu';
      })

      // updateAvatar
      .addCase(updateAvatar.pending, (state) => {
        state.avatarUpdateStatus.loading = true;
        state.avatarUpdateStatus.success = false;
        state.avatarUpdateStatus.error = null;
      })
      .addCase(updateAvatar.fulfilled, (state, action) => {
        state.avatarUpdateStatus.loading = false;
        state.avatarUpdateStatus.success = true;
        if (state.user) {
          state.user.avatar = action.payload.avatar;
        }
      })
      .addCase(updateAvatar.rejected, (state, action) => {
        state.avatarUpdateStatus.loading = false;
        state.avatarUpdateStatus.success = false;
        state.avatarUpdateStatus.error =
          action.payload || 'Đã xảy ra lỗi khi cập nhật ảnh đại diện';
      });
  },
});

// Export actions
export const { resetPasswordUpdateStatus, resetAvatarUpdateStatus, clearUserState } =
  userSlice.actions;

// Export reducer
export default userSlice.reducer;


--- File: src/store/slices/wishlistSlice.js ---
// src/store/slices/wishlistSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import wishlistService from '../../services/wishlistService';

// Async thunk để lấy danh sách sản phẩm yêu thích
export const fetchWishlist = createAsyncThunk(
  'wishlist/fetchWishlist',
  async (_, { rejectWithValue }) => {
    try {
      const wishlist = await wishlistService.getWishlist();
      return wishlist;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || 'Không thể lấy danh sách yêu thích');
    }
  }
);

// Async thunk để thêm sản phẩm vào danh sách yêu thích
export const addToWishlist = createAsyncThunk(
  'wishlist/addToWishlist',
  async (productId, { rejectWithValue }) => {
    try {
      const result = await wishlistService.addToWishlist(productId);
      return result;
    } catch (error) {
      return rejectWithValue(
        error.response?.data?.message || 'Không thể thêm vào danh sách yêu thích'
      );
    }
  }
);

// Async thunk để xóa sản phẩm khỏi danh sách yêu thích
export const removeFromWishlist = createAsyncThunk(
  'wishlist/removeFromWishlist',
  async (productId, { rejectWithValue }) => {
    try {
      await wishlistService.removeFromWishlist(productId);
      return productId;
    } catch (error) {
      return rejectWithValue(
        error.response?.data?.message || 'Không thể xóa khỏi danh sách yêu thích'
      );
    }
  }
);

// Initial state
const initialState = {
  items: [],
  loading: false,
  error: null,
  addingItem: null,
  removingItem: null,
};

// Wishlist slice
const wishlistSlice = createSlice({
  name: 'wishlist',
  initialState,
  reducers: {
    // Reset trạng thái lỗi
    resetWishlistError: (state) => {
      state.error = null;
    },
    // Clear toàn bộ danh sách yêu thích khi logout
    clearWishlist: (state) => {
      state.items = [];
      state.loading = false;
      state.error = null;
      state.addingItem = null;
      state.removingItem = null;
    },
  },
  extraReducers: (builder) => {
    builder
      // fetchWishlist
      .addCase(fetchWishlist.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchWishlist.fulfilled, (state, action) => {
        state.loading = false;
        state.items = action.payload;
      })
      .addCase(fetchWishlist.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'Đã xảy ra lỗi khi lấy danh sách yêu thích';
      })

      // addToWishlist
      .addCase(addToWishlist.pending, (state, action) => {
        state.addingItem = action.meta.arg; // productId
      })
      .addCase(addToWishlist.fulfilled, (state, action) => {
        state.addingItem = null;
        // Kiểm tra xem sản phẩm đã có trong danh sách chưa
        const exists = state.items.some((item) => item._id === action.payload._id);
        if (!exists) {
          state.items.push(action.payload);
        }
      })
      .addCase(addToWishlist.rejected, (state, action) => {
        state.addingItem = null;
        state.error = action.payload || 'Đã xảy ra lỗi khi thêm vào danh sách yêu thích';
      })

      // removeFromWishlist
      .addCase(removeFromWishlist.pending, (state, action) => {
        state.removingItem = action.meta.arg; // productId
      })
      .addCase(removeFromWishlist.fulfilled, (state, action) => {
        state.removingItem = null;
        state.items = state.items.filter((item) => item._id !== action.payload);
      })
      .addCase(removeFromWishlist.rejected, (state, action) => {
        state.removingItem = null;
        state.error = action.payload || 'Đã xảy ra lỗi khi xóa khỏi danh sách yêu thích';
      });
  },
});

// Export actions
export const { resetWishlistError, clearWishlist } = wishlistSlice.actions;

// Export reducer
export default wishlistSlice.reducer;


--- File: src/utils/authToken.js ---
import axios from 'axios';
// client/src/utils/authToken.js
/**
 * File này chứa các tiện ích để quản lý token xác thực trong ứng dụng React
 * Vị trí: client/src/utils/authToken.js
 */

const TOKEN_KEY = 'auth_token';
const REFRESH_TOKEN_KEY = 'refresh_token';

/**
 * Thiết lập token xác thực vào localStorage và header của Axios
 * @param {string} token - JWT token
 */
export const setAuthToken = (token) => {
  localStorage.setItem(TOKEN_KEY, token);

  if (token) {
    // Áp dụng token cho tất cả các request
    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  } else {
    // Xóa header nếu không có token
    delete axios.defaults.headers.common['Authorization'];
  }
};

/**
 * Lấy token xác thực từ localStorage
 * @returns {string|null} Token xác thực hoặc null nếu không có
 */
export const getAuthToken = () => {
  return localStorage.getItem(TOKEN_KEY);
};

/**
 * Xóa token xác thực khỏi localStorage và header của Axios
 */
export const removeAuthToken = () => {
  localStorage.removeItem(TOKEN_KEY);
  delete axios.defaults.headers.common['Authorization'];
};

/**
 * Thiết lập refresh token vào localStorage
 * @param {string} token - Refresh token
 */
export const setRefreshToken = (token) => {
  localStorage.setItem(REFRESH_TOKEN_KEY, token);
};

/**
 * Lấy refresh token từ localStorage
 * @returns {string|null} Refresh token hoặc null nếu không có
 */
export const getRefreshToken = () => {
  return localStorage.getItem(REFRESH_TOKEN_KEY);
};

/**
 * Xóa refresh token khỏi localStorage
 */
export const removeRefreshToken = () => {
  localStorage.removeItem(REFRESH_TOKEN_KEY);
};

/**
 * Làm mới token xác thực bằng refresh token
 * @returns {Promise<string>} Token xác thực mới
 * @throws {Error} Nếu không thể làm mới token
 */
export const refreshToken = async () => {
  try {
    const refreshToken = getRefreshToken();

    if (!refreshToken) {
      throw new Error('Không có refresh token');
    }

    const response = await fetch(`${process.env.REACT_APP_API_URL}/auth/refresh-token`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ refreshToken }),
    });

    if (!response.ok) {
      throw new Error('Không thể làm mới token');
    }

    const data = await response.json();
    setAuthToken(data.token);

    if (data.refreshToken) {
      setRefreshToken(data.refreshToken);
    }

    return data.token;
  } catch (error) {
    removeAuthToken();
    removeRefreshToken();
    throw error;
  }
};

/**
 * Kiểm tra xem người dùng đã đăng nhập hay chưa
 * @returns {boolean} true nếu đã đăng nhập, false nếu chưa
 */
export const isAuthenticated = () => {
  return !!getAuthToken();
};


--- File: src/utils/formatters.js ---
/**
 * Định dạng giá tiền theo loại tiền tệ
 * @param {number} price - Số tiền cần định dạng
 * @param {string} locale - Ngôn ngữ hiển thị (mặc định: 'vi-VN')
 * @param {string} currency - Loại tiền tệ (mặc định: 'VND')
 * @returns {string} Giá tiền đã định dạng
 */
export const formatPrice = (price, locale = 'vi-VN', currency = 'VND') => {
  if (price === null || price === undefined) return '';

  try {
    return new Intl.NumberFormat(locale, {
      style: 'currency',
      currency: currency,
    }).format(price);
  } catch (error) {
    console.error('Lỗi khi định dạng giá tiền:', error);
    return `${price} ${currency}`;
  }
};

/**
 * Định dạng ngày theo định dạng chuẩn
 * @param {string|Date} date - Ngày cần định dạng
 * @param {string} locale - Ngôn ngữ hiển thị (mặc định: 'vi-VN')
 * @param {object} options - Tùy chọn định dạng (mặc định: hiển thị đầy đủ ngày tháng)
 * @returns {string} Ngày đã định dạng
 */
export const formatDate = (date, locale = 'vi-VN', options = null) => {
  if (!date) return '';

  try {
    const dateObj = typeof date === 'string' ? new Date(date) : date;

    // Kiểm tra ngày hợp lệ
    if (isNaN(dateObj.getTime())) {
      return '';
    }

    const defaultOptions = options || {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    };

    return dateObj.toLocaleDateString(locale, defaultOptions);
  } catch (error) {
    console.error('Lỗi khi định dạng ngày:', error);
    return String(date);
  }
};

/**
 * Định dạng thời gian
 * @param {string|Date} date - Thời gian cần định dạng
 * @param {string} locale - Ngôn ngữ hiển thị (mặc định: 'vi-VN')
 * @returns {string} Thời gian đã định dạng
 */
export const formatTime = (date, locale = 'vi-VN') => {
  if (!date) return '';

  try {
    const dateObj = typeof date === 'string' ? new Date(date) : date;

    // Kiểm tra ngày hợp lệ
    if (isNaN(dateObj.getTime())) {
      return '';
    }

    return dateObj.toLocaleTimeString(locale, {
      hour: '2-digit',
      minute: '2-digit',
    });
  } catch (error) {
    console.error('Lỗi khi định dạng thời gian:', error);
    return '';
  }
};

/**
 * Định dạng ngày giờ đầy đủ
 * @param {string|Date} datetime - Ngày giờ cần định dạng
 * @param {string} locale - Ngôn ngữ hiển thị (mặc định: 'vi-VN')
 * @returns {string} Ngày giờ đã định dạng
 */
export const formatDateTime = (datetime, locale = 'vi-VN') => {
  if (!datetime) return '';

  try {
    return `${formatDate(datetime, locale)}, ${formatTime(datetime, locale)}`;
  } catch (error) {
    console.error('Lỗi khi định dạng ngày giờ:', error);
    return String(datetime);
  }
};

/**
 * Rút gọn văn bản nếu quá dài
 * @param {string} text - Văn bản cần rút gọn
 * @param {number} maxLength - Độ dài tối đa (mặc định: 100)
 * @returns {string} Văn bản đã rút gọn
 */
export const truncateText = (text, maxLength = 100) => {
  if (!text) return '';
  if (text.length <= maxLength) return text;

  return text.slice(0, maxLength) + '...';
};

/**
 * Tạo slug từ text
 * @param {string} text - Text cần chuyển đổi
 * @returns {string} Slug
 */
export const createSlug = (text) => {
  if (!text) return '';

  try {
    return text
      .toLowerCase()
      .trim()
      .replace(/[^\w\s-]/g, '')
      .replace(/[\s_-]+/g, '-')
      .replace(/^-+|-+$/g, '');
  } catch (error) {
    console.error('Lỗi khi tạo slug:', error);
    return '';
  }
};

/**
 * Định dạng số điện thoại Việt Nam
 * @param {string} phone - Số điện thoại cần định dạng
 * @returns {string} Số điện thoại đã định dạng
 */
export const formatPhoneNumber = (phone) => {
  if (!phone) return '';

  // Loại bỏ tất cả ký tự không phải số
  const cleaned = phone.replace(/\D/g, '');

  // Kiểm tra độ dài số điện thoại Việt Nam
  if (cleaned.length !== 10) {
    return phone;
  }

  // Định dạng: 0xx xxxx xxx
  return `${cleaned.slice(0, 3)} ${cleaned.slice(3, 7)} ${cleaned.slice(7)}`;
};

/**
 * Định dạng số lượng lớn (ví dụ: 1.5k thay vì 1500)
 * @param {number} number - Số cần định dạng
 * @returns {string} Số đã định dạng
 */
export const formatCompactNumber = (number) => {
  if (number === null || number === undefined) return '';

  const formatter = new Intl.NumberFormat('vi-VN', {
    notation: 'compact',
    compactDisplay: 'short',
  });

  return formatter.format(number);
};


--- File: tailwind.config.js ---
module.exports = {
    content: [
      './src/**/*.{js,jsx,ts,tsx}',
      './public/index.html',
    ],
    theme: {
      extend: {
        colors: {
          primary: {
            50: '#e6f1fe',
            100: '#cce3fd',
            200: '#99c7fb',
            300: '#66aaf9',
            400: '#338ef7',
            500: '#0072f5', // Primary color
            600: '#005bc4',
            700: '#004493',
            800: '#002e62',
            900: '#001731',
          },
        },
        fontFamily: {
          sans: ['Roboto', 'Arial', 'sans-serif'],
          heading: ['Montserrat', 'Arial', 'sans-serif'],
        },
        spacing: {
          '72': '18rem',
          '84': '21rem',
          '96': '24rem',
        },
        borderRadius: {
          'xl': '0.75rem',
          '2xl': '1rem',
        },
        boxShadow: {
          'outline-blue': '0 0 0 3px rgba(0, 114, 245, 0.3)',
        },
        transitionProperty: {
          'height': 'height',
          'spacing': 'margin, padding',
        },
      },
    },
    plugins: [
      require('@tailwindcss/forms'),
    ],
  };

--- File: webpack.config.js ---
// File: webpack.config.js - Đặt ở thư mục gốc của dự án (cùng cấp với package.json)
// Cấu hình Webpack đầy đủ cho dự án React/JavaScript

const path = require('path');
const TerserPlugin = require('terser-webpack-plugin');
const CompressionPlugin = require('compression-webpack-plugin');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

// Xác định môi trường
const isDevelopment = process.env.NODE_ENV !== 'production';

module.exports = {
  // Chế độ: development hoặc production
  mode: isDevelopment ? 'development' : 'production',

  // Điểm vào của ứng dụng
  entry: './src/index.js', // Điều chỉnh đường dẫn tới file entry point của bạn

  // Cấu hình đầu ra
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: isDevelopment ? '[name].js' : '[name].[contenthash].js',
    publicPath: '/',
    clean: true, // Xóa thư mục dist trước mỗi lần build
  },

  // Source maps cho development
  devtool: isDevelopment ? 'eval-source-map' : false,

  // Cấu hình dev server
  devServer: {
    static: {
      directory: path.join(__dirname, 'public'),
    },
    port: 3000,
    hot: true,
    historyApiFallback: true, // Hỗ trợ cho React Router
    open: true,
  },

  // Cấu hình module rules
  module: {
    rules: [
      // JavaScript/React
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env', '@babel/preset-react'],
          },
        },
      },
      // CSS/SCSS
      {
        test: /\.(css|scss)$/,
        use: [
          isDevelopment ? 'style-loader' : MiniCssExtractPlugin.loader,
          'css-loader',
          'postcss-loader',
          'sass-loader',
        ],
      },
      // Images
      {
        test: /\.(png|svg|jpg|jpeg|gif)$/i,
        type: 'asset/resource',
      },
      // Fonts
      {
        test: /\.(woff|woff2|eot|ttf|otf)$/i,
        type: 'asset/resource',
      },
    ],
  },

  // Cấu hình resolve
  resolve: {
    extensions: ['.js', '.jsx', '.json'],
    alias: {
      '@': path.resolve(__dirname, 'src'), // Cho phép import từ '@/components/...'
    },
  },

  // Tối ưu hóa bundle size
  optimization: {
    minimize: !isDevelopment,
    minimizer: [
      new TerserPlugin({
        terserOptions: {
          compress: {
            drop_console: !isDevelopment,
          },
        },
      }),
    ],
    splitChunks: {
      chunks: 'all',
      maxInitialRequests: 10,
      minSize: 0,
      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          name(module) {
            const packageName = module.context.match(/[\\/]node_modules[\\/](.*?)([\\/]|$)/)[1];
            return `vendor.${packageName.replace('@', '')}`;
          },
        },
      },
    },
  },

  // Plugins
  plugins: [
    // Tạo file HTML
    new HtmlWebpackPlugin({
      template: './public/index.html', // Điều chỉnh đường dẫn tới template HTML của bạn
      favicon: './public/favicon.ico', // Nếu có favicon
    }),

    // Extract CSS thành file riêng trong production
    !isDevelopment &&
      new MiniCssExtractPlugin({
        filename: '[name].[contenthash].css',
      }),

    // Nén file JS và CSS
    !isDevelopment &&
      new CompressionPlugin({
        algorithm: 'gzip',
        test: /\.(js|css|html|svg)$/,
        threshold: 10240,
        minRatio: 0.8,
      }),

    // Phân tích bundle size (chỉ chạy khi cần phân tích)
    process.env.ANALYZE === 'true' && new BundleAnalyzerPlugin(),
  ].filter(Boolean),
};

