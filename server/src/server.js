/**
 * Server ch√≠nh cho ·ª©ng d·ª•ng RunOut-Biliard
 * @author Steve
 * @project RunOut-Biliard
 */

const http = require('http');
const app = require('./app');
const config = require('./config/environment');
const logger = require('./config/logger');

// L·∫•y PORT t·ª´ c·∫•u h√¨nh ho·∫∑c bi·∫øn m√¥i tr∆∞·ªùng
const PORT = process.env.PORT || config.app.port || 5000;

// T·∫°o HTTP server
const server = http.createServer(app);

// X·ª≠ l√Ω c√°c l·ªói server
server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof PORT === 'string' ? 'Pipe ' + PORT : 'Port ' + PORT;

  // X·ª≠ l√Ω c√°c l·ªói server c·ª• th·ªÉ v·ªõi th√¥ng b√°o th√¢n thi·ªán
  switch (error.code) {
    case 'EACCES':
      logger.error(`${bind} y√™u c·∫ßu quy·ªÅn n√¢ng cao`);
      throw new Error(`${bind} y√™u c·∫ßu quy·ªÅn n√¢ng cao`);
    case 'EADDRINUSE':
      logger.error(`${bind} ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng`);
      throw new Error(`${bind} ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng`);
    default:
      throw error;
  }
});

// Kh·ªüi ƒë·ªông server
server.listen(PORT, () => {
  logger.info(`üöÄ Server ƒëang ch·∫°y trong m√¥i tr∆∞·ªùng ${config.app.environment}`);
  logger.info(`üåê ƒê·ªãa ch·ªâ: http://${config.app.host}:${PORT}`);
});

// X·ª≠ l√Ω t·∫Øt server an to√†n
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

/**
 * ƒê√≥ng server m·ªôt c√°ch an to√†n
 */
function gracefulShutdown() {
  logger.info('Nh·∫≠n t√≠n hi·ªáu t·∫Øt server, ƒëang ƒë√≥ng k·∫øt n·ªëi...');

  server.close(() => {
    logger.info('Server ƒë√£ ƒë√≥ng, ƒëang ng·∫Øt k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu...');

    // ƒê√≥ng k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu n·∫øu c·∫ßn
    try {
      if (require('mongoose').connection.readyState) {
        require('mongoose').connection.close(false, () => {
          logger.info('ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB.');
          throw new Error('Server ƒë√£ ƒë√≥ng v√† ng·∫Øt k·∫øt n·ªëi th√†nh c√¥ng');
        });
      } else {
        throw new Error('Server ƒë√£ ƒë√≥ng v√† kh√¥ng c·∫ßn ng·∫Øt k·∫øt n·ªëi');
      }
    } catch (err) {
      logger.error(`L·ªói khi ƒë√≥ng k·∫øt n·ªëi: ${err.message}`);
      throw new Error(`L·ªói khi ƒë√≥ng k·∫øt n·ªëi: ${err.message}`);
    }
  });

  // N·∫øu server kh√¥ng ƒë√≥ng sau 10s, t·∫Øt c∆∞·ª°ng ch·∫ø
  setTimeout(() => {
    logger.error('Kh√¥ng th·ªÉ ƒë√≥ng k·∫øt n·ªëi m·ªôt c√°ch √™m d·ªãu, ƒëang t·∫Øt c∆∞·ª°ng ch·∫ø...');
    throw new Error('Kh√¥ng th·ªÉ ƒë√≥ng k·∫øt n·ªëi m·ªôt c√°ch √™m d·ªãu, ƒëang t·∫Øt c∆∞·ª°ng ch·∫ø...');
  }, 10000);
}

// X·ª≠ l√Ω c√°c l·ªói kh√¥ng b·∫Øt ƒë∆∞·ª£c kh√°c
process.on('uncaughtException', (error) => {
  logger.error(`L·ªói kh√¥ng b·∫Øt ƒë∆∞·ª£c: ${error.message}`);
  logger.error(error.stack);

  // Trong m√¥i tr∆∞·ªùng s·∫£n xu·∫•t, ƒë·∫£m b·∫£o server ƒë√≥ng an to√†n sau l·ªói kh√¥ng b·∫Øt ƒë∆∞·ª£c
  if (config.app.environment === 'production') {
    gracefulShutdown();
  }
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('L·ªùi h·ª©a b·ªã t·ª´ ch·ªëi kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω:');
  logger.error(`Promise: ${promise}, Reason: ${reason}`);

  // Trong m√¥i tr∆∞·ªùng s·∫£n xu·∫•t, c√≥ th·ªÉ xem x√©t t·∫Øt ·ª©ng d·ª•ng
  if (config.app.environment === 'production') {
    gracefulShutdown();
  }
});

module.exports = server; // Export ƒë·ªÉ s·ª≠ d·ª•ng trong ki·ªÉm th·ª≠
